
SelfieF7-Cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000818c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  0800835c  0800835c  0001835c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000078  08008544  08008544  00018544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000138  080085bc  080085bc  000185bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000008  080086f4  080086f4  000186f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  080086fc  080086fc  000186fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000067c  20000000  08008700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000061b8  2000067c  08008d7c  0002067c  2**2
                  ALLOC
  9 ._user_heap_stack 00004000  20006834  08008d7c  00026834  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002067c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00045d7a  00000000  00000000  000206ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00007db7  00000000  00000000  00066426  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001fa91  00000000  00000000  0006e1dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b48  00000000  00000000  0008dc70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00004ec0  00000000  00000000  0008f7b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00013fd7  00000000  00000000  00094678  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00009f02  00000000  00000000  000a864f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000b2551  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005d0c  00000000  00000000  000b25d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      00000076  00000000  00000000  000b82dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000067c 	.word	0x2000067c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008344 	.word	0x08008344

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000680 	.word	0x20000680
 800020c:	08008344 	.word	0x08008344

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f001 b8f6 	b.w	8001414 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	468c      	mov	ip, r1
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	9e08      	ldr	r6, [sp, #32]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d151      	bne.n	80002f4 <__udivmoddi4+0xb4>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d96d      	bls.n	8000332 <__udivmoddi4+0xf2>
 8000256:	fab2 fe82 	clz	lr, r2
 800025a:	f1be 0f00 	cmp.w	lr, #0
 800025e:	d00b      	beq.n	8000278 <__udivmoddi4+0x38>
 8000260:	f1ce 0c20 	rsb	ip, lr, #32
 8000264:	fa01 f50e 	lsl.w	r5, r1, lr
 8000268:	fa20 fc0c 	lsr.w	ip, r0, ip
 800026c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000270:	ea4c 0c05 	orr.w	ip, ip, r5
 8000274:	fa00 f40e 	lsl.w	r4, r0, lr
 8000278:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800027c:	0c25      	lsrs	r5, r4, #16
 800027e:	fbbc f8fa 	udiv	r8, ip, sl
 8000282:	fa1f f987 	uxth.w	r9, r7
 8000286:	fb0a cc18 	mls	ip, sl, r8, ip
 800028a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800028e:	fb08 f309 	mul.w	r3, r8, r9
 8000292:	42ab      	cmp	r3, r5
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x6c>
 8000296:	19ed      	adds	r5, r5, r7
 8000298:	f108 32ff 	add.w	r2, r8, #4294967295
 800029c:	f080 8123 	bcs.w	80004e6 <__udivmoddi4+0x2a6>
 80002a0:	42ab      	cmp	r3, r5
 80002a2:	f240 8120 	bls.w	80004e6 <__udivmoddi4+0x2a6>
 80002a6:	f1a8 0802 	sub.w	r8, r8, #2
 80002aa:	443d      	add	r5, r7
 80002ac:	1aed      	subs	r5, r5, r3
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb5 f0fa 	udiv	r0, r5, sl
 80002b4:	fb0a 5510 	mls	r5, sl, r0, r5
 80002b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002bc:	fb00 f909 	mul.w	r9, r0, r9
 80002c0:	45a1      	cmp	r9, r4
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x98>
 80002c4:	19e4      	adds	r4, r4, r7
 80002c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ca:	f080 810a 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80002ce:	45a1      	cmp	r9, r4
 80002d0:	f240 8107 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80002d4:	3802      	subs	r0, #2
 80002d6:	443c      	add	r4, r7
 80002d8:	eba4 0409 	sub.w	r4, r4, r9
 80002dc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002e0:	2100      	movs	r1, #0
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d061      	beq.n	80003aa <__udivmoddi4+0x16a>
 80002e6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ea:	2300      	movs	r3, #0
 80002ec:	6034      	str	r4, [r6, #0]
 80002ee:	6073      	str	r3, [r6, #4]
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0xc8>
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d054      	beq.n	80003a6 <__udivmoddi4+0x166>
 80002fc:	2100      	movs	r1, #0
 80002fe:	e886 0021 	stmia.w	r6, {r0, r5}
 8000302:	4608      	mov	r0, r1
 8000304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000308:	fab3 f183 	clz	r1, r3
 800030c:	2900      	cmp	r1, #0
 800030e:	f040 808e 	bne.w	800042e <__udivmoddi4+0x1ee>
 8000312:	42ab      	cmp	r3, r5
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xdc>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80fa 	bhi.w	8000510 <__udivmoddi4+0x2d0>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb65 0503 	sbc.w	r5, r5, r3
 8000322:	2001      	movs	r0, #1
 8000324:	46ac      	mov	ip, r5
 8000326:	2e00      	cmp	r6, #0
 8000328:	d03f      	beq.n	80003aa <__udivmoddi4+0x16a>
 800032a:	e886 1010 	stmia.w	r6, {r4, ip}
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	b912      	cbnz	r2, 800033a <__udivmoddi4+0xfa>
 8000334:	2701      	movs	r7, #1
 8000336:	fbb7 f7f2 	udiv	r7, r7, r2
 800033a:	fab7 fe87 	clz	lr, r7
 800033e:	f1be 0f00 	cmp.w	lr, #0
 8000342:	d134      	bne.n	80003ae <__udivmoddi4+0x16e>
 8000344:	1beb      	subs	r3, r5, r7
 8000346:	0c3a      	lsrs	r2, r7, #16
 8000348:	fa1f fc87 	uxth.w	ip, r7
 800034c:	2101      	movs	r1, #1
 800034e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000352:	0c25      	lsrs	r5, r4, #16
 8000354:	fb02 3318 	mls	r3, r2, r8, r3
 8000358:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800035c:	fb0c f308 	mul.w	r3, ip, r8
 8000360:	42ab      	cmp	r3, r5
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x134>
 8000364:	19ed      	adds	r5, r5, r7
 8000366:	f108 30ff 	add.w	r0, r8, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x132>
 800036c:	42ab      	cmp	r3, r5
 800036e:	f200 80d1 	bhi.w	8000514 <__udivmoddi4+0x2d4>
 8000372:	4680      	mov	r8, r0
 8000374:	1aed      	subs	r5, r5, r3
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb5 f0f2 	udiv	r0, r5, r2
 800037c:	fb02 5510 	mls	r5, r2, r0, r5
 8000380:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000384:	fb0c fc00 	mul.w	ip, ip, r0
 8000388:	45a4      	cmp	ip, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x15c>
 800038c:	19e4      	adds	r4, r4, r7
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x15a>
 8000394:	45a4      	cmp	ip, r4
 8000396:	f200 80b8 	bhi.w	800050a <__udivmoddi4+0x2ca>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 040c 	sub.w	r4, r4, ip
 80003a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a4:	e79d      	b.n	80002e2 <__udivmoddi4+0xa2>
 80003a6:	4631      	mov	r1, r6
 80003a8:	4630      	mov	r0, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	f1ce 0420 	rsb	r4, lr, #32
 80003b2:	fa05 f30e 	lsl.w	r3, r5, lr
 80003b6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ba:	fa20 f804 	lsr.w	r8, r0, r4
 80003be:	0c3a      	lsrs	r2, r7, #16
 80003c0:	fa25 f404 	lsr.w	r4, r5, r4
 80003c4:	ea48 0803 	orr.w	r8, r8, r3
 80003c8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003cc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003d0:	fb02 4411 	mls	r4, r2, r1, r4
 80003d4:	fa1f fc87 	uxth.w	ip, r7
 80003d8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003dc:	fb01 f30c 	mul.w	r3, r1, ip
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003e6:	d909      	bls.n	80003fc <__udivmoddi4+0x1bc>
 80003e8:	19ed      	adds	r5, r5, r7
 80003ea:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ee:	f080 808a 	bcs.w	8000506 <__udivmoddi4+0x2c6>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	f240 8087 	bls.w	8000506 <__udivmoddi4+0x2c6>
 80003f8:	3902      	subs	r1, #2
 80003fa:	443d      	add	r5, r7
 80003fc:	1aeb      	subs	r3, r5, r3
 80003fe:	fa1f f588 	uxth.w	r5, r8
 8000402:	fbb3 f0f2 	udiv	r0, r3, r2
 8000406:	fb02 3310 	mls	r3, r2, r0, r3
 800040a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800040e:	fb00 f30c 	mul.w	r3, r0, ip
 8000412:	42ab      	cmp	r3, r5
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x1e6>
 8000416:	19ed      	adds	r5, r5, r7
 8000418:	f100 38ff 	add.w	r8, r0, #4294967295
 800041c:	d26f      	bcs.n	80004fe <__udivmoddi4+0x2be>
 800041e:	42ab      	cmp	r3, r5
 8000420:	d96d      	bls.n	80004fe <__udivmoddi4+0x2be>
 8000422:	3802      	subs	r0, #2
 8000424:	443d      	add	r5, r7
 8000426:	1aeb      	subs	r3, r5, r3
 8000428:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042c:	e78f      	b.n	800034e <__udivmoddi4+0x10e>
 800042e:	f1c1 0720 	rsb	r7, r1, #32
 8000432:	fa22 f807 	lsr.w	r8, r2, r7
 8000436:	408b      	lsls	r3, r1
 8000438:	fa05 f401 	lsl.w	r4, r5, r1
 800043c:	ea48 0303 	orr.w	r3, r8, r3
 8000440:	fa20 fe07 	lsr.w	lr, r0, r7
 8000444:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000448:	40fd      	lsrs	r5, r7
 800044a:	ea4e 0e04 	orr.w	lr, lr, r4
 800044e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000452:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000456:	fb0c 5519 	mls	r5, ip, r9, r5
 800045a:	fa1f f883 	uxth.w	r8, r3
 800045e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000462:	fb09 f408 	mul.w	r4, r9, r8
 8000466:	42ac      	cmp	r4, r5
 8000468:	fa02 f201 	lsl.w	r2, r2, r1
 800046c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x244>
 8000472:	18ed      	adds	r5, r5, r3
 8000474:	f109 30ff 	add.w	r0, r9, #4294967295
 8000478:	d243      	bcs.n	8000502 <__udivmoddi4+0x2c2>
 800047a:	42ac      	cmp	r4, r5
 800047c:	d941      	bls.n	8000502 <__udivmoddi4+0x2c2>
 800047e:	f1a9 0902 	sub.w	r9, r9, #2
 8000482:	441d      	add	r5, r3
 8000484:	1b2d      	subs	r5, r5, r4
 8000486:	fa1f fe8e 	uxth.w	lr, lr
 800048a:	fbb5 f0fc 	udiv	r0, r5, ip
 800048e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000492:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000496:	fb00 f808 	mul.w	r8, r0, r8
 800049a:	45a0      	cmp	r8, r4
 800049c:	d907      	bls.n	80004ae <__udivmoddi4+0x26e>
 800049e:	18e4      	adds	r4, r4, r3
 80004a0:	f100 35ff 	add.w	r5, r0, #4294967295
 80004a4:	d229      	bcs.n	80004fa <__udivmoddi4+0x2ba>
 80004a6:	45a0      	cmp	r8, r4
 80004a8:	d927      	bls.n	80004fa <__udivmoddi4+0x2ba>
 80004aa:	3802      	subs	r0, #2
 80004ac:	441c      	add	r4, r3
 80004ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b2:	eba4 0408 	sub.w	r4, r4, r8
 80004b6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ba:	454c      	cmp	r4, r9
 80004bc:	46c6      	mov	lr, r8
 80004be:	464d      	mov	r5, r9
 80004c0:	d315      	bcc.n	80004ee <__udivmoddi4+0x2ae>
 80004c2:	d012      	beq.n	80004ea <__udivmoddi4+0x2aa>
 80004c4:	b156      	cbz	r6, 80004dc <__udivmoddi4+0x29c>
 80004c6:	ebba 030e 	subs.w	r3, sl, lr
 80004ca:	eb64 0405 	sbc.w	r4, r4, r5
 80004ce:	fa04 f707 	lsl.w	r7, r4, r7
 80004d2:	40cb      	lsrs	r3, r1
 80004d4:	431f      	orrs	r7, r3
 80004d6:	40cc      	lsrs	r4, r1
 80004d8:	6037      	str	r7, [r6, #0]
 80004da:	6074      	str	r4, [r6, #4]
 80004dc:	2100      	movs	r1, #0
 80004de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e2:	4618      	mov	r0, r3
 80004e4:	e6f8      	b.n	80002d8 <__udivmoddi4+0x98>
 80004e6:	4690      	mov	r8, r2
 80004e8:	e6e0      	b.n	80002ac <__udivmoddi4+0x6c>
 80004ea:	45c2      	cmp	sl, r8
 80004ec:	d2ea      	bcs.n	80004c4 <__udivmoddi4+0x284>
 80004ee:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f2:	eb69 0503 	sbc.w	r5, r9, r3
 80004f6:	3801      	subs	r0, #1
 80004f8:	e7e4      	b.n	80004c4 <__udivmoddi4+0x284>
 80004fa:	4628      	mov	r0, r5
 80004fc:	e7d7      	b.n	80004ae <__udivmoddi4+0x26e>
 80004fe:	4640      	mov	r0, r8
 8000500:	e791      	b.n	8000426 <__udivmoddi4+0x1e6>
 8000502:	4681      	mov	r9, r0
 8000504:	e7be      	b.n	8000484 <__udivmoddi4+0x244>
 8000506:	4601      	mov	r1, r0
 8000508:	e778      	b.n	80003fc <__udivmoddi4+0x1bc>
 800050a:	3802      	subs	r0, #2
 800050c:	443c      	add	r4, r7
 800050e:	e745      	b.n	800039c <__udivmoddi4+0x15c>
 8000510:	4608      	mov	r0, r1
 8000512:	e708      	b.n	8000326 <__udivmoddi4+0xe6>
 8000514:	f1a8 0802 	sub.w	r8, r8, #2
 8000518:	443d      	add	r5, r7
 800051a:	e72b      	b.n	8000374 <__udivmoddi4+0x134>

0800051c <selfrel_offset31>:
 800051c:	6803      	ldr	r3, [r0, #0]
 800051e:	005a      	lsls	r2, r3, #1
 8000520:	bf4c      	ite	mi
 8000522:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000526:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800052a:	4418      	add	r0, r3
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <search_EIT_table>:
 8000530:	b361      	cbz	r1, 800058c <search_EIT_table+0x5c>
 8000532:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000536:	f101 3aff 	add.w	sl, r1, #4294967295
 800053a:	4690      	mov	r8, r2
 800053c:	4606      	mov	r6, r0
 800053e:	46d1      	mov	r9, sl
 8000540:	2700      	movs	r7, #0
 8000542:	eb07 0409 	add.w	r4, r7, r9
 8000546:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800054a:	1064      	asrs	r4, r4, #1
 800054c:	00e5      	lsls	r5, r4, #3
 800054e:	1971      	adds	r1, r6, r5
 8000550:	4608      	mov	r0, r1
 8000552:	f7ff ffe3 	bl	800051c <selfrel_offset31>
 8000556:	45a2      	cmp	sl, r4
 8000558:	4683      	mov	fp, r0
 800055a:	f105 0008 	add.w	r0, r5, #8
 800055e:	4430      	add	r0, r6
 8000560:	d009      	beq.n	8000576 <search_EIT_table+0x46>
 8000562:	f7ff ffdb 	bl	800051c <selfrel_offset31>
 8000566:	45c3      	cmp	fp, r8
 8000568:	f100 30ff 	add.w	r0, r0, #4294967295
 800056c:	d805      	bhi.n	800057a <search_EIT_table+0x4a>
 800056e:	4540      	cmp	r0, r8
 8000570:	d209      	bcs.n	8000586 <search_EIT_table+0x56>
 8000572:	1c67      	adds	r7, r4, #1
 8000574:	e7e5      	b.n	8000542 <search_EIT_table+0x12>
 8000576:	45c3      	cmp	fp, r8
 8000578:	d905      	bls.n	8000586 <search_EIT_table+0x56>
 800057a:	42a7      	cmp	r7, r4
 800057c:	d002      	beq.n	8000584 <search_EIT_table+0x54>
 800057e:	f104 39ff 	add.w	r9, r4, #4294967295
 8000582:	e7de      	b.n	8000542 <search_EIT_table+0x12>
 8000584:	2100      	movs	r1, #0
 8000586:	4608      	mov	r0, r1
 8000588:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800058c:	4608      	mov	r0, r1
 800058e:	4770      	bx	lr

08000590 <__gnu_unwind_get_pr_addr>:
 8000590:	2801      	cmp	r0, #1
 8000592:	d007      	beq.n	80005a4 <__gnu_unwind_get_pr_addr+0x14>
 8000594:	2802      	cmp	r0, #2
 8000596:	d007      	beq.n	80005a8 <__gnu_unwind_get_pr_addr+0x18>
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <__gnu_unwind_get_pr_addr+0x1c>)
 800059a:	2800      	cmp	r0, #0
 800059c:	bf0c      	ite	eq
 800059e:	4618      	moveq	r0, r3
 80005a0:	2000      	movne	r0, #0
 80005a2:	4770      	bx	lr
 80005a4:	4802      	ldr	r0, [pc, #8]	; (80005b0 <__gnu_unwind_get_pr_addr+0x20>)
 80005a6:	4770      	bx	lr
 80005a8:	4802      	ldr	r0, [pc, #8]	; (80005b4 <__gnu_unwind_get_pr_addr+0x24>)
 80005aa:	4770      	bx	lr
 80005ac:	08000c95 	.word	0x08000c95
 80005b0:	08000c99 	.word	0x08000c99
 80005b4:	08000c9d 	.word	0x08000c9d

080005b8 <get_eit_entry>:
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	4b24      	ldr	r3, [pc, #144]	; (800064c <get_eit_entry+0x94>)
 80005bc:	b083      	sub	sp, #12
 80005be:	4604      	mov	r4, r0
 80005c0:	1e8d      	subs	r5, r1, #2
 80005c2:	b37b      	cbz	r3, 8000624 <get_eit_entry+0x6c>
 80005c4:	a901      	add	r1, sp, #4
 80005c6:	4628      	mov	r0, r5
 80005c8:	f3af 8000 	nop.w
 80005cc:	b320      	cbz	r0, 8000618 <get_eit_entry+0x60>
 80005ce:	9901      	ldr	r1, [sp, #4]
 80005d0:	462a      	mov	r2, r5
 80005d2:	f7ff ffad 	bl	8000530 <search_EIT_table>
 80005d6:	4601      	mov	r1, r0
 80005d8:	b1f0      	cbz	r0, 8000618 <get_eit_entry+0x60>
 80005da:	f7ff ff9f 	bl	800051c <selfrel_offset31>
 80005de:	684b      	ldr	r3, [r1, #4]
 80005e0:	64a0      	str	r0, [r4, #72]	; 0x48
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d012      	beq.n	800060c <get_eit_entry+0x54>
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	f101 0004 	add.w	r0, r1, #4
 80005ec:	db20      	blt.n	8000630 <get_eit_entry+0x78>
 80005ee:	f7ff ff95 	bl	800051c <selfrel_offset31>
 80005f2:	2300      	movs	r3, #0
 80005f4:	64e0      	str	r0, [r4, #76]	; 0x4c
 80005f6:	6523      	str	r3, [r4, #80]	; 0x50
 80005f8:	6803      	ldr	r3, [r0, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	db1c      	blt.n	8000638 <get_eit_entry+0x80>
 80005fe:	f7ff ff8d 	bl	800051c <selfrel_offset31>
 8000602:	2300      	movs	r3, #0
 8000604:	6120      	str	r0, [r4, #16]
 8000606:	4618      	mov	r0, r3
 8000608:	b003      	add	sp, #12
 800060a:	bd30      	pop	{r4, r5, pc}
 800060c:	2300      	movs	r3, #0
 800060e:	6123      	str	r3, [r4, #16]
 8000610:	2305      	movs	r3, #5
 8000612:	4618      	mov	r0, r3
 8000614:	b003      	add	sp, #12
 8000616:	bd30      	pop	{r4, r5, pc}
 8000618:	2300      	movs	r3, #0
 800061a:	6123      	str	r3, [r4, #16]
 800061c:	2309      	movs	r3, #9
 800061e:	4618      	mov	r0, r3
 8000620:	b003      	add	sp, #12
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	490a      	ldr	r1, [pc, #40]	; (8000650 <get_eit_entry+0x98>)
 8000626:	480b      	ldr	r0, [pc, #44]	; (8000654 <get_eit_entry+0x9c>)
 8000628:	1a09      	subs	r1, r1, r0
 800062a:	10c9      	asrs	r1, r1, #3
 800062c:	9101      	str	r1, [sp, #4]
 800062e:	e7cf      	b.n	80005d0 <get_eit_entry+0x18>
 8000630:	2301      	movs	r3, #1
 8000632:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000634:	6523      	str	r3, [r4, #80]	; 0x50
 8000636:	e7df      	b.n	80005f8 <get_eit_entry+0x40>
 8000638:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800063c:	f7ff ffa8 	bl	8000590 <__gnu_unwind_get_pr_addr>
 8000640:	2800      	cmp	r0, #0
 8000642:	6120      	str	r0, [r4, #16]
 8000644:	bf14      	ite	ne
 8000646:	2300      	movne	r3, #0
 8000648:	2309      	moveq	r3, #9
 800064a:	e7dc      	b.n	8000606 <get_eit_entry+0x4e>
 800064c:	00000000 	.word	0x00000000
 8000650:	080086f4 	.word	0x080086f4
 8000654:	080085bc 	.word	0x080085bc

08000658 <restore_non_core_regs>:
 8000658:	6803      	ldr	r3, [r0, #0]
 800065a:	07da      	lsls	r2, r3, #31
 800065c:	b510      	push	{r4, lr}
 800065e:	4604      	mov	r4, r0
 8000660:	d406      	bmi.n	8000670 <restore_non_core_regs+0x18>
 8000662:	079b      	lsls	r3, r3, #30
 8000664:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000668:	d509      	bpl.n	800067e <restore_non_core_regs+0x26>
 800066a:	f000 fc51 	bl	8000f10 <__gnu_Unwind_Restore_VFP_D>
 800066e:	6823      	ldr	r3, [r4, #0]
 8000670:	0759      	lsls	r1, r3, #29
 8000672:	d509      	bpl.n	8000688 <restore_non_core_regs+0x30>
 8000674:	071a      	lsls	r2, r3, #28
 8000676:	d50e      	bpl.n	8000696 <restore_non_core_regs+0x3e>
 8000678:	06db      	lsls	r3, r3, #27
 800067a:	d513      	bpl.n	80006a4 <restore_non_core_regs+0x4c>
 800067c:	bd10      	pop	{r4, pc}
 800067e:	f000 fc3f 	bl	8000f00 <__gnu_Unwind_Restore_VFP>
 8000682:	6823      	ldr	r3, [r4, #0]
 8000684:	0759      	lsls	r1, r3, #29
 8000686:	d4f5      	bmi.n	8000674 <restore_non_core_regs+0x1c>
 8000688:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800068c:	f000 fc48 	bl	8000f20 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000690:	6823      	ldr	r3, [r4, #0]
 8000692:	071a      	lsls	r2, r3, #28
 8000694:	d4f0      	bmi.n	8000678 <restore_non_core_regs+0x20>
 8000696:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800069a:	f000 fc49 	bl	8000f30 <__gnu_Unwind_Restore_WMMXD>
 800069e:	6823      	ldr	r3, [r4, #0]
 80006a0:	06db      	lsls	r3, r3, #27
 80006a2:	d4eb      	bmi.n	800067c <restore_non_core_regs+0x24>
 80006a4:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80006a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006ac:	f000 bc84 	b.w	8000fb8 <__gnu_Unwind_Restore_WMMXC>

080006b0 <_Unwind_decode_typeinfo_ptr.isra.0>:
 80006b0:	6803      	ldr	r3, [r0, #0]
 80006b2:	b103      	cbz	r3, 80006b6 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 80006b4:	4403      	add	r3, r0
 80006b6:	4618      	mov	r0, r3
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <__gnu_unwind_24bit.isra.1>:
 80006bc:	2009      	movs	r0, #9
 80006be:	4770      	bx	lr

080006c0 <_Unwind_DebugHook>:
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop

080006c4 <unwind_phase2>:
 80006c4:	b570      	push	{r4, r5, r6, lr}
 80006c6:	4604      	mov	r4, r0
 80006c8:	460d      	mov	r5, r1
 80006ca:	e008      	b.n	80006de <unwind_phase2+0x1a>
 80006cc:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80006ce:	6163      	str	r3, [r4, #20]
 80006d0:	462a      	mov	r2, r5
 80006d2:	6923      	ldr	r3, [r4, #16]
 80006d4:	4621      	mov	r1, r4
 80006d6:	2001      	movs	r0, #1
 80006d8:	4798      	blx	r3
 80006da:	2808      	cmp	r0, #8
 80006dc:	d108      	bne.n	80006f0 <unwind_phase2+0x2c>
 80006de:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80006e0:	4620      	mov	r0, r4
 80006e2:	f7ff ff69 	bl	80005b8 <get_eit_entry>
 80006e6:	4606      	mov	r6, r0
 80006e8:	2800      	cmp	r0, #0
 80006ea:	d0ef      	beq.n	80006cc <unwind_phase2+0x8>
 80006ec:	f007 fdbf 	bl	800826e <abort>
 80006f0:	2807      	cmp	r0, #7
 80006f2:	d1fb      	bne.n	80006ec <unwind_phase2+0x28>
 80006f4:	4630      	mov	r0, r6
 80006f6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80006f8:	f7ff ffe2 	bl	80006c0 <_Unwind_DebugHook>
 80006fc:	1d28      	adds	r0, r5, #4
 80006fe:	f000 fbf3 	bl	8000ee8 <__restore_core_regs>
 8000702:	bf00      	nop

08000704 <unwind_phase2_forced>:
 8000704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000708:	1d0c      	adds	r4, r1, #4
 800070a:	4605      	mov	r5, r0
 800070c:	4692      	mov	sl, r2
 800070e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000710:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000714:	ae03      	add	r6, sp, #12
 8000716:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000718:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800071a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800071c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800071e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000720:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000724:	ac02      	add	r4, sp, #8
 8000726:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800072a:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800072e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000732:	2300      	movs	r3, #0
 8000734:	4628      	mov	r0, r5
 8000736:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000738:	6023      	str	r3, [r4, #0]
 800073a:	f7ff ff3d 	bl	80005b8 <get_eit_entry>
 800073e:	f1ba 0f00 	cmp.w	sl, #0
 8000742:	4607      	mov	r7, r0
 8000744:	bf14      	ite	ne
 8000746:	260a      	movne	r6, #10
 8000748:	2609      	moveq	r6, #9
 800074a:	b17f      	cbz	r7, 800076c <unwind_phase2_forced+0x68>
 800074c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800074e:	f046 0110 	orr.w	r1, r6, #16
 8000752:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000756:	462a      	mov	r2, r5
 8000758:	6463      	str	r3, [r4, #68]	; 0x44
 800075a:	2001      	movs	r0, #1
 800075c:	462b      	mov	r3, r5
 800075e:	47c0      	blx	r8
 8000760:	bb78      	cbnz	r0, 80007c2 <unwind_phase2_forced+0xbe>
 8000762:	4638      	mov	r0, r7
 8000764:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800076c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800076e:	616b      	str	r3, [r5, #20]
 8000770:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000774:	4621      	mov	r1, r4
 8000776:	a87a      	add	r0, sp, #488	; 0x1e8
 8000778:	f007 fbbe 	bl	8007ef8 <memcpy>
 800077c:	692b      	ldr	r3, [r5, #16]
 800077e:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000780:	4629      	mov	r1, r5
 8000782:	4630      	mov	r0, r6
 8000784:	4798      	blx	r3
 8000786:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000788:	4682      	mov	sl, r0
 800078a:	e88d 0210 	stmia.w	sp, {r4, r9}
 800078e:	4631      	mov	r1, r6
 8000790:	6463      	str	r3, [r4, #68]	; 0x44
 8000792:	462a      	mov	r2, r5
 8000794:	462b      	mov	r3, r5
 8000796:	2001      	movs	r0, #1
 8000798:	47c0      	blx	r8
 800079a:	b990      	cbnz	r0, 80007c2 <unwind_phase2_forced+0xbe>
 800079c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80007a0:	a97a      	add	r1, sp, #488	; 0x1e8
 80007a2:	4620      	mov	r0, r4
 80007a4:	f007 fba8 	bl	8007ef8 <memcpy>
 80007a8:	f1ba 0f08 	cmp.w	sl, #8
 80007ac:	d106      	bne.n	80007bc <unwind_phase2_forced+0xb8>
 80007ae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80007b0:	4628      	mov	r0, r5
 80007b2:	f7ff ff01 	bl	80005b8 <get_eit_entry>
 80007b6:	2609      	movs	r6, #9
 80007b8:	4607      	mov	r7, r0
 80007ba:	e7c6      	b.n	800074a <unwind_phase2_forced+0x46>
 80007bc:	f1ba 0f07 	cmp.w	sl, #7
 80007c0:	d005      	beq.n	80007ce <unwind_phase2_forced+0xca>
 80007c2:	2709      	movs	r7, #9
 80007c4:	4638      	mov	r0, r7
 80007c6:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80007ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ce:	4638      	mov	r0, r7
 80007d0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80007d2:	f7ff ff75 	bl	80006c0 <_Unwind_DebugHook>
 80007d6:	a803      	add	r0, sp, #12
 80007d8:	f000 fb86 	bl	8000ee8 <__restore_core_regs>

080007dc <_Unwind_GetCFA>:
 80007dc:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80007de:	4770      	bx	lr

080007e0 <__gnu_Unwind_RaiseException>:
 80007e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007e2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80007e4:	640b      	str	r3, [r1, #64]	; 0x40
 80007e6:	1d0e      	adds	r6, r1, #4
 80007e8:	460f      	mov	r7, r1
 80007ea:	4604      	mov	r4, r0
 80007ec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007ee:	b0f9      	sub	sp, #484	; 0x1e4
 80007f0:	ad01      	add	r5, sp, #4
 80007f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007f8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007fc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000800:	f04f 36ff 	mov.w	r6, #4294967295
 8000804:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000808:	9600      	str	r6, [sp, #0]
 800080a:	e006      	b.n	800081a <__gnu_Unwind_RaiseException+0x3a>
 800080c:	6923      	ldr	r3, [r4, #16]
 800080e:	466a      	mov	r2, sp
 8000810:	4621      	mov	r1, r4
 8000812:	4798      	blx	r3
 8000814:	2808      	cmp	r0, #8
 8000816:	4605      	mov	r5, r0
 8000818:	d108      	bne.n	800082c <__gnu_Unwind_RaiseException+0x4c>
 800081a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800081c:	4620      	mov	r0, r4
 800081e:	f7ff fecb 	bl	80005b8 <get_eit_entry>
 8000822:	2800      	cmp	r0, #0
 8000824:	d0f2      	beq.n	800080c <__gnu_Unwind_RaiseException+0x2c>
 8000826:	2009      	movs	r0, #9
 8000828:	b079      	add	sp, #484	; 0x1e4
 800082a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800082c:	4668      	mov	r0, sp
 800082e:	f7ff ff13 	bl	8000658 <restore_non_core_regs>
 8000832:	2d06      	cmp	r5, #6
 8000834:	d1f7      	bne.n	8000826 <__gnu_Unwind_RaiseException+0x46>
 8000836:	4639      	mov	r1, r7
 8000838:	4620      	mov	r0, r4
 800083a:	f7ff ff43 	bl	80006c4 <unwind_phase2>
 800083e:	bf00      	nop

08000840 <__gnu_Unwind_ForcedUnwind>:
 8000840:	b430      	push	{r4, r5}
 8000842:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000844:	60c1      	str	r1, [r0, #12]
 8000846:	6182      	str	r2, [r0, #24]
 8000848:	4619      	mov	r1, r3
 800084a:	641d      	str	r5, [r3, #64]	; 0x40
 800084c:	2200      	movs	r2, #0
 800084e:	bc30      	pop	{r4, r5}
 8000850:	e758      	b.n	8000704 <unwind_phase2_forced>
 8000852:	bf00      	nop

08000854 <__gnu_Unwind_Resume>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	68c6      	ldr	r6, [r0, #12]
 8000858:	6943      	ldr	r3, [r0, #20]
 800085a:	640b      	str	r3, [r1, #64]	; 0x40
 800085c:	b126      	cbz	r6, 8000868 <__gnu_Unwind_Resume+0x14>
 800085e:	2201      	movs	r2, #1
 8000860:	f7ff ff50 	bl	8000704 <unwind_phase2_forced>
 8000864:	f007 fd03 	bl	800826e <abort>
 8000868:	6903      	ldr	r3, [r0, #16]
 800086a:	460a      	mov	r2, r1
 800086c:	4604      	mov	r4, r0
 800086e:	460d      	mov	r5, r1
 8000870:	4601      	mov	r1, r0
 8000872:	2002      	movs	r0, #2
 8000874:	4798      	blx	r3
 8000876:	2807      	cmp	r0, #7
 8000878:	d007      	beq.n	800088a <__gnu_Unwind_Resume+0x36>
 800087a:	2808      	cmp	r0, #8
 800087c:	d103      	bne.n	8000886 <__gnu_Unwind_Resume+0x32>
 800087e:	4629      	mov	r1, r5
 8000880:	4620      	mov	r0, r4
 8000882:	f7ff ff1f 	bl	80006c4 <unwind_phase2>
 8000886:	f007 fcf2 	bl	800826e <abort>
 800088a:	4630      	mov	r0, r6
 800088c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800088e:	f7ff ff17 	bl	80006c0 <_Unwind_DebugHook>
 8000892:	1d28      	adds	r0, r5, #4
 8000894:	f000 fb28 	bl	8000ee8 <__restore_core_regs>

08000898 <__gnu_Unwind_Resume_or_Rethrow>:
 8000898:	68c2      	ldr	r2, [r0, #12]
 800089a:	b11a      	cbz	r2, 80008a4 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 800089c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800089e:	640a      	str	r2, [r1, #64]	; 0x40
 80008a0:	2200      	movs	r2, #0
 80008a2:	e72f      	b.n	8000704 <unwind_phase2_forced>
 80008a4:	e79c      	b.n	80007e0 <__gnu_Unwind_RaiseException>
 80008a6:	bf00      	nop

080008a8 <_Unwind_Complete>:
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop

080008ac <_Unwind_DeleteException>:
 80008ac:	6883      	ldr	r3, [r0, #8]
 80008ae:	b113      	cbz	r3, 80008b6 <_Unwind_DeleteException+0xa>
 80008b0:	4601      	mov	r1, r0
 80008b2:	2001      	movs	r0, #1
 80008b4:	4718      	bx	r3
 80008b6:	4770      	bx	lr

080008b8 <_Unwind_VRS_Get>:
 80008b8:	b500      	push	{lr}
 80008ba:	2904      	cmp	r1, #4
 80008bc:	d807      	bhi.n	80008ce <_Unwind_VRS_Get+0x16>
 80008be:	e8df f001 	tbb	[pc, r1]
 80008c2:	0903      	.short	0x0903
 80008c4:	0906      	.short	0x0906
 80008c6:	09          	.byte	0x09
 80008c7:	00          	.byte	0x00
 80008c8:	b90b      	cbnz	r3, 80008ce <_Unwind_VRS_Get+0x16>
 80008ca:	2a0f      	cmp	r2, #15
 80008cc:	d905      	bls.n	80008da <_Unwind_VRS_Get+0x22>
 80008ce:	2002      	movs	r0, #2
 80008d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80008d4:	2001      	movs	r0, #1
 80008d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80008da:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80008de:	4618      	mov	r0, r3
 80008e0:	6853      	ldr	r3, [r2, #4]
 80008e2:	9a01      	ldr	r2, [sp, #4]
 80008e4:	6013      	str	r3, [r2, #0]
 80008e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80008ea:	bf00      	nop

080008ec <_Unwind_GetGR>:
 80008ec:	b510      	push	{r4, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	2300      	movs	r3, #0
 80008f2:	ac03      	add	r4, sp, #12
 80008f4:	460a      	mov	r2, r1
 80008f6:	9400      	str	r4, [sp, #0]
 80008f8:	4619      	mov	r1, r3
 80008fa:	f7ff ffdd 	bl	80008b8 <_Unwind_VRS_Get>
 80008fe:	9803      	ldr	r0, [sp, #12]
 8000900:	b004      	add	sp, #16
 8000902:	bd10      	pop	{r4, pc}

08000904 <_Unwind_VRS_Set>:
 8000904:	b500      	push	{lr}
 8000906:	2904      	cmp	r1, #4
 8000908:	d807      	bhi.n	800091a <_Unwind_VRS_Set+0x16>
 800090a:	e8df f001 	tbb	[pc, r1]
 800090e:	0903      	.short	0x0903
 8000910:	0906      	.short	0x0906
 8000912:	09          	.byte	0x09
 8000913:	00          	.byte	0x00
 8000914:	b90b      	cbnz	r3, 800091a <_Unwind_VRS_Set+0x16>
 8000916:	2a0f      	cmp	r2, #15
 8000918:	d905      	bls.n	8000926 <_Unwind_VRS_Set+0x22>
 800091a:	2002      	movs	r0, #2
 800091c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000920:	2001      	movs	r0, #1
 8000922:	f85d fb04 	ldr.w	pc, [sp], #4
 8000926:	9901      	ldr	r1, [sp, #4]
 8000928:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800092c:	6809      	ldr	r1, [r1, #0]
 800092e:	6051      	str	r1, [r2, #4]
 8000930:	4618      	mov	r0, r3
 8000932:	f85d fb04 	ldr.w	pc, [sp], #4
 8000936:	bf00      	nop

08000938 <_Unwind_SetGR>:
 8000938:	b510      	push	{r4, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	ac04      	add	r4, sp, #16
 800093e:	2300      	movs	r3, #0
 8000940:	f844 2d04 	str.w	r2, [r4, #-4]!
 8000944:	460a      	mov	r2, r1
 8000946:	9400      	str	r4, [sp, #0]
 8000948:	4619      	mov	r1, r3
 800094a:	f7ff ffdb 	bl	8000904 <_Unwind_VRS_Set>
 800094e:	b004      	add	sp, #16
 8000950:	bd10      	pop	{r4, pc}
 8000952:	bf00      	nop

08000954 <__gnu_Unwind_Backtrace>:
 8000954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000956:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000958:	6413      	str	r3, [r2, #64]	; 0x40
 800095a:	1d15      	adds	r5, r2, #4
 800095c:	4607      	mov	r7, r0
 800095e:	460e      	mov	r6, r1
 8000960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000962:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000966:	ac17      	add	r4, sp, #92	; 0x5c
 8000968:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800096a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800096c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800096e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000970:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000972:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000976:	f04f 35ff 	mov.w	r5, #4294967295
 800097a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800097e:	9516      	str	r5, [sp, #88]	; 0x58
 8000980:	e010      	b.n	80009a4 <__gnu_Unwind_Backtrace+0x50>
 8000982:	a816      	add	r0, sp, #88	; 0x58
 8000984:	f7ff ffd8 	bl	8000938 <_Unwind_SetGR>
 8000988:	4631      	mov	r1, r6
 800098a:	a816      	add	r0, sp, #88	; 0x58
 800098c:	47b8      	blx	r7
 800098e:	aa16      	add	r2, sp, #88	; 0x58
 8000990:	4669      	mov	r1, sp
 8000992:	b978      	cbnz	r0, 80009b4 <__gnu_Unwind_Backtrace+0x60>
 8000994:	9b04      	ldr	r3, [sp, #16]
 8000996:	2008      	movs	r0, #8
 8000998:	4798      	blx	r3
 800099a:	2805      	cmp	r0, #5
 800099c:	4604      	mov	r4, r0
 800099e:	d00a      	beq.n	80009b6 <__gnu_Unwind_Backtrace+0x62>
 80009a0:	2809      	cmp	r0, #9
 80009a2:	d007      	beq.n	80009b4 <__gnu_Unwind_Backtrace+0x60>
 80009a4:	9926      	ldr	r1, [sp, #152]	; 0x98
 80009a6:	4668      	mov	r0, sp
 80009a8:	f7ff fe06 	bl	80005b8 <get_eit_entry>
 80009ac:	466a      	mov	r2, sp
 80009ae:	210c      	movs	r1, #12
 80009b0:	2800      	cmp	r0, #0
 80009b2:	d0e6      	beq.n	8000982 <__gnu_Unwind_Backtrace+0x2e>
 80009b4:	2409      	movs	r4, #9
 80009b6:	a816      	add	r0, sp, #88	; 0x58
 80009b8:	f7ff fe4e 	bl	8000658 <restore_non_core_regs>
 80009bc:	4620      	mov	r0, r4
 80009be:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80009c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080009c4 <__gnu_unwind_pr_common>:
 80009c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009c8:	460d      	mov	r5, r1
 80009ca:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80009cc:	b08b      	sub	sp, #44	; 0x2c
 80009ce:	1d0c      	adds	r4, r1, #4
 80009d0:	6809      	ldr	r1, [r1, #0]
 80009d2:	9107      	str	r1, [sp, #28]
 80009d4:	4691      	mov	r9, r2
 80009d6:	9408      	str	r4, [sp, #32]
 80009d8:	f000 0b03 	and.w	fp, r0, #3
 80009dc:	461e      	mov	r6, r3
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d160      	bne.n	8000aa4 <__gnu_unwind_pr_common+0xe0>
 80009e2:	0209      	lsls	r1, r1, #8
 80009e4:	2303      	movs	r3, #3
 80009e6:	9107      	str	r1, [sp, #28]
 80009e8:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 80009ec:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80009f0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80009f2:	f1bb 0f02 	cmp.w	fp, #2
 80009f6:	bf08      	it	eq
 80009f8:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80009fa:	f013 0301 	ands.w	r3, r3, #1
 80009fe:	d140      	bne.n	8000a82 <__gnu_unwind_pr_common+0xbe>
 8000a00:	9301      	str	r3, [sp, #4]
 8000a02:	f000 0308 	and.w	r3, r0, #8
 8000a06:	9303      	str	r3, [sp, #12]
 8000a08:	f8d4 8000 	ldr.w	r8, [r4]
 8000a0c:	f1b8 0f00 	cmp.w	r8, #0
 8000a10:	d039      	beq.n	8000a86 <__gnu_unwind_pr_common+0xc2>
 8000a12:	2e02      	cmp	r6, #2
 8000a14:	d043      	beq.n	8000a9e <__gnu_unwind_pr_common+0xda>
 8000a16:	f8b4 8000 	ldrh.w	r8, [r4]
 8000a1a:	8867      	ldrh	r7, [r4, #2]
 8000a1c:	3404      	adds	r4, #4
 8000a1e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000a20:	f027 0a01 	bic.w	sl, r7, #1
 8000a24:	210f      	movs	r1, #15
 8000a26:	4648      	mov	r0, r9
 8000a28:	449a      	add	sl, r3
 8000a2a:	f7ff ff5f 	bl	80008ec <_Unwind_GetGR>
 8000a2e:	4582      	cmp	sl, r0
 8000a30:	d833      	bhi.n	8000a9a <__gnu_unwind_pr_common+0xd6>
 8000a32:	f028 0301 	bic.w	r3, r8, #1
 8000a36:	449a      	add	sl, r3
 8000a38:	4550      	cmp	r0, sl
 8000a3a:	bf2c      	ite	cs
 8000a3c:	2000      	movcs	r0, #0
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	007f      	lsls	r7, r7, #1
 8000a42:	f007 0702 	and.w	r7, r7, #2
 8000a46:	f008 0801 	and.w	r8, r8, #1
 8000a4a:	ea47 0708 	orr.w	r7, r7, r8
 8000a4e:	2f01      	cmp	r7, #1
 8000a50:	d03e      	beq.n	8000ad0 <__gnu_unwind_pr_common+0x10c>
 8000a52:	d335      	bcc.n	8000ac0 <__gnu_unwind_pr_common+0xfc>
 8000a54:	2f02      	cmp	r7, #2
 8000a56:	d11c      	bne.n	8000a92 <__gnu_unwind_pr_common+0xce>
 8000a58:	6823      	ldr	r3, [r4, #0]
 8000a5a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000a5e:	9202      	str	r2, [sp, #8]
 8000a60:	f1bb 0f00 	cmp.w	fp, #0
 8000a64:	d176      	bne.n	8000b54 <__gnu_unwind_pr_common+0x190>
 8000a66:	b128      	cbz	r0, 8000a74 <__gnu_unwind_pr_common+0xb0>
 8000a68:	9903      	ldr	r1, [sp, #12]
 8000a6a:	2900      	cmp	r1, #0
 8000a6c:	d07e      	beq.n	8000b6c <__gnu_unwind_pr_common+0x1a8>
 8000a6e:	2a00      	cmp	r2, #0
 8000a70:	f000 80a6 	beq.w	8000bc0 <__gnu_unwind_pr_common+0x1fc>
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	db77      	blt.n	8000b68 <__gnu_unwind_pr_common+0x1a4>
 8000a78:	9b02      	ldr	r3, [sp, #8]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000a80:	e7c2      	b.n	8000a08 <__gnu_unwind_pr_common+0x44>
 8000a82:	2300      	movs	r3, #0
 8000a84:	9301      	str	r3, [sp, #4]
 8000a86:	2e02      	cmp	r6, #2
 8000a88:	dd3e      	ble.n	8000b08 <__gnu_unwind_pr_common+0x144>
 8000a8a:	f7ff fe17 	bl	80006bc <__gnu_unwind_24bit.isra.1>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	d040      	beq.n	8000b14 <__gnu_unwind_pr_common+0x150>
 8000a92:	2009      	movs	r0, #9
 8000a94:	b00b      	add	sp, #44	; 0x2c
 8000a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	e7d0      	b.n	8000a40 <__gnu_unwind_pr_common+0x7c>
 8000a9e:	6867      	ldr	r7, [r4, #4]
 8000aa0:	3408      	adds	r4, #8
 8000aa2:	e7bc      	b.n	8000a1e <__gnu_unwind_pr_common+0x5a>
 8000aa4:	2b02      	cmp	r3, #2
 8000aa6:	dca3      	bgt.n	80009f0 <__gnu_unwind_pr_common+0x2c>
 8000aa8:	0c0b      	lsrs	r3, r1, #16
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	0409      	lsls	r1, r1, #16
 8000aae:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000ab8:	9107      	str	r1, [sp, #28]
 8000aba:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000abe:	e797      	b.n	80009f0 <__gnu_unwind_pr_common+0x2c>
 8000ac0:	f1bb 0f00 	cmp.w	fp, #0
 8000ac4:	d002      	beq.n	8000acc <__gnu_unwind_pr_common+0x108>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	f040 80bd 	bne.w	8000c46 <__gnu_unwind_pr_common+0x282>
 8000acc:	3404      	adds	r4, #4
 8000ace:	e79b      	b.n	8000a08 <__gnu_unwind_pr_common+0x44>
 8000ad0:	f1bb 0f00 	cmp.w	fp, #0
 8000ad4:	d125      	bne.n	8000b22 <__gnu_unwind_pr_common+0x15e>
 8000ad6:	b1a8      	cbz	r0, 8000b04 <__gnu_unwind_pr_common+0x140>
 8000ad8:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000adc:	1c99      	adds	r1, r3, #2
 8000ade:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000ae2:	d0d6      	beq.n	8000a92 <__gnu_unwind_pr_common+0xce>
 8000ae4:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000ae8:	3301      	adds	r3, #1
 8000aea:	9106      	str	r1, [sp, #24]
 8000aec:	f000 80a3 	beq.w	8000c36 <__gnu_unwind_pr_common+0x272>
 8000af0:	1d20      	adds	r0, r4, #4
 8000af2:	f7ff fddd 	bl	80006b0 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000af6:	ab06      	add	r3, sp, #24
 8000af8:	4601      	mov	r1, r0
 8000afa:	4628      	mov	r0, r5
 8000afc:	f3af 8000 	nop.w
 8000b00:	2800      	cmp	r0, #0
 8000b02:	d177      	bne.n	8000bf4 <__gnu_unwind_pr_common+0x230>
 8000b04:	3408      	adds	r4, #8
 8000b06:	e77f      	b.n	8000a08 <__gnu_unwind_pr_common+0x44>
 8000b08:	a907      	add	r1, sp, #28
 8000b0a:	4648      	mov	r0, r9
 8000b0c:	f000 faee 	bl	80010ec <__gnu_unwind_execute>
 8000b10:	2800      	cmp	r0, #0
 8000b12:	d1be      	bne.n	8000a92 <__gnu_unwind_pr_common+0xce>
 8000b14:	9b01      	ldr	r3, [sp, #4]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d15c      	bne.n	8000bd4 <__gnu_unwind_pr_common+0x210>
 8000b1a:	2008      	movs	r0, #8
 8000b1c:	b00b      	add	sp, #44	; 0x2c
 8000b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b22:	210d      	movs	r1, #13
 8000b24:	4648      	mov	r0, r9
 8000b26:	6a2f      	ldr	r7, [r5, #32]
 8000b28:	f7ff fee0 	bl	80008ec <_Unwind_GetGR>
 8000b2c:	4287      	cmp	r7, r0
 8000b2e:	d1e9      	bne.n	8000b04 <__gnu_unwind_pr_common+0x140>
 8000b30:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000b32:	429c      	cmp	r4, r3
 8000b34:	d1e6      	bne.n	8000b04 <__gnu_unwind_pr_common+0x140>
 8000b36:	4620      	mov	r0, r4
 8000b38:	f7ff fcf0 	bl	800051c <selfrel_offset31>
 8000b3c:	210f      	movs	r1, #15
 8000b3e:	4602      	mov	r2, r0
 8000b40:	4648      	mov	r0, r9
 8000b42:	f7ff fef9 	bl	8000938 <_Unwind_SetGR>
 8000b46:	4648      	mov	r0, r9
 8000b48:	462a      	mov	r2, r5
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	f7ff fef4 	bl	8000938 <_Unwind_SetGR>
 8000b50:	2007      	movs	r0, #7
 8000b52:	e79f      	b.n	8000a94 <__gnu_unwind_pr_common+0xd0>
 8000b54:	210d      	movs	r1, #13
 8000b56:	4648      	mov	r0, r9
 8000b58:	6a2f      	ldr	r7, [r5, #32]
 8000b5a:	f7ff fec7 	bl	80008ec <_Unwind_GetGR>
 8000b5e:	4287      	cmp	r7, r0
 8000b60:	d058      	beq.n	8000c14 <__gnu_unwind_pr_common+0x250>
 8000b62:	6823      	ldr	r3, [r4, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	da87      	bge.n	8000a78 <__gnu_unwind_pr_common+0xb4>
 8000b68:	3404      	adds	r4, #4
 8000b6a:	e785      	b.n	8000a78 <__gnu_unwind_pr_common+0xb4>
 8000b6c:	9b02      	ldr	r3, [sp, #8]
 8000b6e:	b33b      	cbz	r3, 8000bc0 <__gnu_unwind_pr_common+0x1fc>
 8000b70:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000b74:	1d27      	adds	r7, r4, #4
 8000b76:	f8cd b010 	str.w	fp, [sp, #16]
 8000b7a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000b7e:	f8dd a008 	ldr.w	sl, [sp, #8]
 8000b82:	9605      	str	r6, [sp, #20]
 8000b84:	46a3      	mov	fp, r4
 8000b86:	461c      	mov	r4, r3
 8000b88:	e002      	b.n	8000b90 <__gnu_unwind_pr_common+0x1cc>
 8000b8a:	45b2      	cmp	sl, r6
 8000b8c:	46b0      	mov	r8, r6
 8000b8e:	d016      	beq.n	8000bbe <__gnu_unwind_pr_common+0x1fa>
 8000b90:	4638      	mov	r0, r7
 8000b92:	9406      	str	r4, [sp, #24]
 8000b94:	f7ff fd8c 	bl	80006b0 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000b98:	ab06      	add	r3, sp, #24
 8000b9a:	4601      	mov	r1, r0
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	4628      	mov	r0, r5
 8000ba0:	f3af 8000 	nop.w
 8000ba4:	f108 0601 	add.w	r6, r8, #1
 8000ba8:	3704      	adds	r7, #4
 8000baa:	2800      	cmp	r0, #0
 8000bac:	d0ed      	beq.n	8000b8a <__gnu_unwind_pr_common+0x1c6>
 8000bae:	9b02      	ldr	r3, [sp, #8]
 8000bb0:	9e05      	ldr	r6, [sp, #20]
 8000bb2:	4543      	cmp	r3, r8
 8000bb4:	465c      	mov	r4, fp
 8000bb6:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000bba:	d1d2      	bne.n	8000b62 <__gnu_unwind_pr_common+0x19e>
 8000bbc:	e000      	b.n	8000bc0 <__gnu_unwind_pr_common+0x1fc>
 8000bbe:	465c      	mov	r4, fp
 8000bc0:	4648      	mov	r0, r9
 8000bc2:	210d      	movs	r1, #13
 8000bc4:	f7ff fe92 	bl	80008ec <_Unwind_GetGR>
 8000bc8:	9b06      	ldr	r3, [sp, #24]
 8000bca:	6228      	str	r0, [r5, #32]
 8000bcc:	62ac      	str	r4, [r5, #40]	; 0x28
 8000bce:	626b      	str	r3, [r5, #36]	; 0x24
 8000bd0:	2006      	movs	r0, #6
 8000bd2:	e75f      	b.n	8000a94 <__gnu_unwind_pr_common+0xd0>
 8000bd4:	210f      	movs	r1, #15
 8000bd6:	4648      	mov	r0, r9
 8000bd8:	f7ff fe88 	bl	80008ec <_Unwind_GetGR>
 8000bdc:	210e      	movs	r1, #14
 8000bde:	4602      	mov	r2, r0
 8000be0:	4648      	mov	r0, r9
 8000be2:	f7ff fea9 	bl	8000938 <_Unwind_SetGR>
 8000be6:	4648      	mov	r0, r9
 8000be8:	4a29      	ldr	r2, [pc, #164]	; (8000c90 <__gnu_unwind_pr_common+0x2cc>)
 8000bea:	210f      	movs	r1, #15
 8000bec:	f7ff fea4 	bl	8000938 <_Unwind_SetGR>
 8000bf0:	2007      	movs	r0, #7
 8000bf2:	e74f      	b.n	8000a94 <__gnu_unwind_pr_common+0xd0>
 8000bf4:	4607      	mov	r7, r0
 8000bf6:	210d      	movs	r1, #13
 8000bf8:	4648      	mov	r0, r9
 8000bfa:	f7ff fe77 	bl	80008ec <_Unwind_GetGR>
 8000bfe:	2f02      	cmp	r7, #2
 8000c00:	6228      	str	r0, [r5, #32]
 8000c02:	d11d      	bne.n	8000c40 <__gnu_unwind_pr_common+0x27c>
 8000c04:	462b      	mov	r3, r5
 8000c06:	9a06      	ldr	r2, [sp, #24]
 8000c08:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000c0c:	626b      	str	r3, [r5, #36]	; 0x24
 8000c0e:	62ac      	str	r4, [r5, #40]	; 0x28
 8000c10:	2006      	movs	r0, #6
 8000c12:	e73f      	b.n	8000a94 <__gnu_unwind_pr_common+0xd0>
 8000c14:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000c16:	429c      	cmp	r4, r3
 8000c18:	d1a3      	bne.n	8000b62 <__gnu_unwind_pr_common+0x19e>
 8000c1a:	2204      	movs	r2, #4
 8000c1c:	2700      	movs	r7, #0
 8000c1e:	18a3      	adds	r3, r4, r2
 8000c20:	9902      	ldr	r1, [sp, #8]
 8000c22:	62a9      	str	r1, [r5, #40]	; 0x28
 8000c24:	62ef      	str	r7, [r5, #44]	; 0x2c
 8000c26:	632a      	str	r2, [r5, #48]	; 0x30
 8000c28:	636b      	str	r3, [r5, #52]	; 0x34
 8000c2a:	6823      	ldr	r3, [r4, #0]
 8000c2c:	42bb      	cmp	r3, r7
 8000c2e:	db1d      	blt.n	8000c6c <__gnu_unwind_pr_common+0x2a8>
 8000c30:	2301      	movs	r3, #1
 8000c32:	9301      	str	r3, [sp, #4]
 8000c34:	e720      	b.n	8000a78 <__gnu_unwind_pr_common+0xb4>
 8000c36:	4648      	mov	r0, r9
 8000c38:	210d      	movs	r1, #13
 8000c3a:	f7ff fe57 	bl	80008ec <_Unwind_GetGR>
 8000c3e:	6228      	str	r0, [r5, #32]
 8000c40:	9b06      	ldr	r3, [sp, #24]
 8000c42:	626b      	str	r3, [r5, #36]	; 0x24
 8000c44:	e7e3      	b.n	8000c0e <__gnu_unwind_pr_common+0x24a>
 8000c46:	4620      	mov	r0, r4
 8000c48:	f7ff fc68 	bl	800051c <selfrel_offset31>
 8000c4c:	3404      	adds	r4, #4
 8000c4e:	4606      	mov	r6, r0
 8000c50:	63ac      	str	r4, [r5, #56]	; 0x38
 8000c52:	4628      	mov	r0, r5
 8000c54:	f3af 8000 	nop.w
 8000c58:	2800      	cmp	r0, #0
 8000c5a:	f43f af1a 	beq.w	8000a92 <__gnu_unwind_pr_common+0xce>
 8000c5e:	4648      	mov	r0, r9
 8000c60:	4632      	mov	r2, r6
 8000c62:	210f      	movs	r1, #15
 8000c64:	f7ff fe68 	bl	8000938 <_Unwind_SetGR>
 8000c68:	2007      	movs	r0, #7
 8000c6a:	e713      	b.n	8000a94 <__gnu_unwind_pr_common+0xd0>
 8000c6c:	4608      	mov	r0, r1
 8000c6e:	3001      	adds	r0, #1
 8000c70:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000c74:	f7ff fc52 	bl	800051c <selfrel_offset31>
 8000c78:	210f      	movs	r1, #15
 8000c7a:	4602      	mov	r2, r0
 8000c7c:	4648      	mov	r0, r9
 8000c7e:	f7ff fe5b 	bl	8000938 <_Unwind_SetGR>
 8000c82:	4648      	mov	r0, r9
 8000c84:	462a      	mov	r2, r5
 8000c86:	4639      	mov	r1, r7
 8000c88:	f7ff fe56 	bl	8000938 <_Unwind_SetGR>
 8000c8c:	2007      	movs	r0, #7
 8000c8e:	e701      	b.n	8000a94 <__gnu_unwind_pr_common+0xd0>
 8000c90:	00000000 	.word	0x00000000

08000c94 <__aeabi_unwind_cpp_pr0>:
 8000c94:	2300      	movs	r3, #0
 8000c96:	e695      	b.n	80009c4 <__gnu_unwind_pr_common>

08000c98 <__aeabi_unwind_cpp_pr1>:
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e693      	b.n	80009c4 <__gnu_unwind_pr_common>

08000c9c <__aeabi_unwind_cpp_pr2>:
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	e691      	b.n	80009c4 <__gnu_unwind_pr_common>

08000ca0 <_Unwind_VRS_Pop>:
 8000ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	b0c5      	sub	sp, #276	; 0x114
 8000ca6:	2904      	cmp	r1, #4
 8000ca8:	d80d      	bhi.n	8000cc6 <_Unwind_VRS_Pop+0x26>
 8000caa:	e8df f001 	tbb	[pc, r1]
 8000cae:	0353      	.short	0x0353
 8000cb0:	310c      	.short	0x310c
 8000cb2:	0f          	.byte	0x0f
 8000cb3:	00          	.byte	0x00
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8000cba:	b295      	uxth	r5, r2
 8000cbc:	d162      	bne.n	8000d84 <_Unwind_VRS_Pop+0xe4>
 8000cbe:	1972      	adds	r2, r6, r5
 8000cc0:	2a10      	cmp	r2, #16
 8000cc2:	f240 809b 	bls.w	8000dfc <_Unwind_VRS_Pop+0x15c>
 8000cc6:	2002      	movs	r0, #2
 8000cc8:	b045      	add	sp, #276	; 0x114
 8000cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d1fa      	bne.n	8000cc6 <_Unwind_VRS_Pop+0x26>
 8000cd0:	2a10      	cmp	r2, #16
 8000cd2:	d8f8      	bhi.n	8000cc6 <_Unwind_VRS_Pop+0x26>
 8000cd4:	6823      	ldr	r3, [r4, #0]
 8000cd6:	06d8      	lsls	r0, r3, #27
 8000cd8:	f100 80c6 	bmi.w	8000e68 <_Unwind_VRS_Pop+0x1c8>
 8000cdc:	ae22      	add	r6, sp, #136	; 0x88
 8000cde:	4630      	mov	r0, r6
 8000ce0:	9201      	str	r2, [sp, #4]
 8000ce2:	f000 f973 	bl	8000fcc <__gnu_Unwind_Save_WMMXC>
 8000ce6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000ce8:	9a01      	ldr	r2, [sp, #4]
 8000cea:	2300      	movs	r3, #0
 8000cec:	2501      	movs	r5, #1
 8000cee:	fa05 f103 	lsl.w	r1, r5, r3
 8000cf2:	4211      	tst	r1, r2
 8000cf4:	d003      	beq.n	8000cfe <_Unwind_VRS_Pop+0x5e>
 8000cf6:	6801      	ldr	r1, [r0, #0]
 8000cf8:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8000cfc:	3004      	adds	r0, #4
 8000cfe:	3301      	adds	r3, #1
 8000d00:	2b04      	cmp	r3, #4
 8000d02:	d1f4      	bne.n	8000cee <_Unwind_VRS_Pop+0x4e>
 8000d04:	63a0      	str	r0, [r4, #56]	; 0x38
 8000d06:	4630      	mov	r0, r6
 8000d08:	f000 f956 	bl	8000fb8 <__gnu_Unwind_Restore_WMMXC>
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	e7db      	b.n	8000cc8 <_Unwind_VRS_Pop+0x28>
 8000d10:	2b03      	cmp	r3, #3
 8000d12:	d1d8      	bne.n	8000cc6 <_Unwind_VRS_Pop+0x26>
 8000d14:	0c15      	lsrs	r5, r2, #16
 8000d16:	b297      	uxth	r7, r2
 8000d18:	19eb      	adds	r3, r5, r7
 8000d1a:	2b10      	cmp	r3, #16
 8000d1c:	d8d3      	bhi.n	8000cc6 <_Unwind_VRS_Pop+0x26>
 8000d1e:	6823      	ldr	r3, [r4, #0]
 8000d20:	071e      	lsls	r6, r3, #28
 8000d22:	f100 80b5 	bmi.w	8000e90 <_Unwind_VRS_Pop+0x1f0>
 8000d26:	ae22      	add	r6, sp, #136	; 0x88
 8000d28:	4630      	mov	r0, r6
 8000d2a:	f000 f923 	bl	8000f74 <__gnu_Unwind_Save_WMMXD>
 8000d2e:	00ed      	lsls	r5, r5, #3
 8000d30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000d32:	b14f      	cbz	r7, 8000d48 <_Unwind_VRS_Pop+0xa8>
 8000d34:	3d04      	subs	r5, #4
 8000d36:	1971      	adds	r1, r6, r5
 8000d38:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 8000d3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000d40:	f841 2f04 	str.w	r2, [r1, #4]!
 8000d44:	4283      	cmp	r3, r0
 8000d46:	d1f9      	bne.n	8000d3c <_Unwind_VRS_Pop+0x9c>
 8000d48:	4630      	mov	r0, r6
 8000d4a:	63a3      	str	r3, [r4, #56]	; 0x38
 8000d4c:	f000 f8f0 	bl	8000f30 <__gnu_Unwind_Restore_WMMXD>
 8000d50:	2000      	movs	r0, #0
 8000d52:	e7b9      	b.n	8000cc8 <_Unwind_VRS_Pop+0x28>
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d1b6      	bne.n	8000cc6 <_Unwind_VRS_Pop+0x26>
 8000d58:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000d5a:	b297      	uxth	r7, r2
 8000d5c:	1d20      	adds	r0, r4, #4
 8000d5e:	2601      	movs	r6, #1
 8000d60:	fa06 f103 	lsl.w	r1, r6, r3
 8000d64:	4239      	tst	r1, r7
 8000d66:	f103 0301 	add.w	r3, r3, #1
 8000d6a:	d002      	beq.n	8000d72 <_Unwind_VRS_Pop+0xd2>
 8000d6c:	6829      	ldr	r1, [r5, #0]
 8000d6e:	6001      	str	r1, [r0, #0]
 8000d70:	3504      	adds	r5, #4
 8000d72:	2b10      	cmp	r3, #16
 8000d74:	f100 0004 	add.w	r0, r0, #4
 8000d78:	d1f2      	bne.n	8000d60 <_Unwind_VRS_Pop+0xc0>
 8000d7a:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8000d7e:	d13b      	bne.n	8000df8 <_Unwind_VRS_Pop+0x158>
 8000d80:	63a5      	str	r5, [r4, #56]	; 0x38
 8000d82:	e7a1      	b.n	8000cc8 <_Unwind_VRS_Pop+0x28>
 8000d84:	2b05      	cmp	r3, #5
 8000d86:	d19e      	bne.n	8000cc6 <_Unwind_VRS_Pop+0x26>
 8000d88:	1977      	adds	r7, r6, r5
 8000d8a:	2f20      	cmp	r7, #32
 8000d8c:	d89b      	bhi.n	8000cc6 <_Unwind_VRS_Pop+0x26>
 8000d8e:	2e0f      	cmp	r6, #15
 8000d90:	d966      	bls.n	8000e60 <_Unwind_VRS_Pop+0x1c0>
 8000d92:	462f      	mov	r7, r5
 8000d94:	2d00      	cmp	r5, #0
 8000d96:	d13a      	bne.n	8000e0e <_Unwind_VRS_Pop+0x16e>
 8000d98:	462a      	mov	r2, r5
 8000d9a:	2700      	movs	r7, #0
 8000d9c:	2a00      	cmp	r2, #0
 8000d9e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000da0:	dd72      	ble.n	8000e88 <_Unwind_VRS_Pop+0x1e8>
 8000da2:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000da6:	4601      	mov	r1, r0
 8000da8:	a844      	add	r0, sp, #272	; 0x110
 8000daa:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000dae:	388c      	subs	r0, #140	; 0x8c
 8000db0:	f851 5b04 	ldr.w	r5, [r1], #4
 8000db4:	f840 5f04 	str.w	r5, [r0, #4]!
 8000db8:	4291      	cmp	r1, r2
 8000dba:	d1f9      	bne.n	8000db0 <_Unwind_VRS_Pop+0x110>
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	b197      	cbz	r7, 8000de6 <_Unwind_VRS_Pop+0x146>
 8000dc0:	2e10      	cmp	r6, #16
 8000dc2:	4632      	mov	r2, r6
 8000dc4:	a944      	add	r1, sp, #272	; 0x110
 8000dc6:	bf38      	it	cc
 8000dc8:	2210      	movcc	r2, #16
 8000dca:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000dce:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000dd2:	0079      	lsls	r1, r7, #1
 8000dd4:	3a04      	subs	r2, #4
 8000dd6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000dda:	f850 5b04 	ldr.w	r5, [r0], #4
 8000dde:	f842 5f04 	str.w	r5, [r2, #4]!
 8000de2:	4288      	cmp	r0, r1
 8000de4:	d1f9      	bne.n	8000dda <_Unwind_VRS_Pop+0x13a>
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d048      	beq.n	8000e7c <_Unwind_VRS_Pop+0x1dc>
 8000dea:	2e0f      	cmp	r6, #15
 8000dec:	63a1      	str	r1, [r4, #56]	; 0x38
 8000dee:	d933      	bls.n	8000e58 <_Unwind_VRS_Pop+0x1b8>
 8000df0:	b117      	cbz	r7, 8000df8 <_Unwind_VRS_Pop+0x158>
 8000df2:	a802      	add	r0, sp, #8
 8000df4:	f000 f894 	bl	8000f20 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000df8:	2000      	movs	r0, #0
 8000dfa:	e765      	b.n	8000cc8 <_Unwind_VRS_Pop+0x28>
 8000dfc:	2e0f      	cmp	r6, #15
 8000dfe:	f63f af62 	bhi.w	8000cc6 <_Unwind_VRS_Pop+0x26>
 8000e02:	2700      	movs	r7, #0
 8000e04:	6822      	ldr	r2, [r4, #0]
 8000e06:	07d1      	lsls	r1, r2, #31
 8000e08:	d417      	bmi.n	8000e3a <_Unwind_VRS_Pop+0x19a>
 8000e0a:	2f00      	cmp	r7, #0
 8000e0c:	d060      	beq.n	8000ed0 <_Unwind_VRS_Pop+0x230>
 8000e0e:	6822      	ldr	r2, [r4, #0]
 8000e10:	0751      	lsls	r1, r2, #29
 8000e12:	d445      	bmi.n	8000ea0 <_Unwind_VRS_Pop+0x200>
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d04d      	beq.n	8000eb4 <_Unwind_VRS_Pop+0x214>
 8000e18:	2e0f      	cmp	r6, #15
 8000e1a:	d806      	bhi.n	8000e2a <_Unwind_VRS_Pop+0x18a>
 8000e1c:	a822      	add	r0, sp, #136	; 0x88
 8000e1e:	9301      	str	r3, [sp, #4]
 8000e20:	f000 f87a 	bl	8000f18 <__gnu_Unwind_Save_VFP_D>
 8000e24:	9b01      	ldr	r3, [sp, #4]
 8000e26:	2f00      	cmp	r7, #0
 8000e28:	d0b6      	beq.n	8000d98 <_Unwind_VRS_Pop+0xf8>
 8000e2a:	a802      	add	r0, sp, #8
 8000e2c:	9301      	str	r3, [sp, #4]
 8000e2e:	f000 f87b 	bl	8000f28 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000e32:	9b01      	ldr	r3, [sp, #4]
 8000e34:	f1c6 0210 	rsb	r2, r6, #16
 8000e38:	e7b0      	b.n	8000d9c <_Unwind_VRS_Pop+0xfc>
 8000e3a:	f022 0101 	bic.w	r1, r2, #1
 8000e3e:	2b05      	cmp	r3, #5
 8000e40:	6021      	str	r1, [r4, #0]
 8000e42:	9301      	str	r3, [sp, #4]
 8000e44:	4620      	mov	r0, r4
 8000e46:	d03b      	beq.n	8000ec0 <_Unwind_VRS_Pop+0x220>
 8000e48:	f022 0203 	bic.w	r2, r2, #3
 8000e4c:	f840 2b48 	str.w	r2, [r0], #72
 8000e50:	f000 f85a 	bl	8000f08 <__gnu_Unwind_Save_VFP>
 8000e54:	9b01      	ldr	r3, [sp, #4]
 8000e56:	e7d8      	b.n	8000e0a <_Unwind_VRS_Pop+0x16a>
 8000e58:	a822      	add	r0, sp, #136	; 0x88
 8000e5a:	f000 f859 	bl	8000f10 <__gnu_Unwind_Restore_VFP_D>
 8000e5e:	e7c7      	b.n	8000df0 <_Unwind_VRS_Pop+0x150>
 8000e60:	2f10      	cmp	r7, #16
 8000e62:	d9ce      	bls.n	8000e02 <_Unwind_VRS_Pop+0x162>
 8000e64:	3f10      	subs	r7, #16
 8000e66:	e7cd      	b.n	8000e04 <_Unwind_VRS_Pop+0x164>
 8000e68:	f023 0310 	bic.w	r3, r3, #16
 8000e6c:	6023      	str	r3, [r4, #0]
 8000e6e:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000e72:	9201      	str	r2, [sp, #4]
 8000e74:	f000 f8aa 	bl	8000fcc <__gnu_Unwind_Save_WMMXC>
 8000e78:	9a01      	ldr	r2, [sp, #4]
 8000e7a:	e72f      	b.n	8000cdc <_Unwind_VRS_Pop+0x3c>
 8000e7c:	3104      	adds	r1, #4
 8000e7e:	63a1      	str	r1, [r4, #56]	; 0x38
 8000e80:	a822      	add	r0, sp, #136	; 0x88
 8000e82:	f000 f83d 	bl	8000f00 <__gnu_Unwind_Restore_VFP>
 8000e86:	e7b7      	b.n	8000df8 <_Unwind_VRS_Pop+0x158>
 8000e88:	2f00      	cmp	r7, #0
 8000e8a:	d199      	bne.n	8000dc0 <_Unwind_VRS_Pop+0x120>
 8000e8c:	4601      	mov	r1, r0
 8000e8e:	e7aa      	b.n	8000de6 <_Unwind_VRS_Pop+0x146>
 8000e90:	f023 0308 	bic.w	r3, r3, #8
 8000e94:	6023      	str	r3, [r4, #0]
 8000e96:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000e9a:	f000 f86b 	bl	8000f74 <__gnu_Unwind_Save_WMMXD>
 8000e9e:	e742      	b.n	8000d26 <_Unwind_VRS_Pop+0x86>
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	f022 0204 	bic.w	r2, r2, #4
 8000ea6:	f840 2bd0 	str.w	r2, [r0], #208
 8000eaa:	9301      	str	r3, [sp, #4]
 8000eac:	f000 f83c 	bl	8000f28 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000eb0:	9b01      	ldr	r3, [sp, #4]
 8000eb2:	e7af      	b.n	8000e14 <_Unwind_VRS_Pop+0x174>
 8000eb4:	a822      	add	r0, sp, #136	; 0x88
 8000eb6:	9301      	str	r3, [sp, #4]
 8000eb8:	f000 f826 	bl	8000f08 <__gnu_Unwind_Save_VFP>
 8000ebc:	9b01      	ldr	r3, [sp, #4]
 8000ebe:	e7b9      	b.n	8000e34 <_Unwind_VRS_Pop+0x194>
 8000ec0:	f041 0102 	orr.w	r1, r1, #2
 8000ec4:	f840 1b48 	str.w	r1, [r0], #72
 8000ec8:	f000 f826 	bl	8000f18 <__gnu_Unwind_Save_VFP_D>
 8000ecc:	9b01      	ldr	r3, [sp, #4]
 8000ece:	e79c      	b.n	8000e0a <_Unwind_VRS_Pop+0x16a>
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d003      	beq.n	8000edc <_Unwind_VRS_Pop+0x23c>
 8000ed4:	2e0f      	cmp	r6, #15
 8000ed6:	f63f af5f 	bhi.w	8000d98 <_Unwind_VRS_Pop+0xf8>
 8000eda:	e79f      	b.n	8000e1c <_Unwind_VRS_Pop+0x17c>
 8000edc:	a822      	add	r0, sp, #136	; 0x88
 8000ede:	9301      	str	r3, [sp, #4]
 8000ee0:	f000 f812 	bl	8000f08 <__gnu_Unwind_Save_VFP>
 8000ee4:	9b01      	ldr	r3, [sp, #4]
 8000ee6:	e757      	b.n	8000d98 <_Unwind_VRS_Pop+0xf8>

08000ee8 <__restore_core_regs>:
 8000ee8:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000eec:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000ef0:	469c      	mov	ip, r3
 8000ef2:	46a6      	mov	lr, r4
 8000ef4:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000ef8:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000efc:	46e5      	mov	sp, ip
 8000efe:	bd00      	pop	{pc}

08000f00 <__gnu_Unwind_Restore_VFP>:
 8000f00:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <__gnu_Unwind_Save_VFP>:
 8000f08:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <__gnu_Unwind_Restore_VFP_D>:
 8000f10:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <__gnu_Unwind_Save_VFP_D>:
 8000f18:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000f20:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000f28:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <__gnu_Unwind_Restore_WMMXD>:
 8000f30:	ecf0 0102 	ldfe	f0, [r0], #8
 8000f34:	ecf0 1102 	ldfe	f1, [r0], #8
 8000f38:	ecf0 2102 	ldfe	f2, [r0], #8
 8000f3c:	ecf0 3102 	ldfe	f3, [r0], #8
 8000f40:	ecf0 4102 	ldfe	f4, [r0], #8
 8000f44:	ecf0 5102 	ldfe	f5, [r0], #8
 8000f48:	ecf0 6102 	ldfe	f6, [r0], #8
 8000f4c:	ecf0 7102 	ldfe	f7, [r0], #8
 8000f50:	ecf0 8102 	ldfp	f0, [r0], #8
 8000f54:	ecf0 9102 	ldfp	f1, [r0], #8
 8000f58:	ecf0 a102 	ldfp	f2, [r0], #8
 8000f5c:	ecf0 b102 	ldfp	f3, [r0], #8
 8000f60:	ecf0 c102 	ldfp	f4, [r0], #8
 8000f64:	ecf0 d102 	ldfp	f5, [r0], #8
 8000f68:	ecf0 e102 	ldfp	f6, [r0], #8
 8000f6c:	ecf0 f102 	ldfp	f7, [r0], #8
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <__gnu_Unwind_Save_WMMXD>:
 8000f74:	ece0 0102 	stfe	f0, [r0], #8
 8000f78:	ece0 1102 	stfe	f1, [r0], #8
 8000f7c:	ece0 2102 	stfe	f2, [r0], #8
 8000f80:	ece0 3102 	stfe	f3, [r0], #8
 8000f84:	ece0 4102 	stfe	f4, [r0], #8
 8000f88:	ece0 5102 	stfe	f5, [r0], #8
 8000f8c:	ece0 6102 	stfe	f6, [r0], #8
 8000f90:	ece0 7102 	stfe	f7, [r0], #8
 8000f94:	ece0 8102 	stfp	f0, [r0], #8
 8000f98:	ece0 9102 	stfp	f1, [r0], #8
 8000f9c:	ece0 a102 	stfp	f2, [r0], #8
 8000fa0:	ece0 b102 	stfp	f3, [r0], #8
 8000fa4:	ece0 c102 	stfp	f4, [r0], #8
 8000fa8:	ece0 d102 	stfp	f5, [r0], #8
 8000fac:	ece0 e102 	stfp	f6, [r0], #8
 8000fb0:	ece0 f102 	stfp	f7, [r0], #8
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <__gnu_Unwind_Restore_WMMXC>:
 8000fb8:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000fbc:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000fc0:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000fc4:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <__gnu_Unwind_Save_WMMXC>:
 8000fcc:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000fd0:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000fd4:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000fd8:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop

08000fe0 <_Unwind_RaiseException>:
 8000fe0:	46ec      	mov	ip, sp
 8000fe2:	b500      	push	{lr}
 8000fe4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000fe8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000fec:	f04f 0300 	mov.w	r3, #0
 8000ff0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000ff4:	a901      	add	r1, sp, #4
 8000ff6:	f7ff fbf3 	bl	80007e0 <__gnu_Unwind_RaiseException>
 8000ffa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000ffe:	b012      	add	sp, #72	; 0x48
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <_Unwind_Resume>:
 8001004:	46ec      	mov	ip, sp
 8001006:	b500      	push	{lr}
 8001008:	e92d 5000 	stmdb	sp!, {ip, lr}
 800100c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001010:	f04f 0300 	mov.w	r3, #0
 8001014:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001018:	a901      	add	r1, sp, #4
 800101a:	f7ff fc1b 	bl	8000854 <__gnu_Unwind_Resume>
 800101e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001022:	b012      	add	sp, #72	; 0x48
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <_Unwind_Resume_or_Rethrow>:
 8001028:	46ec      	mov	ip, sp
 800102a:	b500      	push	{lr}
 800102c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001030:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001034:	f04f 0300 	mov.w	r3, #0
 8001038:	e92d 000c 	stmdb	sp!, {r2, r3}
 800103c:	a901      	add	r1, sp, #4
 800103e:	f7ff fc2b 	bl	8000898 <__gnu_Unwind_Resume_or_Rethrow>
 8001042:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001046:	b012      	add	sp, #72	; 0x48
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <_Unwind_ForcedUnwind>:
 800104c:	46ec      	mov	ip, sp
 800104e:	b500      	push	{lr}
 8001050:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001054:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001058:	f04f 0300 	mov.w	r3, #0
 800105c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001060:	ab01      	add	r3, sp, #4
 8001062:	f7ff fbed 	bl	8000840 <__gnu_Unwind_ForcedUnwind>
 8001066:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800106a:	b012      	add	sp, #72	; 0x48
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <_Unwind_Backtrace>:
 8001070:	46ec      	mov	ip, sp
 8001072:	b500      	push	{lr}
 8001074:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001078:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800107c:	f04f 0300 	mov.w	r3, #0
 8001080:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001084:	aa01      	add	r2, sp, #4
 8001086:	f7ff fc65 	bl	8000954 <__gnu_Unwind_Backtrace>
 800108a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800108e:	b012      	add	sp, #72	; 0x48
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <next_unwind_byte>:
 8001094:	7a02      	ldrb	r2, [r0, #8]
 8001096:	b91a      	cbnz	r2, 80010a0 <next_unwind_byte+0xc>
 8001098:	7a43      	ldrb	r3, [r0, #9]
 800109a:	b943      	cbnz	r3, 80010ae <next_unwind_byte+0x1a>
 800109c:	20b0      	movs	r0, #176	; 0xb0
 800109e:	4770      	bx	lr
 80010a0:	6803      	ldr	r3, [r0, #0]
 80010a2:	3a01      	subs	r2, #1
 80010a4:	7202      	strb	r2, [r0, #8]
 80010a6:	021a      	lsls	r2, r3, #8
 80010a8:	6002      	str	r2, [r0, #0]
 80010aa:	0e18      	lsrs	r0, r3, #24
 80010ac:	4770      	bx	lr
 80010ae:	6842      	ldr	r2, [r0, #4]
 80010b0:	3b01      	subs	r3, #1
 80010b2:	b410      	push	{r4}
 80010b4:	7243      	strb	r3, [r0, #9]
 80010b6:	6813      	ldr	r3, [r2, #0]
 80010b8:	2103      	movs	r1, #3
 80010ba:	1d14      	adds	r4, r2, #4
 80010bc:	7201      	strb	r1, [r0, #8]
 80010be:	021a      	lsls	r2, r3, #8
 80010c0:	6044      	str	r4, [r0, #4]
 80010c2:	6002      	str	r2, [r0, #0]
 80010c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010c8:	0e18      	lsrs	r0, r3, #24
 80010ca:	4770      	bx	lr

080010cc <_Unwind_GetGR.constprop.0>:
 80010cc:	b500      	push	{lr}
 80010ce:	b085      	sub	sp, #20
 80010d0:	aa03      	add	r2, sp, #12
 80010d2:	2300      	movs	r3, #0
 80010d4:	9200      	str	r2, [sp, #0]
 80010d6:	4619      	mov	r1, r3
 80010d8:	220c      	movs	r2, #12
 80010da:	f7ff fbed 	bl	80008b8 <_Unwind_VRS_Get>
 80010de:	9803      	ldr	r0, [sp, #12]
 80010e0:	b005      	add	sp, #20
 80010e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80010e6:	bf00      	nop

080010e8 <unwind_UCB_from_context>:
 80010e8:	e7f0      	b.n	80010cc <_Unwind_GetGR.constprop.0>
 80010ea:	bf00      	nop

080010ec <__gnu_unwind_execute>:
 80010ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010f0:	4606      	mov	r6, r0
 80010f2:	b085      	sub	sp, #20
 80010f4:	460f      	mov	r7, r1
 80010f6:	f04f 0800 	mov.w	r8, #0
 80010fa:	4638      	mov	r0, r7
 80010fc:	f7ff ffca 	bl	8001094 <next_unwind_byte>
 8001100:	28b0      	cmp	r0, #176	; 0xb0
 8001102:	4604      	mov	r4, r0
 8001104:	d023      	beq.n	800114e <__gnu_unwind_execute+0x62>
 8001106:	0605      	lsls	r5, r0, #24
 8001108:	d427      	bmi.n	800115a <__gnu_unwind_execute+0x6e>
 800110a:	2300      	movs	r3, #0
 800110c:	f10d 090c 	add.w	r9, sp, #12
 8001110:	4619      	mov	r1, r3
 8001112:	0085      	lsls	r5, r0, #2
 8001114:	220d      	movs	r2, #13
 8001116:	f8cd 9000 	str.w	r9, [sp]
 800111a:	4630      	mov	r0, r6
 800111c:	f7ff fbcc 	bl	80008b8 <_Unwind_VRS_Get>
 8001120:	b2ed      	uxtb	r5, r5
 8001122:	9b03      	ldr	r3, [sp, #12]
 8001124:	f8cd 9000 	str.w	r9, [sp]
 8001128:	0660      	lsls	r0, r4, #25
 800112a:	f105 0504 	add.w	r5, r5, #4
 800112e:	bf4c      	ite	mi
 8001130:	1b5d      	submi	r5, r3, r5
 8001132:	18ed      	addpl	r5, r5, r3
 8001134:	2300      	movs	r3, #0
 8001136:	4619      	mov	r1, r3
 8001138:	220d      	movs	r2, #13
 800113a:	4630      	mov	r0, r6
 800113c:	9503      	str	r5, [sp, #12]
 800113e:	f7ff fbe1 	bl	8000904 <_Unwind_VRS_Set>
 8001142:	4638      	mov	r0, r7
 8001144:	f7ff ffa6 	bl	8001094 <next_unwind_byte>
 8001148:	28b0      	cmp	r0, #176	; 0xb0
 800114a:	4604      	mov	r4, r0
 800114c:	d1db      	bne.n	8001106 <__gnu_unwind_execute+0x1a>
 800114e:	f1b8 0f00 	cmp.w	r8, #0
 8001152:	f000 8095 	beq.w	8001280 <__gnu_unwind_execute+0x194>
 8001156:	2000      	movs	r0, #0
 8001158:	e01c      	b.n	8001194 <__gnu_unwind_execute+0xa8>
 800115a:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800115e:	2b80      	cmp	r3, #128	; 0x80
 8001160:	d05d      	beq.n	800121e <__gnu_unwind_execute+0x132>
 8001162:	2b90      	cmp	r3, #144	; 0x90
 8001164:	d019      	beq.n	800119a <__gnu_unwind_execute+0xae>
 8001166:	2ba0      	cmp	r3, #160	; 0xa0
 8001168:	d02c      	beq.n	80011c4 <__gnu_unwind_execute+0xd8>
 800116a:	2bb0      	cmp	r3, #176	; 0xb0
 800116c:	d03f      	beq.n	80011ee <__gnu_unwind_execute+0x102>
 800116e:	2bc0      	cmp	r3, #192	; 0xc0
 8001170:	d06c      	beq.n	800124c <__gnu_unwind_execute+0x160>
 8001172:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001176:	2bd0      	cmp	r3, #208	; 0xd0
 8001178:	d10b      	bne.n	8001192 <__gnu_unwind_execute+0xa6>
 800117a:	f000 0207 	and.w	r2, r0, #7
 800117e:	3201      	adds	r2, #1
 8001180:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001184:	2305      	movs	r3, #5
 8001186:	2101      	movs	r1, #1
 8001188:	4630      	mov	r0, r6
 800118a:	f7ff fd89 	bl	8000ca0 <_Unwind_VRS_Pop>
 800118e:	2800      	cmp	r0, #0
 8001190:	d0b3      	beq.n	80010fa <__gnu_unwind_execute+0xe>
 8001192:	2009      	movs	r0, #9
 8001194:	b005      	add	sp, #20
 8001196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800119a:	f000 030d 	and.w	r3, r0, #13
 800119e:	2b0d      	cmp	r3, #13
 80011a0:	d0f7      	beq.n	8001192 <__gnu_unwind_execute+0xa6>
 80011a2:	ad03      	add	r5, sp, #12
 80011a4:	2300      	movs	r3, #0
 80011a6:	f000 020f 	and.w	r2, r0, #15
 80011aa:	4619      	mov	r1, r3
 80011ac:	9500      	str	r5, [sp, #0]
 80011ae:	4630      	mov	r0, r6
 80011b0:	f7ff fb82 	bl	80008b8 <_Unwind_VRS_Get>
 80011b4:	2300      	movs	r3, #0
 80011b6:	9500      	str	r5, [sp, #0]
 80011b8:	4619      	mov	r1, r3
 80011ba:	220d      	movs	r2, #13
 80011bc:	4630      	mov	r0, r6
 80011be:	f7ff fba1 	bl	8000904 <_Unwind_VRS_Set>
 80011c2:	e79a      	b.n	80010fa <__gnu_unwind_execute+0xe>
 80011c4:	43c2      	mvns	r2, r0
 80011c6:	f002 0307 	and.w	r3, r2, #7
 80011ca:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80011ce:	411a      	asrs	r2, r3
 80011d0:	0701      	lsls	r1, r0, #28
 80011d2:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80011d6:	f04f 0300 	mov.w	r3, #0
 80011da:	bf48      	it	mi
 80011dc:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80011e0:	4619      	mov	r1, r3
 80011e2:	4630      	mov	r0, r6
 80011e4:	f7ff fd5c 	bl	8000ca0 <_Unwind_VRS_Pop>
 80011e8:	2800      	cmp	r0, #0
 80011ea:	d1d2      	bne.n	8001192 <__gnu_unwind_execute+0xa6>
 80011ec:	e785      	b.n	80010fa <__gnu_unwind_execute+0xe>
 80011ee:	28b1      	cmp	r0, #177	; 0xb1
 80011f0:	d057      	beq.n	80012a2 <__gnu_unwind_execute+0x1b6>
 80011f2:	28b2      	cmp	r0, #178	; 0xb2
 80011f4:	d068      	beq.n	80012c8 <__gnu_unwind_execute+0x1dc>
 80011f6:	28b3      	cmp	r0, #179	; 0xb3
 80011f8:	f000 8095 	beq.w	8001326 <__gnu_unwind_execute+0x23a>
 80011fc:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001200:	2bb4      	cmp	r3, #180	; 0xb4
 8001202:	d0c6      	beq.n	8001192 <__gnu_unwind_execute+0xa6>
 8001204:	f000 0207 	and.w	r2, r0, #7
 8001208:	3201      	adds	r2, #1
 800120a:	2301      	movs	r3, #1
 800120c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001210:	4619      	mov	r1, r3
 8001212:	4630      	mov	r0, r6
 8001214:	f7ff fd44 	bl	8000ca0 <_Unwind_VRS_Pop>
 8001218:	2800      	cmp	r0, #0
 800121a:	d1ba      	bne.n	8001192 <__gnu_unwind_execute+0xa6>
 800121c:	e76d      	b.n	80010fa <__gnu_unwind_execute+0xe>
 800121e:	4638      	mov	r0, r7
 8001220:	f7ff ff38 	bl	8001094 <next_unwind_byte>
 8001224:	0224      	lsls	r4, r4, #8
 8001226:	4304      	orrs	r4, r0
 8001228:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800122c:	d0b1      	beq.n	8001192 <__gnu_unwind_execute+0xa6>
 800122e:	0124      	lsls	r4, r4, #4
 8001230:	2300      	movs	r3, #0
 8001232:	b2a2      	uxth	r2, r4
 8001234:	4619      	mov	r1, r3
 8001236:	4630      	mov	r0, r6
 8001238:	f7ff fd32 	bl	8000ca0 <_Unwind_VRS_Pop>
 800123c:	2800      	cmp	r0, #0
 800123e:	d1a8      	bne.n	8001192 <__gnu_unwind_execute+0xa6>
 8001240:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001244:	bf18      	it	ne
 8001246:	f04f 0801 	movne.w	r8, #1
 800124a:	e756      	b.n	80010fa <__gnu_unwind_execute+0xe>
 800124c:	28c6      	cmp	r0, #198	; 0xc6
 800124e:	d07d      	beq.n	800134c <__gnu_unwind_execute+0x260>
 8001250:	28c7      	cmp	r0, #199	; 0xc7
 8001252:	f000 8086 	beq.w	8001362 <__gnu_unwind_execute+0x276>
 8001256:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800125a:	2bc0      	cmp	r3, #192	; 0xc0
 800125c:	f000 8094 	beq.w	8001388 <__gnu_unwind_execute+0x29c>
 8001260:	28c8      	cmp	r0, #200	; 0xc8
 8001262:	f000 809f 	beq.w	80013a4 <__gnu_unwind_execute+0x2b8>
 8001266:	28c9      	cmp	r0, #201	; 0xc9
 8001268:	d193      	bne.n	8001192 <__gnu_unwind_execute+0xa6>
 800126a:	4638      	mov	r0, r7
 800126c:	f7ff ff12 	bl	8001094 <next_unwind_byte>
 8001270:	0302      	lsls	r2, r0, #12
 8001272:	f000 000f 	and.w	r0, r0, #15
 8001276:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 800127a:	3001      	adds	r0, #1
 800127c:	4302      	orrs	r2, r0
 800127e:	e781      	b.n	8001184 <__gnu_unwind_execute+0x98>
 8001280:	ac03      	add	r4, sp, #12
 8001282:	4643      	mov	r3, r8
 8001284:	220e      	movs	r2, #14
 8001286:	4641      	mov	r1, r8
 8001288:	9400      	str	r4, [sp, #0]
 800128a:	4630      	mov	r0, r6
 800128c:	f7ff fb14 	bl	80008b8 <_Unwind_VRS_Get>
 8001290:	9400      	str	r4, [sp, #0]
 8001292:	4630      	mov	r0, r6
 8001294:	4643      	mov	r3, r8
 8001296:	220f      	movs	r2, #15
 8001298:	4641      	mov	r1, r8
 800129a:	f7ff fb33 	bl	8000904 <_Unwind_VRS_Set>
 800129e:	4640      	mov	r0, r8
 80012a0:	e778      	b.n	8001194 <__gnu_unwind_execute+0xa8>
 80012a2:	4638      	mov	r0, r7
 80012a4:	f7ff fef6 	bl	8001094 <next_unwind_byte>
 80012a8:	2800      	cmp	r0, #0
 80012aa:	f43f af72 	beq.w	8001192 <__gnu_unwind_execute+0xa6>
 80012ae:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80012b2:	f47f af6e 	bne.w	8001192 <__gnu_unwind_execute+0xa6>
 80012b6:	4602      	mov	r2, r0
 80012b8:	4619      	mov	r1, r3
 80012ba:	4630      	mov	r0, r6
 80012bc:	f7ff fcf0 	bl	8000ca0 <_Unwind_VRS_Pop>
 80012c0:	2800      	cmp	r0, #0
 80012c2:	f47f af66 	bne.w	8001192 <__gnu_unwind_execute+0xa6>
 80012c6:	e718      	b.n	80010fa <__gnu_unwind_execute+0xe>
 80012c8:	2300      	movs	r3, #0
 80012ca:	f10d 090c 	add.w	r9, sp, #12
 80012ce:	220d      	movs	r2, #13
 80012d0:	4619      	mov	r1, r3
 80012d2:	f8cd 9000 	str.w	r9, [sp]
 80012d6:	4630      	mov	r0, r6
 80012d8:	f7ff faee 	bl	80008b8 <_Unwind_VRS_Get>
 80012dc:	4638      	mov	r0, r7
 80012de:	f7ff fed9 	bl	8001094 <next_unwind_byte>
 80012e2:	0602      	lsls	r2, r0, #24
 80012e4:	f04f 0402 	mov.w	r4, #2
 80012e8:	d50c      	bpl.n	8001304 <__gnu_unwind_execute+0x218>
 80012ea:	9b03      	ldr	r3, [sp, #12]
 80012ec:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80012f0:	40a0      	lsls	r0, r4
 80012f2:	4403      	add	r3, r0
 80012f4:	4638      	mov	r0, r7
 80012f6:	9303      	str	r3, [sp, #12]
 80012f8:	f7ff fecc 	bl	8001094 <next_unwind_byte>
 80012fc:	0603      	lsls	r3, r0, #24
 80012fe:	f104 0407 	add.w	r4, r4, #7
 8001302:	d4f2      	bmi.n	80012ea <__gnu_unwind_execute+0x1fe>
 8001304:	9b03      	ldr	r3, [sp, #12]
 8001306:	f8cd 9000 	str.w	r9, [sp]
 800130a:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800130e:	40a2      	lsls	r2, r4
 8001310:	f503 7401 	add.w	r4, r3, #516	; 0x204
 8001314:	2300      	movs	r3, #0
 8001316:	4414      	add	r4, r2
 8001318:	4619      	mov	r1, r3
 800131a:	220d      	movs	r2, #13
 800131c:	4630      	mov	r0, r6
 800131e:	9403      	str	r4, [sp, #12]
 8001320:	f7ff faf0 	bl	8000904 <_Unwind_VRS_Set>
 8001324:	e6e9      	b.n	80010fa <__gnu_unwind_execute+0xe>
 8001326:	4638      	mov	r0, r7
 8001328:	f7ff feb4 	bl	8001094 <next_unwind_byte>
 800132c:	0301      	lsls	r1, r0, #12
 800132e:	f000 000f 	and.w	r0, r0, #15
 8001332:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001336:	1c42      	adds	r2, r0, #1
 8001338:	2301      	movs	r3, #1
 800133a:	430a      	orrs	r2, r1
 800133c:	4630      	mov	r0, r6
 800133e:	4619      	mov	r1, r3
 8001340:	f7ff fcae 	bl	8000ca0 <_Unwind_VRS_Pop>
 8001344:	2800      	cmp	r0, #0
 8001346:	f47f af24 	bne.w	8001192 <__gnu_unwind_execute+0xa6>
 800134a:	e6d6      	b.n	80010fa <__gnu_unwind_execute+0xe>
 800134c:	4638      	mov	r0, r7
 800134e:	f7ff fea1 	bl	8001094 <next_unwind_byte>
 8001352:	0301      	lsls	r1, r0, #12
 8001354:	f000 000f 	and.w	r0, r0, #15
 8001358:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 800135c:	1c42      	adds	r2, r0, #1
 800135e:	2303      	movs	r3, #3
 8001360:	e7eb      	b.n	800133a <__gnu_unwind_execute+0x24e>
 8001362:	4638      	mov	r0, r7
 8001364:	f7ff fe96 	bl	8001094 <next_unwind_byte>
 8001368:	2800      	cmp	r0, #0
 800136a:	f43f af12 	beq.w	8001192 <__gnu_unwind_execute+0xa6>
 800136e:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001372:	f47f af0e 	bne.w	8001192 <__gnu_unwind_execute+0xa6>
 8001376:	4602      	mov	r2, r0
 8001378:	2104      	movs	r1, #4
 800137a:	4630      	mov	r0, r6
 800137c:	f7ff fc90 	bl	8000ca0 <_Unwind_VRS_Pop>
 8001380:	2800      	cmp	r0, #0
 8001382:	f47f af06 	bne.w	8001192 <__gnu_unwind_execute+0xa6>
 8001386:	e6b8      	b.n	80010fa <__gnu_unwind_execute+0xe>
 8001388:	f000 020f 	and.w	r2, r0, #15
 800138c:	3201      	adds	r2, #1
 800138e:	2303      	movs	r3, #3
 8001390:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001394:	4619      	mov	r1, r3
 8001396:	4630      	mov	r0, r6
 8001398:	f7ff fc82 	bl	8000ca0 <_Unwind_VRS_Pop>
 800139c:	2800      	cmp	r0, #0
 800139e:	f47f aef8 	bne.w	8001192 <__gnu_unwind_execute+0xa6>
 80013a2:	e6aa      	b.n	80010fa <__gnu_unwind_execute+0xe>
 80013a4:	4638      	mov	r0, r7
 80013a6:	f7ff fe75 	bl	8001094 <next_unwind_byte>
 80013aa:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80013ae:	f000 030f 	and.w	r3, r0, #15
 80013b2:	3210      	adds	r2, #16
 80013b4:	3301      	adds	r3, #1
 80013b6:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80013ba:	e6e3      	b.n	8001184 <__gnu_unwind_execute+0x98>

080013bc <__gnu_unwind_frame>:
 80013bc:	b510      	push	{r4, lr}
 80013be:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80013c0:	b084      	sub	sp, #16
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	2003      	movs	r0, #3
 80013c6:	f88d 000c 	strb.w	r0, [sp, #12]
 80013ca:	79dc      	ldrb	r4, [r3, #7]
 80013cc:	f88d 400d 	strb.w	r4, [sp, #13]
 80013d0:	0212      	lsls	r2, r2, #8
 80013d2:	3308      	adds	r3, #8
 80013d4:	4608      	mov	r0, r1
 80013d6:	a901      	add	r1, sp, #4
 80013d8:	9201      	str	r2, [sp, #4]
 80013da:	9302      	str	r3, [sp, #8]
 80013dc:	f7ff fe86 	bl	80010ec <__gnu_unwind_execute>
 80013e0:	b004      	add	sp, #16
 80013e2:	bd10      	pop	{r4, pc}

080013e4 <_Unwind_GetRegionStart>:
 80013e4:	b508      	push	{r3, lr}
 80013e6:	f7ff fe7f 	bl	80010e8 <unwind_UCB_from_context>
 80013ea:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80013ec:	bd08      	pop	{r3, pc}
 80013ee:	bf00      	nop

080013f0 <_Unwind_GetLanguageSpecificData>:
 80013f0:	b508      	push	{r3, lr}
 80013f2:	f7ff fe79 	bl	80010e8 <unwind_UCB_from_context>
 80013f6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80013f8:	79c3      	ldrb	r3, [r0, #7]
 80013fa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80013fe:	3008      	adds	r0, #8
 8001400:	bd08      	pop	{r3, pc}
 8001402:	bf00      	nop

08001404 <_Unwind_GetTextRelBase>:
 8001404:	b508      	push	{r3, lr}
 8001406:	f006 ff32 	bl	800826e <abort>
 800140a:	bf00      	nop

0800140c <_Unwind_GetDataRelBase>:
 800140c:	b508      	push	{r3, lr}
 800140e:	f7ff fff9 	bl	8001404 <_Unwind_GetTextRelBase>
 8001412:	bf00      	nop

08001414 <__aeabi_idiv0>:
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop

08001418 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001418:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800141a:	2003      	movs	r0, #3
 800141c:	f000 f8cc 	bl	80015b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001420:	2000      	movs	r0, #0
 8001422:	f005 fc3f 	bl	8006ca4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001426:	f005 fc0d 	bl	8006c44 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 800142a:	2000      	movs	r0, #0
 800142c:	bd08      	pop	{r3, pc}
 800142e:	bf00      	nop

08001430 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001430:	4a03      	ldr	r2, [pc, #12]	; (8001440 <HAL_IncTick+0x10>)
 8001432:	4b04      	ldr	r3, [pc, #16]	; (8001444 <HAL_IncTick+0x14>)
 8001434:	6811      	ldr	r1, [r2, #0]
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	440b      	add	r3, r1
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20004554 	.word	0x20004554
 8001444:	20000004 	.word	0x20000004

08001448 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001448:	4b01      	ldr	r3, [pc, #4]	; (8001450 <HAL_GetTick+0x8>)
 800144a:	6818      	ldr	r0, [r3, #0]
}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20004554 	.word	0x20004554

08001454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001454:	b538      	push	{r3, r4, r5, lr}
 8001456:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001458:	f7ff fff6 	bl	8001448 <HAL_GetTick>
 800145c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800145e:	1c63      	adds	r3, r4, #1
 8001460:	d002      	beq.n	8001468 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <HAL_Delay+0x20>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001468:	f7ff ffee 	bl	8001448 <HAL_GetTick>
 800146c:	1b40      	subs	r0, r0, r5
 800146e:	4284      	cmp	r4, r0
 8001470:	d8fa      	bhi.n	8001468 <HAL_Delay+0x14>
  {
  }
}
 8001472:	bd38      	pop	{r3, r4, r5, pc}
 8001474:	20000004 	.word	0x20000004

08001478 <HAL_ADC_ConvCpltCallback>:
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop

0800147c <HAL_ADC_LevelOutOfWindowCallback>:
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop

08001480 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop

08001484 <HAL_ADC_IRQHandler>:
{
 8001484:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001486:	6803      	ldr	r3, [r0, #0]
{
 8001488:	4604      	mov	r4, r0
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800148a:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800148c:	6859      	ldr	r1, [r3, #4]
  if(tmp1 && tmp2)
 800148e:	0790      	lsls	r0, r2, #30
 8001490:	d513      	bpl.n	80014ba <HAL_ADC_IRQHandler+0x36>
 8001492:	068a      	lsls	r2, r1, #26
 8001494:	d511      	bpl.n	80014ba <HAL_ADC_IRQHandler+0x36>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001496:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001498:	06d5      	lsls	r5, r2, #27
 800149a:	d403      	bmi.n	80014a4 <HAL_ADC_IRQHandler+0x20>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800149c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800149e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014a2:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80014aa:	d058      	beq.n	800155e <HAL_ADC_IRQHandler+0xda>
    HAL_ADC_ConvCpltCallback(hadc);
 80014ac:	4620      	mov	r0, r4
 80014ae:	f7ff ffe3 	bl	8001478 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80014b2:	6823      	ldr	r3, [r4, #0]
 80014b4:	f06f 0212 	mvn.w	r2, #18
 80014b8:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80014ba:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80014bc:	6859      	ldr	r1, [r3, #4]
  if(tmp1 && tmp2)
 80014be:	0752      	lsls	r2, r2, #29
 80014c0:	d513      	bpl.n	80014ea <HAL_ADC_IRQHandler+0x66>
 80014c2:	060d      	lsls	r5, r1, #24
 80014c4:	d511      	bpl.n	80014ea <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80014c8:	06d0      	lsls	r0, r2, #27
 80014ca:	d403      	bmi.n	80014d4 <HAL_ADC_IRQHandler+0x50>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80014cc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80014ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014d2:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80014da:	d022      	beq.n	8001522 <HAL_ADC_IRQHandler+0x9e>
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80014dc:	4620      	mov	r0, r4
 80014de:	f000 f869 	bl	80015b4 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80014e2:	6823      	ldr	r3, [r4, #0]
 80014e4:	f06f 020c 	mvn.w	r2, #12
 80014e8:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80014ea:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80014ec:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80014ee:	0650      	lsls	r0, r2, #25
 80014f0:	d504      	bpl.n	80014fc <HAL_ADC_IRQHandler+0x78>
 80014f2:	07ca      	lsls	r2, r1, #31
 80014f4:	d502      	bpl.n	80014fc <HAL_ADC_IRQHandler+0x78>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	07d5      	lsls	r5, r2, #31
 80014fa:	d44a      	bmi.n	8001592 <HAL_ADC_IRQHandler+0x10e>
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80014fc:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80014fe:	6859      	ldr	r1, [r3, #4]
  if(tmp1 && tmp2)
 8001500:	0690      	lsls	r0, r2, #26
 8001502:	d50d      	bpl.n	8001520 <HAL_ADC_IRQHandler+0x9c>
 8001504:	014a      	lsls	r2, r1, #5
 8001506:	d50b      	bpl.n	8001520 <HAL_ADC_IRQHandler+0x9c>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001508:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800150a:	f06f 0520 	mvn.w	r5, #32
    HAL_ADC_ErrorCallback(hadc);
 800150e:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001510:	f042 0202 	orr.w	r2, r2, #2
 8001514:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001516:	601d      	str	r5, [r3, #0]
    HAL_ADC_ErrorCallback(hadc);
 8001518:	f7ff ffb2 	bl	8001480 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800151c:	6823      	ldr	r3, [r4, #0]
 800151e:	601d      	str	r5, [r3, #0]
 8001520:	bd38      	pop	{r3, r4, r5, pc}
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001522:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001524:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8001528:	d13f      	bne.n	80015aa <HAL_ADC_IRQHandler+0x126>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800152a:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800152c:	0552      	lsls	r2, r2, #21
 800152e:	d4d5      	bmi.n	80014dc <HAL_ADC_IRQHandler+0x58>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001530:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001532:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001536:	d1d1      	bne.n	80014dc <HAL_ADC_IRQHandler+0x58>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001538:	69a2      	ldr	r2, [r4, #24]
 800153a:	2a00      	cmp	r2, #0
 800153c:	d1ce      	bne.n	80014dc <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001544:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001546:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001548:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800154c:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800154e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001550:	05dd      	lsls	r5, r3, #23
 8001552:	d4c3      	bmi.n	80014dc <HAL_ADC_IRQHandler+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001554:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	6423      	str	r3, [r4, #64]	; 0x40
 800155c:	e7be      	b.n	80014dc <HAL_ADC_IRQHandler+0x58>
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800155e:	69a2      	ldr	r2, [r4, #24]
 8001560:	2a00      	cmp	r2, #0
 8001562:	d1a3      	bne.n	80014ac <HAL_ADC_IRQHandler+0x28>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001566:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800156a:	d002      	beq.n	8001572 <HAL_ADC_IRQHandler+0xee>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800156c:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800156e:	0550      	lsls	r0, r2, #21
 8001570:	d49c      	bmi.n	80014ac <HAL_ADC_IRQHandler+0x28>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	f022 0220 	bic.w	r2, r2, #32
 8001578:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800157a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800157c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001580:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001582:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001584:	04d9      	lsls	r1, r3, #19
 8001586:	d491      	bmi.n	80014ac <HAL_ADC_IRQHandler+0x28>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001588:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6423      	str	r3, [r4, #64]	; 0x40
 8001590:	e78c      	b.n	80014ac <HAL_ADC_IRQHandler+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001592:	6c23      	ldr	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001594:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800159a:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800159c:	f7ff ff6e 	bl	800147c <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80015a0:	6823      	ldr	r3, [r4, #0]
 80015a2:	f06f 0201 	mvn.w	r2, #1
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	e7a8      	b.n	80014fc <HAL_ADC_IRQHandler+0x78>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80015aa:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80015ac:	0551      	lsls	r1, r2, #21
 80015ae:	d495      	bmi.n	80014dc <HAL_ADC_IRQHandler+0x58>
 80015b0:	e7bb      	b.n	800152a <HAL_ADC_IRQHandler+0xa6>
 80015b2:	bf00      	nop

080015b4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop

080015b8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b8:	4907      	ldr	r1, [pc, #28]	; (80015d8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80015ba:	0200      	lsls	r0, r0, #8
 80015bc:	4b07      	ldr	r3, [pc, #28]	; (80015dc <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015be:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80015c0:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c4:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015c6:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80015ca:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80015cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80015d0:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d2:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 80015d4:	60c8      	str	r0, [r1, #12]
 80015d6:	4770      	bx	lr
 80015d8:	e000ed00 	.word	0xe000ed00
 80015dc:	05fa0000 	.word	0x05fa0000

080015e0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e0:	4b19      	ldr	r3, [pc, #100]	; (8001648 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015e2:	b470      	push	{r4, r5, r6}
 80015e4:	68dc      	ldr	r4, [r3, #12]
 80015e6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ea:	f1c4 0607 	rsb	r6, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ee:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f0:	2e04      	cmp	r6, #4
 80015f2:	bf28      	it	cs
 80015f4:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f6:	2b06      	cmp	r3, #6
 80015f8:	d919      	bls.n	800162e <HAL_NVIC_SetPriority+0x4e>
 80015fa:	3c03      	subs	r4, #3
 80015fc:	2501      	movs	r5, #1
 80015fe:	40a5      	lsls	r5, r4
 8001600:	3d01      	subs	r5, #1
 8001602:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	2301      	movs	r3, #1
  if ((int32_t)(IRQn) < 0)
 8001606:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001608:	fa03 f306 	lsl.w	r3, r3, r6
 800160c:	f103 33ff 	add.w	r3, r3, #4294967295
 8001610:	ea01 0103 	and.w	r1, r1, r3
 8001614:	fa01 f104 	lsl.w	r1, r1, r4
 8001618:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 800161c:	db0a      	blt.n	8001634 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161e:	0109      	lsls	r1, r1, #4
 8001620:	4b0a      	ldr	r3, [pc, #40]	; (800164c <HAL_NVIC_SetPriority+0x6c>)
 8001622:	b2c9      	uxtb	r1, r1
 8001624:	4403      	add	r3, r0
 8001626:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800162a:	bc70      	pop	{r4, r5, r6}
 800162c:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800162e:	2200      	movs	r2, #0
 8001630:	4614      	mov	r4, r2
 8001632:	e7e7      	b.n	8001604 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001634:	f000 000f 	and.w	r0, r0, #15
 8001638:	0109      	lsls	r1, r1, #4
 800163a:	4b05      	ldr	r3, [pc, #20]	; (8001650 <HAL_NVIC_SetPriority+0x70>)
 800163c:	b2c9      	uxtb	r1, r1
 800163e:	4403      	add	r3, r0
 8001640:	7619      	strb	r1, [r3, #24]
 8001642:	bc70      	pop	{r4, r5, r6}
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00
 800164c:	e000e100 	.word	0xe000e100
 8001650:	e000ecfc 	.word	0xe000ecfc

08001654 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001654:	f000 011f 	and.w	r1, r0, #31
 8001658:	2301      	movs	r3, #1
 800165a:	4a03      	ldr	r2, [pc, #12]	; (8001668 <HAL_NVIC_EnableIRQ+0x14>)
 800165c:	0940      	lsrs	r0, r0, #5
 800165e:	408b      	lsls	r3, r1
 8001660:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000e100 	.word	0xe000e100

0800166c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800166c:	3801      	subs	r0, #1
 800166e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001672:	d20d      	bcs.n	8001690 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001674:	4b07      	ldr	r3, [pc, #28]	; (8001694 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001676:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001678:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800167a:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167c:	25f0      	movs	r5, #240	; 0xf0
 800167e:	4c06      	ldr	r4, [pc, #24]	; (8001698 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001680:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001682:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001684:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001688:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800168a:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800168c:	bc30      	pop	{r4, r5}
 800168e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001690:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8001692:	4770      	bx	lr
 8001694:	e000e010 	.word	0xe000e010
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800169c:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800169e:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80016a0:	6813      	ldr	r3, [r2, #0]
 80016a2:	bf0c      	ite	eq
 80016a4:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80016a8:	f023 0304 	bicne.w	r3, r3, #4
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	4770      	bx	lr
 80016b0:	e000e010 	.word	0xe000e010

080016b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016b6:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80016b8:	f7ff fec6 	bl	8001448 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016bc:	2c00      	cmp	r4, #0
 80016be:	d076      	beq.n	80017ae <HAL_DMA_Init+0xfa>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016c0:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80016c2:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 80016c4:	2100      	movs	r1, #0
 80016c6:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 80016c8:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80016cc:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 80016ce:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80016d2:	f022 0201 	bic.w	r2, r2, #1
 80016d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016d8:	e005      	b.n	80016e6 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016da:	f7ff feb5 	bl	8001448 <HAL_GetTick>
 80016de:	1b40      	subs	r0, r0, r5
 80016e0:	2805      	cmp	r0, #5
 80016e2:	d83e      	bhi.n	8001762 <HAL_DMA_Init+0xae>
 80016e4:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	07d1      	lsls	r1, r2, #31
 80016ea:	d4f6      	bmi.n	80016da <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016ec:	68a1      	ldr	r1, [r4, #8]
 80016ee:	6862      	ldr	r2, [r4, #4]
 80016f0:	68e0      	ldr	r0, [r4, #12]
 80016f2:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016f4:	6921      	ldr	r1, [r4, #16]
 80016f6:	6965      	ldr	r5, [r4, #20]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016f8:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016fa:	69a6      	ldr	r6, [r4, #24]
 80016fc:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016fe:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001700:	4f37      	ldr	r7, [pc, #220]	; (80017e0 <HAL_DMA_Init+0x12c>)
  tmp = hdma->Instance->CR;
 8001702:	6819      	ldr	r1, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001704:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001706:	6a65      	ldr	r5, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001708:	400f      	ands	r7, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800170a:	6a21      	ldr	r1, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800170c:	4332      	orrs	r2, r6
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800170e:	2d04      	cmp	r5, #4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001710:	ea42 0200 	orr.w	r2, r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001714:	ea42 0201 	orr.w	r2, r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001718:	ea42 0207 	orr.w	r2, r2, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800171c:	d028      	beq.n	8001770 <HAL_DMA_Init+0xbc>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800171e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001720:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001722:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001726:	4315      	orrs	r5, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001728:	b2da      	uxtb	r2, r3
 800172a:	482e      	ldr	r0, [pc, #184]	; (80017e4 <HAL_DMA_Init+0x130>)
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800172c:	492e      	ldr	r1, [pc, #184]	; (80017e8 <HAL_DMA_Init+0x134>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800172e:	3a10      	subs	r2, #16
  hdma->Instance->FCR = tmp;
 8001730:	615d      	str	r5, [r3, #20]
  hdma->State = HAL_DMA_STATE_READY;
 8001732:	2501      	movs	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001734:	fba0 0202 	umull	r0, r2, r0, r2
 8001738:	0912      	lsrs	r2, r2, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800173a:	5c88      	ldrb	r0, [r1, r2]
  
  if (stream_number > 3U)
 800173c:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800173e:	4a2b      	ldr	r2, [pc, #172]	; (80017ec <HAL_DMA_Init+0x138>)
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001740:	f04f 0100 	mov.w	r1, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001744:	65e0      	str	r0, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001746:	ea02 0203 	and.w	r2, r2, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800174a:	f04f 033f 	mov.w	r3, #63	; 0x3f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800174e:	bf88      	it	hi
 8001750:	3204      	addhi	r2, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001752:	4083      	lsls	r3, r0
  return HAL_OK;
 8001754:	4608      	mov	r0, r1
 8001756:	65a2      	str	r2, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001758:	6093      	str	r3, [r2, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800175a:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800175c:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  return HAL_OK;
 8001760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001762:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001764:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8001766:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001768:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800176a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 800176e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001770:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001772:	6b21      	ldr	r1, [r4, #48]	; 0x30
    tmp |= hdma->Init.FIFOThreshold;
 8001774:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001776:	4301      	orrs	r1, r0
    tmp |= hdma->Init.FIFOThreshold;
 8001778:	f047 0504 	orr.w	r5, r7, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800177c:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 800177e:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001780:	695a      	ldr	r2, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001782:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 8001786:	4315      	orrs	r5, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001788:	2800      	cmp	r0, #0
 800178a:	d0cd      	beq.n	8001728 <HAL_DMA_Init+0x74>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800178c:	b18e      	cbz	r6, 80017b2 <HAL_DMA_Init+0xfe>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800178e:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8001792:	d018      	beq.n	80017c6 <HAL_DMA_Init+0x112>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001794:	2f02      	cmp	r7, #2
 8001796:	d903      	bls.n	80017a0 <HAL_DMA_Init+0xec>
 8001798:	2f03      	cmp	r7, #3
 800179a:	d1c5      	bne.n	8001728 <HAL_DMA_Init+0x74>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800179c:	01c2      	lsls	r2, r0, #7
 800179e:	d5c3      	bpl.n	8001728 <HAL_DMA_Init+0x74>
        hdma->State = HAL_DMA_STATE_READY;
 80017a0:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017a2:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 80017a4:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017a6:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80017a8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80017ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80017ae:	2001      	movs	r0, #1
 80017b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 80017b2:	2f01      	cmp	r7, #1
 80017b4:	d003      	beq.n	80017be <HAL_DMA_Init+0x10a>
 80017b6:	d3f1      	bcc.n	800179c <HAL_DMA_Init+0xe8>
 80017b8:	2f02      	cmp	r7, #2
 80017ba:	d1b5      	bne.n	8001728 <HAL_DMA_Init+0x74>
 80017bc:	e7ee      	b.n	800179c <HAL_DMA_Init+0xe8>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017be:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 80017c2:	d1b1      	bne.n	8001728 <HAL_DMA_Init+0x74>
 80017c4:	e7ec      	b.n	80017a0 <HAL_DMA_Init+0xec>
    switch (tmp)
 80017c6:	2f03      	cmp	r7, #3
 80017c8:	d8ae      	bhi.n	8001728 <HAL_DMA_Init+0x74>
 80017ca:	a201      	add	r2, pc, #4	; (adr r2, 80017d0 <HAL_DMA_Init+0x11c>)
 80017cc:	f852 f027 	ldr.w	pc, [r2, r7, lsl #2]
 80017d0:	080017a1 	.word	0x080017a1
 80017d4:	0800179d 	.word	0x0800179d
 80017d8:	080017a1 	.word	0x080017a1
 80017dc:	080017bf 	.word	0x080017bf
 80017e0:	f010803f 	.word	0xf010803f
 80017e4:	aaaaaaab 	.word	0xaaaaaaab
 80017e8:	08008410 	.word	0x08008410
 80017ec:	fffffc00 	.word	0xfffffc00

080017f0 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017f0:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
 80017f4:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017f6:	2a02      	cmp	r2, #2
 80017f8:	d003      	beq.n	8001802 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017fa:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 80017fc:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001800:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8001802:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001804:	2105      	movs	r1, #5
  return HAL_OK;
 8001806:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_ABORT;
 8001808:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800180c:	6813      	ldr	r3, [r2, #0]
 800180e:	f023 0301 	bic.w	r3, r3, #1
 8001812:	6013      	str	r3, [r2, #0]
}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop

08001818 <HAL_DMA_IRQHandler>:
{
 8001818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800181a:	4604      	mov	r4, r0
 800181c:	b083      	sub	sp, #12
  __IO uint32_t count = 0;
 800181e:	2000      	movs	r0, #0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001820:	2208      	movs	r2, #8
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001822:	6da7      	ldr	r7, [r4, #88]	; 0x58
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001824:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  __IO uint32_t count = 0;
 8001826:	9001      	str	r0, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001828:	409a      	lsls	r2, r3
  tmpisr = regs->ISR;
 800182a:	683d      	ldr	r5, [r7, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 800182c:	4960      	ldr	r1, [pc, #384]	; (80019b0 <HAL_DMA_IRQHandler+0x198>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800182e:	4215      	tst	r5, r2
  uint32_t timeout = SystemCoreClock / 9600;
 8001830:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001832:	d003      	beq.n	800183c <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001834:	6821      	ldr	r1, [r4, #0]
 8001836:	6808      	ldr	r0, [r1, #0]
 8001838:	0740      	lsls	r0, r0, #29
 800183a:	d476      	bmi.n	800192a <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800183c:	2201      	movs	r2, #1
 800183e:	409a      	lsls	r2, r3
 8001840:	4215      	tst	r5, r2
 8001842:	d003      	beq.n	800184c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001844:	6821      	ldr	r1, [r4, #0]
 8001846:	6949      	ldr	r1, [r1, #20]
 8001848:	0608      	lsls	r0, r1, #24
 800184a:	d468      	bmi.n	800191e <HAL_DMA_IRQHandler+0x106>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800184c:	2204      	movs	r2, #4
 800184e:	409a      	lsls	r2, r3
 8001850:	4215      	tst	r5, r2
 8001852:	d003      	beq.n	800185c <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001854:	6821      	ldr	r1, [r4, #0]
 8001856:	6809      	ldr	r1, [r1, #0]
 8001858:	0789      	lsls	r1, r1, #30
 800185a:	d45a      	bmi.n	8001912 <HAL_DMA_IRQHandler+0xfa>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800185c:	2210      	movs	r2, #16
 800185e:	409a      	lsls	r2, r3
 8001860:	4215      	tst	r5, r2
 8001862:	d003      	beq.n	800186c <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001864:	6821      	ldr	r1, [r4, #0]
 8001866:	6808      	ldr	r0, [r1, #0]
 8001868:	0700      	lsls	r0, r0, #28
 800186a:	d43f      	bmi.n	80018ec <HAL_DMA_IRQHandler+0xd4>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800186c:	2220      	movs	r2, #32
 800186e:	409a      	lsls	r2, r3
 8001870:	4215      	tst	r5, r2
 8001872:	d003      	beq.n	800187c <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001874:	6821      	ldr	r1, [r4, #0]
 8001876:	6808      	ldr	r0, [r1, #0]
 8001878:	06c0      	lsls	r0, r0, #27
 800187a:	d425      	bmi.n	80018c8 <HAL_DMA_IRQHandler+0xb0>
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800187c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800187e:	b30b      	cbz	r3, 80018c4 <HAL_DMA_IRQHandler+0xac>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001880:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001882:	07da      	lsls	r2, r3, #31
 8001884:	d51a      	bpl.n	80018bc <HAL_DMA_IRQHandler+0xa4>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001886:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8001888:	6821      	ldr	r1, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 800188a:	4a4a      	ldr	r2, [pc, #296]	; (80019b4 <HAL_DMA_IRQHandler+0x19c>)
      hdma->State = HAL_DMA_STATE_ABORT;
 800188c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600;
 8001890:	fba2 3206 	umull	r3, r2, r2, r6
      __HAL_DMA_DISABLE(hdma);
 8001894:	680b      	ldr	r3, [r1, #0]
 8001896:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 800189a:	0a92      	lsrs	r2, r2, #10
      __HAL_DMA_DISABLE(hdma);
 800189c:	600b      	str	r3, [r1, #0]
 800189e:	e002      	b.n	80018a6 <HAL_DMA_IRQHandler+0x8e>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018a0:	680b      	ldr	r3, [r1, #0]
 80018a2:	07db      	lsls	r3, r3, #31
 80018a4:	d504      	bpl.n	80018b0 <HAL_DMA_IRQHandler+0x98>
        if (++count > timeout)
 80018a6:	9b01      	ldr	r3, [sp, #4]
 80018a8:	3301      	adds	r3, #1
 80018aa:	429a      	cmp	r2, r3
 80018ac:	9301      	str	r3, [sp, #4]
 80018ae:	d2f7      	bcs.n	80018a0 <HAL_DMA_IRQHandler+0x88>
      __HAL_UNLOCK(hdma);
 80018b0:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 80018b2:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 80018b4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80018b8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80018bc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80018be:	b10b      	cbz	r3, 80018c4 <HAL_DMA_IRQHandler+0xac>
      hdma->XferErrorCallback(hdma);
 80018c0:	4620      	mov	r0, r4
 80018c2:	4798      	blx	r3
}
 80018c4:	b003      	add	sp, #12
 80018c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018c8:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018ca:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80018ce:	2a05      	cmp	r2, #5
 80018d0:	d03b      	beq.n	800194a <HAL_DMA_IRQHandler+0x132>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018d2:	680b      	ldr	r3, [r1, #0]
 80018d4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018d8:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018da:	d054      	beq.n	8001986 <HAL_DMA_IRQHandler+0x16e>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018dc:	0319      	lsls	r1, r3, #12
 80018de:	d55f      	bpl.n	80019a0 <HAL_DMA_IRQHandler+0x188>
        if(hdma->XferCpltCallback != NULL)
 80018e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d0ca      	beq.n	800187c <HAL_DMA_IRQHandler+0x64>
          hdma->XferCpltCallback(hdma);
 80018e6:	4620      	mov	r0, r4
 80018e8:	4798      	blx	r3
 80018ea:	e7c7      	b.n	800187c <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80018ec:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018ee:	680a      	ldr	r2, [r1, #0]
 80018f0:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018f4:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018f6:	d122      	bne.n	800193e <HAL_DMA_IRQHandler+0x126>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018f8:	05d2      	lsls	r2, r2, #23
 80018fa:	d403      	bmi.n	8001904 <HAL_DMA_IRQHandler+0xec>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018fc:	680a      	ldr	r2, [r1, #0]
 80018fe:	f022 0208 	bic.w	r2, r2, #8
 8001902:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001904:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001906:	2a00      	cmp	r2, #0
 8001908:	d0b0      	beq.n	800186c <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 800190a:	4620      	mov	r0, r4
 800190c:	4790      	blx	r2
 800190e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001910:	e7ac      	b.n	800186c <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001912:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001914:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001916:	f042 0204 	orr.w	r2, r2, #4
 800191a:	6562      	str	r2, [r4, #84]	; 0x54
 800191c:	e79e      	b.n	800185c <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800191e:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001920:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001922:	f042 0202 	orr.w	r2, r2, #2
 8001926:	6562      	str	r2, [r4, #84]	; 0x54
 8001928:	e790      	b.n	800184c <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800192a:	6808      	ldr	r0, [r1, #0]
 800192c:	f020 0004 	bic.w	r0, r0, #4
 8001930:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001932:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001934:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001936:	f042 0201 	orr.w	r2, r2, #1
 800193a:	6562      	str	r2, [r4, #84]	; 0x54
 800193c:	e77e      	b.n	800183c <HAL_DMA_IRQHandler+0x24>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800193e:	0311      	lsls	r1, r2, #12
 8001940:	d5e0      	bpl.n	8001904 <HAL_DMA_IRQHandler+0xec>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001942:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001944:	2a00      	cmp	r2, #0
 8001946:	d1e0      	bne.n	800190a <HAL_DMA_IRQHandler+0xf2>
 8001948:	e790      	b.n	800186c <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800194a:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800194c:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800194e:	f022 0216 	bic.w	r2, r2, #22
 8001952:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001954:	694a      	ldr	r2, [r1, #20]
 8001956:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800195a:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800195c:	b320      	cbz	r0, 80019a8 <HAL_DMA_IRQHandler+0x190>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800195e:	680a      	ldr	r2, [r1, #0]
 8001960:	f022 0208 	bic.w	r2, r2, #8
 8001964:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001966:	223f      	movs	r2, #63	; 0x3f
        __HAL_UNLOCK(hdma);
 8001968:	2500      	movs	r5, #0
        hdma->State = HAL_DMA_STATE_READY;
 800196a:	2001      	movs	r0, #1
        if(hdma->XferAbortCallback != NULL)
 800196c:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8001974:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001978:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800197c:	2900      	cmp	r1, #0
 800197e:	d0a1      	beq.n	80018c4 <HAL_DMA_IRQHandler+0xac>
          hdma->XferAbortCallback(hdma);
 8001980:	4620      	mov	r0, r4
 8001982:	4788      	blx	r1
 8001984:	e79e      	b.n	80018c4 <HAL_DMA_IRQHandler+0xac>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001986:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800198a:	d1a9      	bne.n	80018e0 <HAL_DMA_IRQHandler+0xc8>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800198c:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800198e:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001990:	f022 0210 	bic.w	r2, r2, #16
 8001994:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 8001996:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800199a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 800199e:	e79f      	b.n	80018e0 <HAL_DMA_IRQHandler+0xc8>
          if(hdma->XferM1CpltCallback != NULL)
 80019a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d19f      	bne.n	80018e6 <HAL_DMA_IRQHandler+0xce>
 80019a6:	e769      	b.n	800187c <HAL_DMA_IRQHandler+0x64>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019a8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80019aa:	2a00      	cmp	r2, #0
 80019ac:	d1d7      	bne.n	800195e <HAL_DMA_IRQHandler+0x146>
 80019ae:	e7da      	b.n	8001966 <HAL_DMA_IRQHandler+0x14e>
 80019b0:	2000011c 	.word	0x2000011c
 80019b4:	1b4e81b5 	.word	0x1b4e81b5

080019b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019bc:	f8d1 c000 	ldr.w	ip, [r1]
 80019c0:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80019c2:	2500      	movs	r5, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c4:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8001bf4 <HAL_GPIO_Init+0x23c>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019c8:	f8df e22c 	ldr.w	lr, [pc, #556]	; 8001bf8 <HAL_GPIO_Init+0x240>
 80019cc:	e003      	b.n	80019d6 <HAL_GPIO_Init+0x1e>
  for(position = 0; position < GPIO_NUMBER; position++)
 80019ce:	3501      	adds	r5, #1
 80019d0:	2d10      	cmp	r5, #16
 80019d2:	f000 80bf 	beq.w	8001b54 <HAL_GPIO_Init+0x19c>
    ioposition = ((uint32_t)0x01) << position;
 80019d6:	2301      	movs	r3, #1
 80019d8:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019da:	ea03 020c 	and.w	r2, r3, ip
    if(iocurrent == ioposition)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d1f5      	bne.n	80019ce <HAL_GPIO_Init+0x16>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019e2:	684e      	ldr	r6, [r1, #4]
 80019e4:	f026 0910 	bic.w	r9, r6, #16
 80019e8:	f1b9 0f02 	cmp.w	r9, #2
 80019ec:	f040 80b5 	bne.w	8001b5a <HAL_GPIO_Init+0x1a2>
        temp = GPIOx->AFR[position >> 3];
 80019f0:	ea4f 09d5 	mov.w	r9, r5, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019f4:	f005 0a07 	and.w	sl, r5, #7
 80019f8:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019fc:	690c      	ldr	r4, [r1, #16]
 80019fe:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a02:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8001a06:	f8d9 7020 	ldr.w	r7, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a0a:	fa0b fb0a 	lsl.w	fp, fp, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a0e:	fa04 f40a 	lsl.w	r4, r4, sl
 8001a12:	ea4f 0a45 	mov.w	sl, r5, lsl #1
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a16:	ea27 070b 	bic.w	r7, r7, fp
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a1a:	f04f 0b03 	mov.w	fp, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a1e:	433c      	orrs	r4, r7
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a20:	fa0b fb0a 	lsl.w	fp, fp, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a24:	f006 0703 	and.w	r7, r6, #3
        GPIOx->AFR[position >> 3] = temp;
 8001a28:	f8c9 4020 	str.w	r4, [r9, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a2c:	ea6f 040b 	mvn.w	r4, fp
      temp = GPIOx->MODER;
 8001a30:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a34:	fa07 f70a 	lsl.w	r7, r7, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a38:	ea04 0909 	and.w	r9, r4, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a3c:	ea47 0709 	orr.w	r7, r7, r9
      GPIOx->MODER = temp;
 8001a40:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8001a42:	6887      	ldr	r7, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001a44:	f3c6 1900 	ubfx	r9, r6, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a48:	ea07 0b04 	and.w	fp, r7, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a4c:	68cf      	ldr	r7, [r1, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001a4e:	fa09 f905 	lsl.w	r9, r9, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a52:	fa07 f70a 	lsl.w	r7, r7, sl
 8001a56:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 8001a5a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001a5c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a5e:	ea27 0303 	bic.w	r3, r7, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001a62:	ea49 0303 	orr.w	r3, r9, r3
        GPIOx->OTYPER = temp;
 8001a66:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8001a68:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a6a:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a6c:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a6e:	fa03 f30a 	lsl.w	r3, r3, sl
 8001a72:	4323      	orrs	r3, r4
      GPIOx->PUPDR = temp;
 8001a74:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a76:	00f3      	lsls	r3, r6, #3
 8001a78:	d5a9      	bpl.n	80019ce <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7a:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
 8001a7e:	f025 0703 	bic.w	r7, r5, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a82:	f005 0303 	and.w	r3, r5, #3
 8001a86:	f04f 090f 	mov.w	r9, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001a8e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a92:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a94:	f8c8 4044 	str.w	r4, [r8, #68]	; 0x44
 8001a98:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8001a9c:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001aa0:	fa09 f903 	lsl.w	r9, r9, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa4:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8001aa8:	9401      	str	r4, [sp, #4]
 8001aaa:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001aac:	68bc      	ldr	r4, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001aae:	ea24 0a09 	bic.w	sl, r4, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ab2:	4c4b      	ldr	r4, [pc, #300]	; (8001be0 <HAL_GPIO_Init+0x228>)
 8001ab4:	42a0      	cmp	r0, r4
 8001ab6:	d069      	beq.n	8001b8c <HAL_GPIO_Init+0x1d4>
 8001ab8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001abc:	42a0      	cmp	r0, r4
 8001abe:	d067      	beq.n	8001b90 <HAL_GPIO_Init+0x1d8>
 8001ac0:	4c48      	ldr	r4, [pc, #288]	; (8001be4 <HAL_GPIO_Init+0x22c>)
 8001ac2:	42a0      	cmp	r0, r4
 8001ac4:	d069      	beq.n	8001b9a <HAL_GPIO_Init+0x1e2>
 8001ac6:	4c48      	ldr	r4, [pc, #288]	; (8001be8 <HAL_GPIO_Init+0x230>)
 8001ac8:	42a0      	cmp	r0, r4
 8001aca:	d06b      	beq.n	8001ba4 <HAL_GPIO_Init+0x1ec>
 8001acc:	4c47      	ldr	r4, [pc, #284]	; (8001bec <HAL_GPIO_Init+0x234>)
 8001ace:	42a0      	cmp	r0, r4
 8001ad0:	d06d      	beq.n	8001bae <HAL_GPIO_Init+0x1f6>
 8001ad2:	4c47      	ldr	r4, [pc, #284]	; (8001bf0 <HAL_GPIO_Init+0x238>)
 8001ad4:	42a0      	cmp	r0, r4
 8001ad6:	d06f      	beq.n	8001bb8 <HAL_GPIO_Init+0x200>
 8001ad8:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8001bfc <HAL_GPIO_Init+0x244>
 8001adc:	4548      	cmp	r0, r9
 8001ade:	d070      	beq.n	8001bc2 <HAL_GPIO_Init+0x20a>
 8001ae0:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8001c00 <HAL_GPIO_Init+0x248>
 8001ae4:	4548      	cmp	r0, r9
 8001ae6:	d071      	beq.n	8001bcc <HAL_GPIO_Init+0x214>
 8001ae8:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8001c04 <HAL_GPIO_Init+0x24c>
 8001aec:	4548      	cmp	r0, r9
 8001aee:	d072      	beq.n	8001bd6 <HAL_GPIO_Init+0x21e>
 8001af0:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8001c08 <HAL_GPIO_Init+0x250>
 8001af4:	4548      	cmp	r0, r9
 8001af6:	bf0c      	ite	eq
 8001af8:	f04f 0909 	moveq.w	r9, #9
 8001afc:	f04f 090a 	movne.w	r9, #10
 8001b00:	fa09 f303 	lsl.w	r3, r9, r3
 8001b04:	ea43 030a 	orr.w	r3, r3, sl
        temp &= ~((uint32_t)iocurrent);
 8001b08:	43d4      	mvns	r4, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b0a:	3501      	adds	r5, #1
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b0c:	60bb      	str	r3, [r7, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b0e:	03f7      	lsls	r7, r6, #15
        temp = EXTI->IMR;
 8001b10:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8001b14:	bf54      	ite	pl
 8001b16:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8001b18:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b1a:	03b7      	lsls	r7, r6, #14
        EXTI->IMR = temp;
 8001b1c:	f8ce 3000 	str.w	r3, [lr]
        temp = EXTI->EMR;
 8001b20:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 8001b24:	bf54      	ite	pl
 8001b26:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8001b28:	4313      	orrmi	r3, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b2a:	02f7      	lsls	r7, r6, #11
        EXTI->EMR = temp;
 8001b2c:	f8ce 3004 	str.w	r3, [lr, #4]
        temp = EXTI->RTSR;
 8001b30:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
 8001b34:	bf54      	ite	pl
 8001b36:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8001b38:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b3a:	02b6      	lsls	r6, r6, #10
        EXTI->RTSR = temp;
 8001b3c:	f8ce 3008 	str.w	r3, [lr, #8]
        temp = EXTI->FTSR;
 8001b40:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 8001b44:	bf54      	ite	pl
 8001b46:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8001b48:	4313      	orrmi	r3, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b4a:	2d10      	cmp	r5, #16
        }
        EXTI->FTSR = temp;
 8001b4c:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b50:	f47f af41 	bne.w	80019d6 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8001b54:	b003      	add	sp, #12
 8001b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b5a:	ea4f 0a45 	mov.w	sl, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b5e:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 8001b60:	f8d0 b000 	ldr.w	fp, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b64:	f109 39ff 	add.w	r9, r9, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b68:	ea06 0704 	and.w	r7, r6, r4
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b6c:	fa04 f40a 	lsl.w	r4, r4, sl
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b70:	f1b9 0f01 	cmp.w	r9, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b74:	ea6f 0404 	mvn.w	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b78:	fa07 f70a 	lsl.w	r7, r7, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b7c:	ea0b 0b04 	and.w	fp, fp, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b80:	ea47 070b 	orr.w	r7, r7, fp
      GPIOx->MODER = temp;
 8001b84:	6007      	str	r7, [r0, #0]
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b86:	f63f af6f 	bhi.w	8001a68 <HAL_GPIO_Init+0xb0>
 8001b8a:	e75a      	b.n	8001a42 <HAL_GPIO_Init+0x8a>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	e7b9      	b.n	8001b04 <HAL_GPIO_Init+0x14c>
 8001b90:	f04f 0901 	mov.w	r9, #1
 8001b94:	fa09 f303 	lsl.w	r3, r9, r3
 8001b98:	e7b4      	b.n	8001b04 <HAL_GPIO_Init+0x14c>
 8001b9a:	f04f 0902 	mov.w	r9, #2
 8001b9e:	fa09 f303 	lsl.w	r3, r9, r3
 8001ba2:	e7af      	b.n	8001b04 <HAL_GPIO_Init+0x14c>
 8001ba4:	f04f 0903 	mov.w	r9, #3
 8001ba8:	fa09 f303 	lsl.w	r3, r9, r3
 8001bac:	e7aa      	b.n	8001b04 <HAL_GPIO_Init+0x14c>
 8001bae:	f04f 0904 	mov.w	r9, #4
 8001bb2:	fa09 f303 	lsl.w	r3, r9, r3
 8001bb6:	e7a5      	b.n	8001b04 <HAL_GPIO_Init+0x14c>
 8001bb8:	f04f 0905 	mov.w	r9, #5
 8001bbc:	fa09 f303 	lsl.w	r3, r9, r3
 8001bc0:	e7a0      	b.n	8001b04 <HAL_GPIO_Init+0x14c>
 8001bc2:	f04f 0906 	mov.w	r9, #6
 8001bc6:	fa09 f303 	lsl.w	r3, r9, r3
 8001bca:	e79b      	b.n	8001b04 <HAL_GPIO_Init+0x14c>
 8001bcc:	f04f 0907 	mov.w	r9, #7
 8001bd0:	fa09 f303 	lsl.w	r3, r9, r3
 8001bd4:	e796      	b.n	8001b04 <HAL_GPIO_Init+0x14c>
 8001bd6:	f04f 0908 	mov.w	r9, #8
 8001bda:	fa09 f303 	lsl.w	r3, r9, r3
 8001bde:	e791      	b.n	8001b04 <HAL_GPIO_Init+0x14c>
 8001be0:	40020000 	.word	0x40020000
 8001be4:	40020800 	.word	0x40020800
 8001be8:	40020c00 	.word	0x40020c00
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40021400 	.word	0x40021400
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40013c00 	.word	0x40013c00
 8001bfc:	40021800 	.word	0x40021800
 8001c00:	40021c00 	.word	0x40021c00
 8001c04:	40022000 	.word	0x40022000
 8001c08:	40022400 	.word	0x40022400

08001c0c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c0c:	b902      	cbnz	r2, 8001c10 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c0e:	0409      	lsls	r1, r1, #16
 8001c10:	6181      	str	r1, [r0, #24]
 8001c12:	4770      	bx	lr

08001c14 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop

08001c18 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c18:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001c1a:	6951      	ldr	r1, [r2, #20]
 8001c1c:	4201      	tst	r1, r0
 8001c1e:	d100      	bne.n	8001c22 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001c20:	4770      	bx	lr
{
 8001c22:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c24:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c26:	f7ff fff5 	bl	8001c14 <HAL_GPIO_EXTI_Callback>
 8001c2a:	bd08      	pop	{r3, pc}
 8001c2c:	40013c00 	.word	0x40013c00

08001c30 <HAL_I2C_EV_IRQHandler>:
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001c30:	6803      	ldr	r3, [r0, #0]
{
 8001c32:	b410      	push	{r4}
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001c34:	6b44      	ldr	r4, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001c36:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001c38:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8001c3a:	b11c      	cbz	r4, 8001c44 <HAL_I2C_EV_IRQHandler+0x14>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001c3c:	4623      	mov	r3, r4
  }
}
 8001c3e:	f85d 4b04 	ldr.w	r4, [sp], #4
    hi2c->XferISR(hi2c, itflags, itsources);
 8001c42:	4718      	bx	r3
}
 8001c44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop

08001c4c <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
  uint32_t i = 0;

  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001c4c:	2800      	cmp	r0, #0
 8001c4e:	f000 8213 	beq.w	8002078 <HAL_PCD_Init+0x42c>
{
 8001c52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c56:	f04f 0803 	mov.w	r8, #3
 8001c5a:	4604      	mov	r4, r0
{
 8001c5c:	b08b      	sub	sp, #44	; 0x2c

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);

 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001c5e:	4606      	mov	r6, r0
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c60:	f880 83b9 	strb.w	r8, [r0, #953]	; 0x3b9

 /* Init endpoints structures */
 for (i = 0; i < 15 ; i++)
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 8001c64:	2501      	movs	r5, #1
  HAL_PCD_MspInit(hpcd);
 8001c66:	f005 fced 	bl	8007644 <HAL_PCD_MspInit>
 __HAL_PCD_DISABLE(hpcd);
 8001c6a:	6820      	ldr	r0, [r4, #0]
 8001c6c:	f002 fdd0 	bl	8004810 <USB_DisableGlobalInt>
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001c70:	f856 eb10 	ldr.w	lr, [r6], #16
 8001c74:	466f      	mov	r7, sp
   hpcd->IN_ep[i].num = i;
 8001c76:	f04f 0a04 	mov.w	sl, #4
 8001c7a:	f04f 0b02 	mov.w	fp, #2
 8001c7e:	f04f 0905 	mov.w	r9, #5
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001c82:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001c84:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001c86:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001c88:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001c8a:	1d22      	adds	r2, r4, #4
 8001c8c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8001c90:	e887 0003 	stmia.w	r7, {r0, r1}
 8001c94:	4670      	mov	r0, lr
   hpcd->IN_ep[i].num = i;
 8001c96:	f04f 0709 	mov.w	r7, #9
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001c9a:	ca0e      	ldmia	r2, {r1, r2, r3}
 8001c9c:	f002 fd54 	bl	8004748 <USB_CoreInit>
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	6820      	ldr	r0, [r4, #0]
 8001ca4:	f002 fdbc 	bl	8004820 <USB_SetCurrentMode>
   hpcd->IN_ep[i].num = i;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f04f 0107 	mov.w	r1, #7
 8001cae:	2006      	movs	r0, #6
 8001cb0:	2208      	movs	r2, #8
 8001cb2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cb6:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b

   hpcd->Instance->DIEPTXF[i] = 0;
 }

 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8001cba:	f104 0c10 	add.w	ip, r4, #16
   hpcd->IN_ep[i].maxpacket =  0;
 8001cbe:	6423      	str	r3, [r4, #64]	; 0x40
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8001cc0:	46ee      	mov	lr, sp
   hpcd->IN_ep[i].xfer_buff = 0;
 8001cc2:	6463      	str	r3, [r4, #68]	; 0x44
   hpcd->IN_ep[i].xfer_len = 0;
 8001cc4:	64e3      	str	r3, [r4, #76]	; 0x4c
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cc6:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
   hpcd->IN_ep[i].maxpacket =  0;
 8001cca:	65e3      	str	r3, [r4, #92]	; 0x5c
   hpcd->IN_ep[i].xfer_buff = 0;
 8001ccc:	6623      	str	r3, [r4, #96]	; 0x60
   hpcd->IN_ep[i].xfer_len = 0;
 8001cce:	66a3      	str	r3, [r4, #104]	; 0x68
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cd0:	f884 3073 	strb.w	r3, [r4, #115]	; 0x73
   hpcd->IN_ep[i].maxpacket =  0;
 8001cd4:	67a3      	str	r3, [r4, #120]	; 0x78
   hpcd->IN_ep[i].xfer_buff = 0;
 8001cd6:	67e3      	str	r3, [r4, #124]	; 0x7c
   hpcd->IN_ep[i].xfer_len = 0;
 8001cd8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cdc:	f884 308f 	strb.w	r3, [r4, #143]	; 0x8f
   hpcd->IN_ep[i].maxpacket =  0;
 8001ce0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
   hpcd->IN_ep[i].xfer_buff = 0;
 8001ce4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
   hpcd->IN_ep[i].xfer_len = 0;
 8001ce8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cec:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
   hpcd->IN_ep[i].maxpacket =  0;
 8001cf0:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
   hpcd->IN_ep[i].xfer_buff = 0;
 8001cf4:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
   hpcd->IN_ep[i].xfer_len = 0;
 8001cf8:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
   hpcd->IN_ep[i].num = i;
 8001cfc:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
   hpcd->IN_ep[i].is_in = 1;
 8001d00:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8001d04:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
   hpcd->IN_ep[i].num = i;
 8001d08:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
   hpcd->IN_ep[i].is_in = 1;
 8001d0c:	f884 5071 	strb.w	r5, [r4, #113]	; 0x71
 8001d10:	f884 508d 	strb.w	r5, [r4, #141]	; 0x8d
 8001d14:	f884 50a9 	strb.w	r5, [r4, #169]	; 0xa9
 8001d18:	f884 50c5 	strb.w	r5, [r4, #197]	; 0xc5
   hpcd->IN_ep[i].num = i;
 8001d1c:	f884 b070 	strb.w	fp, [r4, #112]	; 0x70
 8001d20:	f884 a0a8 	strb.w	sl, [r4, #168]	; 0xa8
 8001d24:	f884 90c4 	strb.w	r9, [r4, #196]	; 0xc4
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d28:	f884 30c7 	strb.w	r3, [r4, #199]	; 0xc7
   hpcd->IN_ep[i].num = i;
 8001d2c:	f884 10fc 	strb.w	r1, [r4, #252]	; 0xfc
 8001d30:	f04f 010b 	mov.w	r1, #11
 8001d34:	f884 7134 	strb.w	r7, [r4, #308]	; 0x134
 8001d38:	f04f 070a 	mov.w	r7, #10
   hpcd->IN_ep[i].maxpacket =  0;
 8001d3c:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
   hpcd->IN_ep[i].xfer_buff = 0;
 8001d40:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
   hpcd->IN_ep[i].xfer_len = 0;
 8001d44:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d48:	f884 30e3 	strb.w	r3, [r4, #227]	; 0xe3
   hpcd->IN_ep[i].maxpacket =  0;
 8001d4c:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
   hpcd->IN_ep[i].xfer_buff = 0;
 8001d50:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
   hpcd->IN_ep[i].xfer_len = 0;
 8001d54:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d58:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   hpcd->IN_ep[i].maxpacket =  0;
 8001d5c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   hpcd->IN_ep[i].xfer_buff = 0;
 8001d60:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   hpcd->IN_ep[i].xfer_len = 0;
 8001d64:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d68:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b
   hpcd->IN_ep[i].maxpacket =  0;
 8001d6c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   hpcd->IN_ep[i].xfer_buff = 0;
 8001d70:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   hpcd->IN_ep[i].xfer_len = 0;
 8001d74:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d78:	f884 3137 	strb.w	r3, [r4, #311]	; 0x137
   hpcd->IN_ep[i].maxpacket =  0;
 8001d7c:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
   hpcd->IN_ep[i].xfer_buff = 0;
 8001d80:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
   hpcd->IN_ep[i].xfer_len = 0;
 8001d84:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d88:	f884 3153 	strb.w	r3, [r4, #339]	; 0x153
   hpcd->IN_ep[i].maxpacket =  0;
 8001d8c:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   hpcd->IN_ep[i].xfer_buff = 0;
 8001d90:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
   hpcd->IN_ep[i].num = i;
 8001d94:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
 8001d98:	f884 2118 	strb.w	r2, [r4, #280]	; 0x118
 8001d9c:	f884 7150 	strb.w	r7, [r4, #336]	; 0x150
   hpcd->IN_ep[i].is_in = 1;
 8001da0:	f884 50e1 	strb.w	r5, [r4, #225]	; 0xe1
 8001da4:	f884 50fd 	strb.w	r5, [r4, #253]	; 0xfd
 8001da8:	f884 5119 	strb.w	r5, [r4, #281]	; 0x119
 8001dac:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 8001db0:	f884 5151 	strb.w	r5, [r4, #337]	; 0x151
   hpcd->IN_ep[i].xfer_len = 0;
 8001db4:	f8c4 3164 	str.w	r3, [r4, #356]	; 0x164
   hpcd->IN_ep[i].num = i;
 8001db8:	f884 116c 	strb.w	r1, [r4, #364]	; 0x16c
 8001dbc:	f04f 010c 	mov.w	r1, #12
 8001dc0:	6827      	ldr	r7, [r4, #0]
 8001dc2:	f884 1188 	strb.w	r1, [r4, #392]	; 0x188
 8001dc6:	f04f 010d 	mov.w	r1, #13
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001dca:	f884 316f 	strb.w	r3, [r4, #367]	; 0x16f
   hpcd->IN_ep[i].num = i;
 8001dce:	f884 11a4 	strb.w	r1, [r4, #420]	; 0x1a4
 8001dd2:	f04f 010e 	mov.w	r1, #14
   hpcd->IN_ep[i].maxpacket =  0;
 8001dd6:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
   hpcd->IN_ep[i].num = i;
 8001dda:	f884 11c0 	strb.w	r1, [r4, #448]	; 0x1c0
   hpcd->OUT_ep[i].num = i;
 8001dde:	f04f 0107 	mov.w	r1, #7
   hpcd->IN_ep[i].xfer_buff = 0;
 8001de2:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
   hpcd->IN_ep[i].xfer_len = 0;
 8001de6:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001dea:	f884 318b 	strb.w	r3, [r4, #395]	; 0x18b
   hpcd->IN_ep[i].maxpacket =  0;
 8001dee:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
   hpcd->IN_ep[i].xfer_buff = 0;
 8001df2:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
   hpcd->IN_ep[i].xfer_len = 0;
 8001df6:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001dfa:	f884 31a7 	strb.w	r3, [r4, #423]	; 0x1a7
   hpcd->IN_ep[i].maxpacket =  0;
 8001dfe:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
   hpcd->IN_ep[i].xfer_buff = 0;
 8001e02:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
   hpcd->IN_ep[i].xfer_len = 0;
 8001e06:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e0a:	f884 31c3 	strb.w	r3, [r4, #451]	; 0x1c3
   hpcd->IN_ep[i].maxpacket =  0;
 8001e0e:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   hpcd->IN_ep[i].xfer_buff = 0;
 8001e12:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
   hpcd->IN_ep[i].xfer_len = 0;
 8001e16:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
   hpcd->OUT_ep[i].is_in = 0;
 8001e1a:	f884 31f9 	strb.w	r3, [r4, #505]	; 0x1f9
   hpcd->OUT_ep[i].num = i;
 8001e1e:	f884 31f8 	strb.w	r3, [r4, #504]	; 0x1f8
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001e22:	87e3      	strh	r3, [r4, #62]	; 0x3e
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e24:	f884 31fb 	strb.w	r3, [r4, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0;
 8001e28:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   hpcd->OUT_ep[i].xfer_buff = 0;
 8001e2c:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
   hpcd->OUT_ep[i].xfer_len = 0;
 8001e30:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
   hpcd->IN_ep[i].is_in = 1;
 8001e34:	f884 516d 	strb.w	r5, [r4, #365]	; 0x16d
 8001e38:	f884 5189 	strb.w	r5, [r4, #393]	; 0x189
 8001e3c:	f884 51a5 	strb.w	r5, [r4, #421]	; 0x1a5
 8001e40:	f884 51c1 	strb.w	r5, [r4, #449]	; 0x1c1
   hpcd->Instance->DIEPTXF[i] = 0;
 8001e44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
   hpcd->OUT_ep[i].is_in = 0;
 8001e48:	f884 3215 	strb.w	r3, [r4, #533]	; 0x215
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e4c:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
   hpcd->OUT_ep[i].maxpacket = 0;
 8001e50:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
   hpcd->OUT_ep[i].xfer_buff = 0;
 8001e54:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
   hpcd->OUT_ep[i].xfer_len = 0;
 8001e58:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
   hpcd->OUT_ep[i].num = i;
 8001e5c:	f884 5214 	strb.w	r5, [r4, #532]	; 0x214
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001e60:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
   hpcd->Instance->DIEPTXF[i] = 0;
 8001e64:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   hpcd->OUT_ep[i].is_in = 0;
 8001e68:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e6c:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
   hpcd->OUT_ep[i].maxpacket = 0;
 8001e70:	f8c4 3238 	str.w	r3, [r4, #568]	; 0x238
   hpcd->OUT_ep[i].xfer_buff = 0;
 8001e74:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
   hpcd->OUT_ep[i].xfer_len = 0;
 8001e78:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
   hpcd->OUT_ep[i].num = i;
 8001e7c:	f884 b230 	strb.w	fp, [r4, #560]	; 0x230
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001e80:	f8a4 b076 	strh.w	fp, [r4, #118]	; 0x76
   hpcd->Instance->DIEPTXF[i] = 0;
 8001e84:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   hpcd->OUT_ep[i].is_in = 0;
 8001e88:	f884 324d 	strb.w	r3, [r4, #589]	; 0x24d
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e8c:	f884 324f 	strb.w	r3, [r4, #591]	; 0x24f
   hpcd->OUT_ep[i].maxpacket = 0;
 8001e90:	f8c4 3254 	str.w	r3, [r4, #596]	; 0x254
   hpcd->OUT_ep[i].xfer_buff = 0;
 8001e94:	f8c4 3258 	str.w	r3, [r4, #600]	; 0x258
   hpcd->OUT_ep[i].xfer_len = 0;
 8001e98:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
   hpcd->OUT_ep[i].num = i;
 8001e9c:	f884 824c 	strb.w	r8, [r4, #588]	; 0x24c
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001ea0:	f8a4 8092 	strh.w	r8, [r4, #146]	; 0x92
   hpcd->Instance->DIEPTXF[i] = 0;
 8001ea4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   hpcd->OUT_ep[i].is_in = 0;
 8001ea8:	f884 3269 	strb.w	r3, [r4, #617]	; 0x269
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001eac:	f884 326b 	strb.w	r3, [r4, #619]	; 0x26b
   hpcd->OUT_ep[i].maxpacket = 0;
 8001eb0:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
   hpcd->OUT_ep[i].xfer_buff = 0;
 8001eb4:	f8c4 3274 	str.w	r3, [r4, #628]	; 0x274
   hpcd->OUT_ep[i].xfer_len = 0;
 8001eb8:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
   hpcd->OUT_ep[i].num = i;
 8001ebc:	f884 a268 	strb.w	sl, [r4, #616]	; 0x268
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001ec0:	f8a4 a0ae 	strh.w	sl, [r4, #174]	; 0xae
   hpcd->Instance->DIEPTXF[i] = 0;
 8001ec4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   hpcd->OUT_ep[i].is_in = 0;
 8001ec8:	f884 3285 	strb.w	r3, [r4, #645]	; 0x285
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ecc:	f884 3287 	strb.w	r3, [r4, #647]	; 0x287
   hpcd->OUT_ep[i].maxpacket = 0;
 8001ed0:	f8c4 328c 	str.w	r3, [r4, #652]	; 0x28c
   hpcd->OUT_ep[i].xfer_buff = 0;
 8001ed4:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
   hpcd->OUT_ep[i].xfer_len = 0;
 8001ed8:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
   hpcd->OUT_ep[i].num = i;
 8001edc:	f884 9284 	strb.w	r9, [r4, #644]	; 0x284
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001ee0:	f8a4 90ca 	strh.w	r9, [r4, #202]	; 0xca
   hpcd->Instance->DIEPTXF[i] = 0;
 8001ee4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   hpcd->OUT_ep[i].is_in = 0;
 8001ee8:	f884 32a1 	strb.w	r3, [r4, #673]	; 0x2a1
   hpcd->OUT_ep[i].num = i;
 8001eec:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001ef0:	f8a4 00e6 	strh.w	r0, [r4, #230]	; 0xe6
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ef4:	f884 32a3 	strb.w	r3, [r4, #675]	; 0x2a3
   hpcd->OUT_ep[i].maxpacket = 0;
 8001ef8:	f8c4 32a8 	str.w	r3, [r4, #680]	; 0x2a8
   hpcd->OUT_ep[i].xfer_buff = 0;
 8001efc:	f8c4 32ac 	str.w	r3, [r4, #684]	; 0x2ac
   hpcd->OUT_ep[i].xfer_len = 0;
 8001f00:	f8c4 32b4 	str.w	r3, [r4, #692]	; 0x2b4
   hpcd->Instance->DIEPTXF[i] = 0;
 8001f04:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
   hpcd->OUT_ep[i].num = i;
 8001f08:	f884 12bc 	strb.w	r1, [r4, #700]	; 0x2bc
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001f0c:	f04f 0107 	mov.w	r1, #7
   hpcd->OUT_ep[i].is_in = 0;
 8001f10:	f884 32bd 	strb.w	r3, [r4, #701]	; 0x2bd
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001f14:	f8a4 1102 	strh.w	r1, [r4, #258]	; 0x102
   hpcd->OUT_ep[i].num = i;
 8001f18:	f04f 0109 	mov.w	r1, #9
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f1c:	f884 32bf 	strb.w	r3, [r4, #703]	; 0x2bf
   hpcd->OUT_ep[i].maxpacket = 0;
 8001f20:	f8c4 32c4 	str.w	r3, [r4, #708]	; 0x2c4
   hpcd->OUT_ep[i].xfer_buff = 0;
 8001f24:	f8c4 32c8 	str.w	r3, [r4, #712]	; 0x2c8
   hpcd->OUT_ep[i].xfer_len = 0;
 8001f28:	f8c4 32d0 	str.w	r3, [r4, #720]	; 0x2d0
   hpcd->Instance->DIEPTXF[i] = 0;
 8001f2c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
   hpcd->OUT_ep[i].is_in = 0;
 8001f30:	f884 32d9 	strb.w	r3, [r4, #729]	; 0x2d9
   hpcd->OUT_ep[i].num = i;
 8001f34:	f884 22d8 	strb.w	r2, [r4, #728]	; 0x2d8
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001f38:	f8a4 211e 	strh.w	r2, [r4, #286]	; 0x11e
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f3c:	f884 32db 	strb.w	r3, [r4, #731]	; 0x2db
   hpcd->OUT_ep[i].maxpacket = 0;
 8001f40:	f8c4 32e0 	str.w	r3, [r4, #736]	; 0x2e0
   hpcd->OUT_ep[i].xfer_buff = 0;
 8001f44:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
   hpcd->OUT_ep[i].xfer_len = 0;
 8001f48:	f8c4 32ec 	str.w	r3, [r4, #748]	; 0x2ec
   hpcd->Instance->DIEPTXF[i] = 0;
 8001f4c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
   hpcd->OUT_ep[i].is_in = 0;
 8001f50:	f884 32f5 	strb.w	r3, [r4, #757]	; 0x2f5
   hpcd->OUT_ep[i].num = i;
 8001f54:	f884 12f4 	strb.w	r1, [r4, #756]	; 0x2f4
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001f58:	f04f 0109 	mov.w	r1, #9
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f5c:	f884 32f7 	strb.w	r3, [r4, #759]	; 0x2f7
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001f60:	f8a4 113a 	strh.w	r1, [r4, #314]	; 0x13a
   hpcd->OUT_ep[i].num = i;
 8001f64:	f04f 010a 	mov.w	r1, #10
   hpcd->OUT_ep[i].maxpacket = 0;
 8001f68:	f8c4 32fc 	str.w	r3, [r4, #764]	; 0x2fc
   hpcd->OUT_ep[i].xfer_buff = 0;
 8001f6c:	f8c4 3300 	str.w	r3, [r4, #768]	; 0x300
   hpcd->OUT_ep[i].xfer_len = 0;
 8001f70:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   hpcd->Instance->DIEPTXF[i] = 0;
 8001f74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   hpcd->OUT_ep[i].num = i;
 8001f78:	f884 1310 	strb.w	r1, [r4, #784]	; 0x310
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001f7c:	f04f 010a 	mov.w	r1, #10
   hpcd->OUT_ep[i].is_in = 0;
 8001f80:	f884 3311 	strb.w	r3, [r4, #785]	; 0x311
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001f84:	f8a4 1156 	strh.w	r1, [r4, #342]	; 0x156
   hpcd->OUT_ep[i].num = i;
 8001f88:	f04f 010b 	mov.w	r1, #11
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f8c:	f884 3313 	strb.w	r3, [r4, #787]	; 0x313
   hpcd->OUT_ep[i].maxpacket = 0;
 8001f90:	f8c4 3318 	str.w	r3, [r4, #792]	; 0x318
   hpcd->OUT_ep[i].xfer_buff = 0;
 8001f94:	f8c4 331c 	str.w	r3, [r4, #796]	; 0x31c
   hpcd->OUT_ep[i].xfer_len = 0;
 8001f98:	f8c4 3324 	str.w	r3, [r4, #804]	; 0x324
   hpcd->Instance->DIEPTXF[i] = 0;
 8001f9c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   hpcd->OUT_ep[i].num = i;
 8001fa0:	f884 132c 	strb.w	r1, [r4, #812]	; 0x32c
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001fa4:	f04f 010b 	mov.w	r1, #11
   hpcd->OUT_ep[i].is_in = 0;
 8001fa8:	f884 332d 	strb.w	r3, [r4, #813]	; 0x32d
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001fac:	f8a4 1172 	strh.w	r1, [r4, #370]	; 0x172
   hpcd->OUT_ep[i].num = i;
 8001fb0:	f04f 010c 	mov.w	r1, #12
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fb4:	f884 332f 	strb.w	r3, [r4, #815]	; 0x32f
   hpcd->OUT_ep[i].maxpacket = 0;
 8001fb8:	f8c4 3334 	str.w	r3, [r4, #820]	; 0x334
   hpcd->OUT_ep[i].xfer_buff = 0;
 8001fbc:	f8c4 3338 	str.w	r3, [r4, #824]	; 0x338
   hpcd->OUT_ep[i].xfer_len = 0;
 8001fc0:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
   hpcd->Instance->DIEPTXF[i] = 0;
 8001fc4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   hpcd->OUT_ep[i].num = i;
 8001fc8:	f884 1348 	strb.w	r1, [r4, #840]	; 0x348
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001fcc:	f04f 010c 	mov.w	r1, #12
   hpcd->OUT_ep[i].is_in = 0;
 8001fd0:	f884 3349 	strb.w	r3, [r4, #841]	; 0x349
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001fd4:	f8a4 118e 	strh.w	r1, [r4, #398]	; 0x18e
   hpcd->OUT_ep[i].num = i;
 8001fd8:	f04f 010d 	mov.w	r1, #13
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fdc:	f884 334b 	strb.w	r3, [r4, #843]	; 0x34b
   hpcd->OUT_ep[i].maxpacket = 0;
 8001fe0:	f8c4 3350 	str.w	r3, [r4, #848]	; 0x350
   hpcd->OUT_ep[i].xfer_buff = 0;
 8001fe4:	f8c4 3354 	str.w	r3, [r4, #852]	; 0x354
   hpcd->OUT_ep[i].xfer_len = 0;
 8001fe8:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
   hpcd->Instance->DIEPTXF[i] = 0;
 8001fec:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   hpcd->OUT_ep[i].num = i;
 8001ff0:	f884 1364 	strb.w	r1, [r4, #868]	; 0x364
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001ff4:	f04f 010d 	mov.w	r1, #13
   hpcd->OUT_ep[i].is_in = 0;
 8001ff8:	f884 3365 	strb.w	r3, [r4, #869]	; 0x365
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001ffc:	f8a4 11aa 	strh.w	r1, [r4, #426]	; 0x1aa
   hpcd->OUT_ep[i].num = i;
 8002000:	f04f 010e 	mov.w	r1, #14
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002004:	f884 3367 	strb.w	r3, [r4, #871]	; 0x367
   hpcd->OUT_ep[i].maxpacket = 0;
 8002008:	f8c4 336c 	str.w	r3, [r4, #876]	; 0x36c
   hpcd->OUT_ep[i].xfer_buff = 0;
 800200c:	f8c4 3370 	str.w	r3, [r4, #880]	; 0x370
   hpcd->OUT_ep[i].xfer_len = 0;
 8002010:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
   hpcd->Instance->DIEPTXF[i] = 0;
 8002014:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   hpcd->OUT_ep[i].num = i;
 8002018:	f884 1380 	strb.w	r1, [r4, #896]	; 0x380
   hpcd->IN_ep[i].tx_fifo_num = i;
 800201c:	f04f 010e 	mov.w	r1, #14
   hpcd->OUT_ep[i].is_in = 0;
 8002020:	f884 3381 	strb.w	r3, [r4, #897]	; 0x381
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002024:	f884 3383 	strb.w	r3, [r4, #899]	; 0x383
   hpcd->IN_ep[i].tx_fifo_num = i;
 8002028:	f8a4 11c6 	strh.w	r1, [r4, #454]	; 0x1c6
   hpcd->OUT_ep[i].maxpacket = 0;
 800202c:	f8c4 3388 	str.w	r3, [r4, #904]	; 0x388
   hpcd->OUT_ep[i].xfer_buff = 0;
 8002030:	f8c4 338c 	str.w	r3, [r4, #908]	; 0x38c
   hpcd->OUT_ep[i].xfer_len = 0;
 8002034:	f8c4 3394 	str.w	r3, [r4, #916]	; 0x394
   hpcd->Instance->DIEPTXF[i] = 0;
 8002038:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 USB_DevInit(hpcd->Instance, hpcd->Init);
 800203c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002040:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002044:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002048:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800204c:	eb04 020a 	add.w	r2, r4, sl
 8002050:	e896 0003 	ldmia.w	r6, {r0, r1}
 8002054:	e88e 0003 	stmia.w	lr, {r0, r1}
 8002058:	ca0e      	ldmia	r2, {r1, r2, r3}
 800205a:	4638      	mov	r0, r7
 800205c:	f002 fbfa 	bl	8004854 <USB_DevInit>

 hpcd->State= HAL_PCD_STATE_READY;

 /* Activate LPM */
 if (hpcd->Init.lpm_enable ==1)
 8002060:	6a63      	ldr	r3, [r4, #36]	; 0x24
 hpcd->State= HAL_PCD_STATE_READY;
 8002062:	f884 53b9 	strb.w	r5, [r4, #953]	; 0x3b9
 if (hpcd->Init.lpm_enable ==1)
 8002066:	42ab      	cmp	r3, r5
 8002068:	d008      	beq.n	800207c <HAL_PCD_Init+0x430>
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */

 USB_DevDisconnect (hpcd->Instance);
 800206a:	6820      	ldr	r0, [r4, #0]
 800206c:	f002 ff4c 	bl	8004f08 <USB_DevDisconnect>
 return HAL_OK;
 8002070:	2000      	movs	r0, #0
}
 8002072:	b00b      	add	sp, #44	; 0x2c
 8002074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 8002078:	2001      	movs	r0, #1
 800207a:	4770      	bx	lr
   HAL_PCDEx_ActivateLPM(hpcd);
 800207c:	4620      	mov	r0, r4
 800207e:	f000 fcd1 	bl	8002a24 <HAL_PCDEx_ActivateLPM>
 8002082:	e7f2      	b.n	800206a <HAL_PCD_Init+0x41e>

08002084 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8002084:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_PCD_Start+0xc>
 800208c:	2002      	movs	r0, #2
 800208e:	4770      	bx	lr
{
 8002090:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8002092:	2301      	movs	r3, #1
 8002094:	4604      	mov	r4, r0
  USB_DevConnect (hpcd->Instance);
 8002096:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8002098:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);
 800209c:	f002 ff28 	bl	8004ef0 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80020a0:	6820      	ldr	r0, [r4, #0]
 80020a2:	f002 fbad 	bl	8004800 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80020a6:	2000      	movs	r0, #0
 80020a8:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 80020ac:	bd10      	pop	{r4, pc}
 80020ae:	bf00      	nop

080020b0 <HAL_PCD_IRQHandler>:
  * @brief  Handle PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020b4:	f8d0 8000 	ldr.w	r8, [r0]
{
 80020b8:	b089      	sub	sp, #36	; 0x24
 80020ba:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0, temp = 0;
  USB_OTG_EPTypeDef *ep = NULL;
  uint32_t hclk = 200000000;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80020bc:	4640      	mov	r0, r8
 80020be:	f002 ff5f 	bl	8004f80 <USB_GetMode>
 80020c2:	b110      	cbz	r0, 80020ca <HAL_PCD_IRQHandler+0x1a>
        HAL_PCD_DisconnectCallback(hpcd);
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 80020c4:	b009      	add	sp, #36	; 0x24
 80020c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020ca:	4606      	mov	r6, r0
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80020cc:	6820      	ldr	r0, [r4, #0]
 80020ce:	f002 ff27 	bl	8004f20 <USB_ReadInterrupts>
 80020d2:	2800      	cmp	r0, #0
 80020d4:	d0f6      	beq.n	80020c4 <HAL_PCD_IRQHandler+0x14>
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80020d6:	6820      	ldr	r0, [r4, #0]
 80020d8:	f002 ff22 	bl	8004f20 <USB_ReadInterrupts>
 80020dc:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80020e0:	6820      	ldr	r0, [r4, #0]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80020e2:	d001      	beq.n	80020e8 <HAL_PCD_IRQHandler+0x38>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80020e4:	2302      	movs	r3, #2
 80020e6:	6143      	str	r3, [r0, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80020e8:	f002 ff1a 	bl	8004f20 <USB_ReadInterrupts>
 80020ec:	0301      	lsls	r1, r0, #12
 80020ee:	f100 814d 	bmi.w	800238c <HAL_PCD_IRQHandler+0x2dc>
  uint32_t i = 0, ep_intr = 0, epint = 0, epnum = 0;
 80020f2:	f04f 0a00 	mov.w	sl, #0
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80020f6:	6820      	ldr	r0, [r4, #0]
 80020f8:	f002 ff12 	bl	8004f20 <USB_ReadInterrupts>
 80020fc:	0345      	lsls	r5, r0, #13
 80020fe:	f100 8092 	bmi.w	8002226 <HAL_PCD_IRQHandler+0x176>
 8002102:	6823      	ldr	r3, [r4, #0]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002104:	4618      	mov	r0, r3
 8002106:	f002 ff0b 	bl	8004f20 <USB_ReadInterrupts>
 800210a:	2800      	cmp	r0, #0
 800210c:	f2c0 8216 	blt.w	800253c <HAL_PCD_IRQHandler+0x48c>
 8002110:	6820      	ldr	r0, [r4, #0]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002112:	f002 ff05 	bl	8004f20 <USB_ReadInterrupts>
 8002116:	0500      	lsls	r0, r0, #20
 8002118:	d464      	bmi.n	80021e4 <HAL_PCD_IRQHandler+0x134>
 800211a:	6820      	ldr	r0, [r4, #0]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800211c:	f002 ff00 	bl	8004f20 <USB_ReadInterrupts>
 8002120:	0102      	lsls	r2, r0, #4
 8002122:	d512      	bpl.n	800214a <HAL_PCD_IRQHandler+0x9a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002124:	6823      	ldr	r3, [r4, #0]
 8002126:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
      if( hpcd->LPM_State == LPM_L0)
 800212a:	f894 23ec 	ldrb.w	r2, [r4, #1004]	; 0x3ec
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800212e:	6159      	str	r1, [r3, #20]
      if( hpcd->LPM_State == LPM_L0)
 8002130:	2a00      	cmp	r2, #0
 8002132:	d161      	bne.n	80021f8 <HAL_PCD_IRQHandler+0x148>
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;
 8002134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8002136:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002138:	4620      	mov	r0, r4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;
 800213a:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 800213e:	f884 13ec 	strb.w	r1, [r4, #1004]	; 0x3ec
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;
 8002142:	f8c4 33f0 	str.w	r3, [r4, #1008]	; 0x3f0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002146:	f005 fbd5 	bl	80078f4 <HAL_PCDEx_LPM_Callback>
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800214a:	6820      	ldr	r0, [r4, #0]
 800214c:	f002 fee8 	bl	8004f20 <USB_ReadInterrupts>
 8002150:	04c3      	lsls	r3, r0, #19
 8002152:	f100 818a 	bmi.w	800246a <HAL_PCD_IRQHandler+0x3ba>
 8002156:	6820      	ldr	r0, [r4, #0]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002158:	f002 fee2 	bl	8004f20 <USB_ReadInterrupts>
 800215c:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      USB_ActivateSetup(hpcd->Instance);
 8002160:	6820      	ldr	r0, [r4, #0]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002162:	f040 8164 	bne.w	800242e <HAL_PCD_IRQHandler+0x37e>
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002166:	f002 fedb 	bl	8004f20 <USB_ReadInterrupts>
 800216a:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800216e:	6820      	ldr	r0, [r4, #0]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002170:	d012      	beq.n	8002198 <HAL_PCD_IRQHandler+0xe8>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002172:	6983      	ldr	r3, [r0, #24]
 8002174:	f023 0310 	bic.w	r3, r3, #16
 8002178:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 800217a:	f8d8 5020 	ldr.w	r5, [r8, #32]
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800217e:	f3c5 4343 	ubfx	r3, r5, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002182:	f005 060f 	and.w	r6, r5, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002186:	2b02      	cmp	r3, #2
 8002188:	f000 8203 	beq.w	8002592 <HAL_PCD_IRQHandler+0x4e2>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800218c:	2b06      	cmp	r3, #6
 800218e:	d037      	beq.n	8002200 <HAL_PCD_IRQHandler+0x150>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002190:	6983      	ldr	r3, [r0, #24]
 8002192:	f043 0310 	orr.w	r3, r3, #16
 8002196:	6183      	str	r3, [r0, #24]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002198:	f002 fec2 	bl	8004f20 <USB_ReadInterrupts>
 800219c:	0707      	lsls	r7, r0, #28
 800219e:	f100 81bc 	bmi.w	800251a <HAL_PCD_IRQHandler+0x46a>
 80021a2:	6820      	ldr	r0, [r4, #0]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80021a4:	f002 febc 	bl	8004f20 <USB_ReadInterrupts>
 80021a8:	02c6      	lsls	r6, r0, #11
 80021aa:	f100 81ac 	bmi.w	8002506 <HAL_PCD_IRQHandler+0x456>
 80021ae:	6820      	ldr	r0, [r4, #0]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80021b0:	f002 feb6 	bl	8004f20 <USB_ReadInterrupts>
 80021b4:	0285      	lsls	r5, r0, #10
 80021b6:	f100 81b7 	bmi.w	8002528 <HAL_PCD_IRQHandler+0x478>
 80021ba:	6820      	ldr	r0, [r4, #0]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80021bc:	f002 feb0 	bl	8004f20 <USB_ReadInterrupts>
 80021c0:	0040      	lsls	r0, r0, #1
 80021c2:	f100 8198 	bmi.w	80024f6 <HAL_PCD_IRQHandler+0x446>
 80021c6:	6820      	ldr	r0, [r4, #0]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80021c8:	f002 feaa 	bl	8004f20 <USB_ReadInterrupts>
 80021cc:	0741      	lsls	r1, r0, #29
 80021ce:	f57f af79 	bpl.w	80020c4 <HAL_PCD_IRQHandler+0x14>
      temp = hpcd->Instance->GOTGINT;
 80021d2:	6823      	ldr	r3, [r4, #0]
 80021d4:	685d      	ldr	r5, [r3, #4]
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80021d6:	076a      	lsls	r2, r5, #29
 80021d8:	f100 81c9 	bmi.w	800256e <HAL_PCD_IRQHandler+0x4be>
      hpcd->Instance->GOTGINT |= temp;
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	4315      	orrs	r5, r2
 80021e0:	605d      	str	r5, [r3, #4]
 80021e2:	e76f      	b.n	80020c4 <HAL_PCD_IRQHandler+0x14>
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80021e4:	f8d8 3808 	ldr.w	r3, [r8, #2056]	; 0x808
 80021e8:	07d9      	lsls	r1, r3, #31
 80021ea:	f100 81c5 	bmi.w	8002578 <HAL_PCD_IRQHandler+0x4c8>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80021ee:	6820      	ldr	r0, [r4, #0]
 80021f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021f4:	6143      	str	r3, [r0, #20]
 80021f6:	e791      	b.n	800211c <HAL_PCD_IRQHandler+0x6c>
        HAL_PCD_SuspendCallback(hpcd);
 80021f8:	4620      	mov	r0, r4
 80021fa:	f005 fa89 	bl	8007710 <HAL_PCD_SuspendCallback>
 80021fe:	e7a4      	b.n	800214a <HAL_PCD_IRQHandler+0x9a>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002200:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 8002204:	2208      	movs	r2, #8
 8002206:	f504 716f 	add.w	r1, r4, #956	; 0x3bc
 800220a:	4640      	mov	r0, r8
 800220c:	f002 fe12 	bl	8004e34 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002210:	f3c5 130a 	ubfx	r3, r5, #4, #11
 8002214:	eb04 0286 	add.w	r2, r4, r6, lsl #2
 8002218:	6820      	ldr	r0, [r4, #0]
 800221a:	f8d2 1210 	ldr.w	r1, [r2, #528]	; 0x210
 800221e:	440b      	add	r3, r1
 8002220:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
 8002224:	e7b4      	b.n	8002190 <HAL_PCD_IRQHandler+0xe0>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002226:	6820      	ldr	r0, [r4, #0]
 8002228:	f002 fe86 	bl	8004f38 <USB_ReadDevAllInEpInterrupt>
      while ( ep_intr )
 800222c:	4683      	mov	fp, r0
 800222e:	2800      	cmp	r0, #0
 8002230:	f000 8212 	beq.w	8002658 <HAL_PCD_IRQHandler+0x5a8>
 8002234:	6823      	ldr	r3, [r4, #0]
 8002236:	4625      	mov	r5, r4
 8002238:	f508 6910 	add.w	r9, r8, #2304	; 0x900
 800223c:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002240:	f8cd 800c 	str.w	r8, [sp, #12]
 8002244:	461f      	mov	r7, r3
 8002246:	9604      	str	r6, [sp, #16]
 8002248:	e009      	b.n	800225e <HAL_PCD_IRQHandler+0x1ae>
      while ( ep_intr )
 800224a:	ea5f 0b5b 	movs.w	fp, fp, lsr #1
        epnum++;
 800224e:	f10a 0a01 	add.w	sl, sl, #1
 8002252:	f105 051c 	add.w	r5, r5, #28
 8002256:	f109 0920 	add.w	r9, r9, #32
      while ( ep_intr )
 800225a:	f000 8183 	beq.w	8002564 <HAL_PCD_IRQHandler+0x4b4>
        if (ep_intr & 0x1) /* In ITR */
 800225e:	f01b 0f01 	tst.w	fp, #1
 8002262:	d0f2      	beq.n	800224a <HAL_PCD_IRQHandler+0x19a>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8002264:	fa5f f88a 	uxtb.w	r8, sl
 8002268:	4638      	mov	r0, r7
 800226a:	4641      	mov	r1, r8
 800226c:	f002 fe76 	bl	8004f5c <USB_ReadDevInEPInterrupt>
 8002270:	4606      	mov	r6, r0
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002272:	07f0      	lsls	r0, r6, #31
 8002274:	d51e      	bpl.n	80022b4 <HAL_PCD_IRQHandler+0x204>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002276:	9b03      	ldr	r3, [sp, #12]
            fifoemptymsk = 0x1 << epnum;
 8002278:	2201      	movs	r2, #1
            if (hpcd->Init.dma_enable == 1)
 800227a:	6920      	ldr	r0, [r4, #16]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800227c:	f8d3 1834 	ldr.w	r1, [r3, #2100]	; 0x834
            fifoemptymsk = 0x1 << epnum;
 8002280:	fa02 f20a 	lsl.w	r2, r2, sl
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002284:	ea21 0202 	bic.w	r2, r1, r2
 8002288:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800228c:	2301      	movs	r3, #1
            if (hpcd->Init.dma_enable == 1)
 800228e:	4298      	cmp	r0, r3
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002290:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1)
 8002294:	f000 81a3 	beq.w	80025de <HAL_PCD_IRQHandler+0x52e>
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8002298:	4641      	mov	r1, r8
 800229a:	4620      	mov	r0, r4
 800229c:	f005 fa1a 	bl	80076d4 <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1)
 80022a0:	6923      	ldr	r3, [r4, #16]
              if((epnum == 0) && (hpcd->IN_ep[epnum].xfer_len == 0))
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d106      	bne.n	80022b4 <HAL_PCD_IRQHandler+0x204>
 80022a6:	f1ba 0f00 	cmp.w	sl, #0
 80022aa:	d103      	bne.n	80022b4 <HAL_PCD_IRQHandler+0x204>
 80022ac:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 81df 	beq.w	8002672 <HAL_PCD_IRQHandler+0x5c2>
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80022b4:	0731      	lsls	r1, r6, #28
 80022b6:	d502      	bpl.n	80022be <HAL_PCD_IRQHandler+0x20e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80022b8:	2308      	movs	r3, #8
 80022ba:	f8c9 3008 	str.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80022be:	06f2      	lsls	r2, r6, #27
 80022c0:	d502      	bpl.n	80022c8 <HAL_PCD_IRQHandler+0x218>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80022c2:	2310      	movs	r3, #16
 80022c4:	f8c9 3008 	str.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80022c8:	0673      	lsls	r3, r6, #25
 80022ca:	d502      	bpl.n	80022d2 <HAL_PCD_IRQHandler+0x222>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80022cc:	2340      	movs	r3, #64	; 0x40
 80022ce:	f8c9 3008 	str.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80022d2:	07b7      	lsls	r7, r6, #30
 80022d4:	d502      	bpl.n	80022dc <HAL_PCD_IRQHandler+0x22c>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80022d6:	2302      	movs	r3, #2
 80022d8:	f8c9 3008 	str.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80022dc:	0636      	lsls	r6, r6, #24
  * @param  epnum  endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022de:	6827      	ldr	r7, [r4, #0]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80022e0:	d5b3      	bpl.n	800224a <HAL_PCD_IRQHandler+0x19a>
  int32_t len = 0;
  uint32_t len32b;
  uint32_t fifoemptymsk = 0;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 80022e2:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
  }


  len32b = (len + 3) / 4;

  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 80022e4:	f507 6110 	add.w	r1, r7, #2304	; 0x900
  len = ep->xfer_len - ep->xfer_count;
 80022e8:	f8d5 e050 	ldr.w	lr, [r5, #80]	; 0x50
  if (len > ep->maxpacket)
 80022ec:	6c2a      	ldr	r2, [r5, #64]	; 0x40
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 80022ee:	eb01 114a 	add.w	r1, r1, sl, lsl #5
  len = ep->xfer_len - ep->xfer_count;
 80022f2:	eba0 030e 	sub.w	r3, r0, lr
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 80022f6:	9707      	str	r7, [sp, #28]
 80022f8:	9105      	str	r1, [sp, #20]
 80022fa:	4293      	cmp	r3, r2
 80022fc:	461e      	mov	r6, r3
 80022fe:	6989      	ldr	r1, [r1, #24]
 8002300:	bf28      	it	cs
 8002302:	4616      	movcs	r6, r2
 8002304:	b289      	uxth	r1, r1
  len32b = (len + 3) / 4;
 8002306:	f116 0c03 	adds.w	ip, r6, #3
 800230a:	bf48      	it	mi
 800230c:	f106 0c06 	addmi.w	ip, r6, #6
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8002310:	ebb1 0fac 	cmp.w	r1, ip, asr #2
 8002314:	d92c      	bls.n	8002370 <HAL_PCD_IRQHandler+0x2c0>
          ep->xfer_count < ep->xfer_len &&
 8002316:	b358      	cbz	r0, 8002370 <HAL_PCD_IRQHandler+0x2c0>
 8002318:	4570      	cmp	r0, lr
 800231a:	d929      	bls.n	8002370 <HAL_PCD_IRQHandler+0x2c0>
 800231c:	f8cd a018 	str.w	sl, [sp, #24]
 8002320:	4616      	mov	r6, r2
 8002322:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8002324:	f8dd a014 	ldr.w	sl, [sp, #20]
 8002328:	e006      	b.n	8002338 <HAL_PCD_IRQHandler+0x288>
 800232a:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 800232c:	b1ea      	cbz	r2, 800236a <HAL_PCD_IRQHandler+0x2ba>
 800232e:	429a      	cmp	r2, r3
 8002330:	eba2 0303 	sub.w	r3, r2, r3
 8002334:	d919      	bls.n	800236a <HAL_PCD_IRQHandler+0x2ba>
 8002336:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 8002338:	429e      	cmp	r6, r3
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3) / 4;

    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable);
 800233a:	7c20      	ldrb	r0, [r4, #16]
 800233c:	4642      	mov	r2, r8
 800233e:	bf28      	it	cs
 8002340:	461e      	movcs	r6, r3
 8002342:	9000      	str	r0, [sp, #0]
 8002344:	4638      	mov	r0, r7
 8002346:	b2b3      	uxth	r3, r6
 8002348:	f002 fd5e 	bl	8004e08 <USB_WritePacket>
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 800234c:	f8da 2018 	ldr.w	r2, [sl, #24]
    len32b = (len + 3) / 4;
 8002350:	1cf0      	adds	r0, r6, #3

    ep->xfer_buff  += len;
 8002352:	6c69      	ldr	r1, [r5, #68]	; 0x44
    ep->xfer_count += len;
 8002354:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8002356:	b292      	uxth	r2, r2
    len32b = (len + 3) / 4;
 8002358:	bf48      	it	mi
 800235a:	1db0      	addmi	r0, r6, #6
    ep->xfer_buff  += len;
 800235c:	4431      	add	r1, r6
    ep->xfer_count += len;
 800235e:	4433      	add	r3, r6
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8002360:	ebb2 0fa0 	cmp.w	r2, r0, asr #2
    ep->xfer_buff  += len;
 8002364:	6469      	str	r1, [r5, #68]	; 0x44
    ep->xfer_count += len;
 8002366:	652b      	str	r3, [r5, #80]	; 0x50
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8002368:	d8df      	bhi.n	800232a <HAL_PCD_IRQHandler+0x27a>
 800236a:	f8dd a018 	ldr.w	sl, [sp, #24]
 800236e:	6827      	ldr	r7, [r4, #0]
  }

  if(len <= 0)
 8002370:	2e00      	cmp	r6, #0
 8002372:	f73f af6a 	bgt.w	800224a <HAL_PCD_IRQHandler+0x19a>
  {
    fifoemptymsk = 0x1 << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002376:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = 0x1 << epnum;
 8002378:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800237a:	f8d3 1834 	ldr.w	r1, [r3, #2100]	; 0x834
    fifoemptymsk = 0x1 << epnum;
 800237e:	fa02 f20a 	lsl.w	r2, r2, sl
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002382:	ea21 0202 	bic.w	r2, r1, r2
 8002386:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 800238a:	e75e      	b.n	800224a <HAL_PCD_IRQHandler+0x19a>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800238c:	6820      	ldr	r0, [r4, #0]
 800238e:	f002 fdcb 	bl	8004f28 <USB_ReadDevAllOutEpInterrupt>
      while ( ep_intr )
 8002392:	4605      	mov	r5, r0
 8002394:	2800      	cmp	r0, #0
 8002396:	f43f aeac 	beq.w	80020f2 <HAL_PCD_IRQHandler+0x42>
 800239a:	f508 6330 	add.w	r3, r8, #2816	; 0xb00
 800239e:	46a1      	mov	r9, r4
 80023a0:	f04f 0a00 	mov.w	sl, #0
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80023a4:	9603      	str	r6, [sp, #12]
 80023a6:	9304      	str	r3, [sp, #16]
      while ( ep_intr )
 80023a8:	461f      	mov	r7, r3
 80023aa:	e008      	b.n	80023be <HAL_PCD_IRQHandler+0x30e>
 80023ac:	086d      	lsrs	r5, r5, #1
        epnum++;
 80023ae:	f10a 0a01 	add.w	sl, sl, #1
 80023b2:	f107 0720 	add.w	r7, r7, #32
 80023b6:	f109 091c 	add.w	r9, r9, #28
      while ( ep_intr )
 80023ba:	f000 80d1 	beq.w	8002560 <HAL_PCD_IRQHandler+0x4b0>
        if (ep_intr & 0x1)
 80023be:	07ea      	lsls	r2, r5, #31
 80023c0:	d5f4      	bpl.n	80023ac <HAL_PCD_IRQHandler+0x2fc>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 80023c2:	fa5f f68a 	uxtb.w	r6, sl
 80023c6:	6820      	ldr	r0, [r4, #0]
 80023c8:	4631      	mov	r1, r6
 80023ca:	f002 fdbd 	bl	8004f48 <USB_ReadDevOutEPInterrupt>
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80023ce:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 80023d2:	4683      	mov	fp, r0
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80023d4:	d014      	beq.n	8002400 <HAL_PCD_IRQHandler+0x350>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80023d6:	2101      	movs	r1, #1
            if (hpcd->Init.dma_enable == 1)
 80023d8:	6922      	ldr	r2, [r4, #16]
 80023da:	428a      	cmp	r2, r1
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80023dc:	60b9      	str	r1, [r7, #8]
            if (hpcd->Init.dma_enable == 1)
 80023de:	f000 8103 	beq.w	80025e8 <HAL_PCD_IRQHandler+0x538>
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 80023e2:	4631      	mov	r1, r6
 80023e4:	4620      	mov	r0, r4
 80023e6:	f005 f96b 	bl	80076c0 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1)
 80023ea:	6923      	ldr	r3, [r4, #16]
              if((epnum == 0) && (hpcd->OUT_ep[epnum].xfer_len == 0))
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d107      	bne.n	8002400 <HAL_PCD_IRQHandler+0x350>
 80023f0:	f1ba 0f00 	cmp.w	sl, #0
 80023f4:	d104      	bne.n	8002400 <HAL_PCD_IRQHandler+0x350>
 80023f6:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 8140 	beq.w	8002680 <HAL_PCD_IRQHandler+0x5d0>
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002400:	f01b 0f08 	tst.w	fp, #8
 8002404:	d008      	beq.n	8002418 <HAL_PCD_IRQHandler+0x368>
            if (hpcd->Init.dma_enable == 1)
 8002406:	6923      	ldr	r3, [r4, #16]
 8002408:	2b01      	cmp	r3, #1
 800240a:	f000 80df 	beq.w	80025cc <HAL_PCD_IRQHandler+0x51c>
            HAL_PCD_SetupStageCallback(hpcd);
 800240e:	4620      	mov	r0, r4
 8002410:	f005 f950 	bl	80076b4 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002414:	2308      	movs	r3, #8
 8002416:	60bb      	str	r3, [r7, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002418:	f01b 0f10 	tst.w	fp, #16
 800241c:	d001      	beq.n	8002422 <HAL_PCD_IRQHandler+0x372>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800241e:	2310      	movs	r3, #16
 8002420:	60bb      	str	r3, [r7, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002422:	f01b 0f20 	tst.w	fp, #32
 8002426:	d0c1      	beq.n	80023ac <HAL_PCD_IRQHandler+0x2fc>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002428:	2320      	movs	r3, #32
 800242a:	60bb      	str	r3, [r7, #8]
 800242c:	e7be      	b.n	80023ac <HAL_PCD_IRQHandler+0x2fc>
      USB_ActivateSetup(hpcd->Instance);
 800242e:	f002 fdab 	bl	8004f88 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002432:	6823      	ldr	r3, [r4, #0]
 8002434:	68da      	ldr	r2, [r3, #12]
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8002436:	4618      	mov	r0, r3
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002438:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 800243c:	60da      	str	r2, [r3, #12]
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 800243e:	f002 faf3 	bl	8004a28 <USB_GetDevSpeed>
 8002442:	2800      	cmp	r0, #0
 8002444:	f040 80e5 	bne.w	8002612 <HAL_PCD_IRQHandler+0x562>
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10) & USB_OTG_GUSBCFG_TRDT);
 8002448:	6822      	ldr	r2, [r4, #0]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;
 800244a:	f44f 7100 	mov.w	r1, #512	; 0x200
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 800244e:	60e0      	str	r0, [r4, #12]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10) & USB_OTG_GUSBCFG_TRDT);
 8002450:	68d3      	ldr	r3, [r2, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;
 8002452:	6161      	str	r1, [r4, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10) & USB_OTG_GUSBCFG_TRDT);
 8002454:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8002458:	60d3      	str	r3, [r2, #12]
      HAL_PCD_ResetCallback(hpcd);
 800245a:	4620      	mov	r0, r4
 800245c:	f005 f948 	bl	80076f0 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002460:	6820      	ldr	r0, [r4, #0]
 8002462:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002466:	6143      	str	r3, [r0, #20]
 8002468:	e67d      	b.n	8002166 <HAL_PCD_IRQHandler+0xb6>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800246a:	f508 6500 	add.w	r5, r8, #2048	; 0x800
 800246e:	686b      	ldr	r3, [r5, #4]
      USB_FlushTxFifo(hpcd->Instance, 0x10);
 8002470:	6820      	ldr	r0, [r4, #0]
 8002472:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002474:	f023 0301 	bic.w	r3, r3, #1
 8002478:	606b      	str	r3, [r5, #4]
      USB_FlushTxFifo(hpcd->Instance, 0x10);
 800247a:	f002 fac3 	bl	8004a04 <USB_FlushTxFifo>
      for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 800247e:	6867      	ldr	r7, [r4, #4]
 8002480:	b1a7      	cbz	r7, 80024ac <HAL_PCD_IRQHandler+0x3fc>
 8002482:	f508 6310 	add.w	r3, r8, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFF;
 8002486:	21ff      	movs	r1, #255	; 0xff
 8002488:	6099      	str	r1, [r3, #8]
      for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 800248a:	3601      	adds	r6, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	3320      	adds	r3, #32
      for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8002490:	42be      	cmp	r6, r7
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002492:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002496:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFF;
 800249a:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800249e:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 80024a2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80024a6:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 80024aa:	d1ed      	bne.n	8002488 <HAL_PCD_IRQHandler+0x3d8>
      USBx_DEVICE->DAINT = 0xFFFFFFFF;
 80024ac:	f04f 33ff 	mov.w	r3, #4294967295
      if(hpcd->Init.use_dedicated_ep1)
 80024b0:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINT = 0xFFFFFFFF;
 80024b2:	61ab      	str	r3, [r5, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001;
 80024b4:	69eb      	ldr	r3, [r5, #28]
 80024b6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80024ba:	61eb      	str	r3, [r5, #28]
      if(hpcd->Init.use_dedicated_ep1)
 80024bc:	2a00      	cmp	r2, #0
 80024be:	d05f      	beq.n	8002580 <HAL_PCD_IRQHandler+0x4d0>
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 80024c0:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 80024c4:	f043 030b 	orr.w	r3, r3, #11
 80024c8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80024cc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80024ce:	f043 030b 	orr.w	r3, r3, #11
 80024d2:	646b      	str	r3, [r5, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80024d4:	f8d8 3800 	ldr.w	r3, [r8, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80024d8:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 80024dc:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80024de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80024e2:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80024e4:	f8c8 3800 	str.w	r3, [r8, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80024e8:	f002 fd6a 	bl	8004fc0 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80024ec:	6820      	ldr	r0, [r4, #0]
 80024ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024f2:	6143      	str	r3, [r0, #20]
 80024f4:	e630      	b.n	8002158 <HAL_PCD_IRQHandler+0xa8>
      HAL_PCD_ConnectCallback(hpcd);
 80024f6:	4620      	mov	r0, r4
 80024f8:	f005 f92e 	bl	8007758 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80024fc:	6820      	ldr	r0, [r4, #0]
 80024fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002502:	6143      	str	r3, [r0, #20]
 8002504:	e660      	b.n	80021c8 <HAL_PCD_IRQHandler+0x118>
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8002506:	4620      	mov	r0, r4
 8002508:	fa5f f18a 	uxtb.w	r1, sl
 800250c:	f005 f920 	bl	8007750 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002510:	6820      	ldr	r0, [r4, #0]
 8002512:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002516:	6143      	str	r3, [r0, #20]
 8002518:	e64a      	b.n	80021b0 <HAL_PCD_IRQHandler+0x100>
      HAL_PCD_SOFCallback(hpcd);
 800251a:	4620      	mov	r0, r4
 800251c:	f005 f8e4 	bl	80076e8 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002520:	6820      	ldr	r0, [r4, #0]
 8002522:	2308      	movs	r3, #8
 8002524:	6143      	str	r3, [r0, #20]
 8002526:	e63d      	b.n	80021a4 <HAL_PCD_IRQHandler+0xf4>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8002528:	4620      	mov	r0, r4
 800252a:	fa5f f18a 	uxtb.w	r1, sl
 800252e:	f005 f90b 	bl	8007748 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002532:	6820      	ldr	r0, [r4, #0]
 8002534:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002538:	6143      	str	r3, [r0, #20]
 800253a:	e63f      	b.n	80021bc <HAL_PCD_IRQHandler+0x10c>
      if(hpcd->LPM_State == LPM_L1)
 800253c:	f894 13ec 	ldrb.w	r1, [r4, #1004]	; 0x3ec
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002540:	f8d8 2804 	ldr.w	r2, [r8, #2052]	; 0x804
      if(hpcd->LPM_State == LPM_L1)
 8002544:	2901      	cmp	r1, #1
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002546:	f022 0201 	bic.w	r2, r2, #1
 800254a:	f8c8 2804 	str.w	r2, [r8, #2052]	; 0x804
      if(hpcd->LPM_State == LPM_L1)
 800254e:	d071      	beq.n	8002634 <HAL_PCD_IRQHandler+0x584>
        HAL_PCD_ResumeCallback(hpcd);
 8002550:	4620      	mov	r0, r4
 8002552:	f005 f8f5 	bl	8007740 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002556:	6820      	ldr	r0, [r4, #0]
 8002558:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800255c:	6143      	str	r3, [r0, #20]
 800255e:	e5d8      	b.n	8002112 <HAL_PCD_IRQHandler+0x62>
 8002560:	9e03      	ldr	r6, [sp, #12]
 8002562:	e5c8      	b.n	80020f6 <HAL_PCD_IRQHandler+0x46>
 8002564:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002568:	463b      	mov	r3, r7
 800256a:	9e04      	ldr	r6, [sp, #16]
 800256c:	e5ca      	b.n	8002104 <HAL_PCD_IRQHandler+0x54>
        HAL_PCD_DisconnectCallback(hpcd);
 800256e:	4620      	mov	r0, r4
 8002570:	f005 f8f6 	bl	8007760 <HAL_PCD_DisconnectCallback>
 8002574:	6823      	ldr	r3, [r4, #0]
 8002576:	e631      	b.n	80021dc <HAL_PCD_IRQHandler+0x12c>
        HAL_PCD_SuspendCallback(hpcd);
 8002578:	4620      	mov	r0, r4
 800257a:	f005 f8c9 	bl	8007710 <HAL_PCD_SuspendCallback>
 800257e:	e636      	b.n	80021ee <HAL_PCD_IRQHandler+0x13e>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
 8002580:	696b      	ldr	r3, [r5, #20]
 8002582:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002586:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8002588:	692b      	ldr	r3, [r5, #16]
 800258a:	f043 030b 	orr.w	r3, r3, #11
 800258e:	612b      	str	r3, [r5, #16]
 8002590:	e7a0      	b.n	80024d4 <HAL_PCD_IRQHandler+0x424>
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0)
 8002592:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002596:	421d      	tst	r5, r3
 8002598:	f43f adfa 	beq.w	8002190 <HAL_PCD_IRQHandler+0xe0>
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4);
 800259c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 80025a0:	f3c5 150a 	ubfx	r5, r5, #4, #11
 80025a4:	4640      	mov	r0, r8
 80025a6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80025aa:	462a      	mov	r2, r5
 80025ac:	f8d6 1204 	ldr.w	r1, [r6, #516]	; 0x204
 80025b0:	f002 fc40 	bl	8004e34 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025b4:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025b8:	f8d6 3210 	ldr.w	r3, [r6, #528]	; 0x210
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025bc:	442a      	add	r2, r5
 80025be:	6820      	ldr	r0, [r4, #0]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025c0:	441d      	add	r5, r3
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025c2:	f8c6 2204 	str.w	r2, [r6, #516]	; 0x204
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025c6:	f8c6 5210 	str.w	r5, [r6, #528]	; 0x210
 80025ca:	e5e1      	b.n	8002190 <HAL_PCD_IRQHandler+0xe0>
              if (USBx_OUTEP(0)->DOEPINT & (1 << 15))
 80025cc:	9b04      	ldr	r3, [sp, #16]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	041e      	lsls	r6, r3, #16
 80025d2:	f57f af1c 	bpl.w	800240e <HAL_PCD_IRQHandler+0x35e>
                CLEAR_OUT_EP_INTR(epnum, (1 << 15));
 80025d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	e717      	b.n	800240e <HAL_PCD_IRQHandler+0x35e>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80025de:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80025e0:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80025e2:	4413      	add	r3, r2
 80025e4:	646b      	str	r3, [r5, #68]	; 0x44
 80025e6:	e657      	b.n	8002298 <HAL_PCD_IRQHandler+0x1e8>
              if (USBx_OUTEP(0)->DOEPINT & (1 << 15))
 80025e8:	9b04      	ldr	r3, [sp, #16]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	0413      	lsls	r3, r2, #16
 80025ee:	d502      	bpl.n	80025f6 <HAL_PCD_IRQHandler+0x546>
                CLEAR_OUT_EP_INTR(epnum, (1 << 15));
 80025f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80025f4:	60ba      	str	r2, [r7, #8]
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	f8d9 0200 	ldr.w	r0, [r9, #512]	; 0x200
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80025fc:	f8d9 1204 	ldr.w	r1, [r9, #516]	; 0x204
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002600:	f3c2 0212 	ubfx	r2, r2, #0, #19
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002604:	4401      	add	r1, r0
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002606:	1a82      	subs	r2, r0, r2
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002608:	f8c9 1204 	str.w	r1, [r9, #516]	; 0x204
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800260c:	f8c9 2210 	str.w	r2, [r9, #528]	; 0x210
 8002610:	e6e7      	b.n	80023e2 <HAL_PCD_IRQHandler+0x332>
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8002612:	2203      	movs	r2, #3
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;
 8002614:	2340      	movs	r3, #64	; 0x40
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8002616:	60e2      	str	r2, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;
 8002618:	6163      	str	r3, [r4, #20]
        hclk = HAL_RCC_GetHCLKFreq();
 800261a:	f000 fd29 	bl	8003070 <HAL_RCC_GetHCLKFreq>
		if((hclk >= 14200000)&&(hclk < 15000000))
 800261e:	4b3e      	ldr	r3, [pc, #248]	; (8002718 <HAL_PCD_IRQHandler+0x668>)
 8002620:	4a3e      	ldr	r2, [pc, #248]	; (800271c <HAL_PCD_IRQHandler+0x66c>)
 8002622:	4403      	add	r3, r0
 8002624:	4293      	cmp	r3, r2
 8002626:	d80c      	bhi.n	8002642 <HAL_PCD_IRQHandler+0x592>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xF << 10) & USB_OTG_GUSBCFG_TRDT);
 8002628:	6822      	ldr	r2, [r4, #0]
 800262a:	68d3      	ldr	r3, [r2, #12]
 800262c:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 8002630:	60d3      	str	r3, [r2, #12]
 8002632:	e712      	b.n	800245a <HAL_PCD_IRQHandler+0x3aa>
        hpcd->LPM_State = LPM_L0;
 8002634:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002636:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 8002638:	f884 13ec 	strb.w	r1, [r4, #1004]	; 0x3ec
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800263c:	f005 f95a 	bl	80078f4 <HAL_PCDEx_LPM_Callback>
 8002640:	e789      	b.n	8002556 <HAL_PCD_IRQHandler+0x4a6>
        else if((hclk >= 15000000)&&(hclk < 16000000))
 8002642:	4b37      	ldr	r3, [pc, #220]	; (8002720 <HAL_PCD_IRQHandler+0x670>)
 8002644:	4a37      	ldr	r2, [pc, #220]	; (8002724 <HAL_PCD_IRQHandler+0x674>)
 8002646:	4403      	add	r3, r0
 8002648:	4293      	cmp	r3, r2
 800264a:	d807      	bhi.n	800265c <HAL_PCD_IRQHandler+0x5ac>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xE << 10) & USB_OTG_GUSBCFG_TRDT);
 800264c:	6822      	ldr	r2, [r4, #0]
 800264e:	68d3      	ldr	r3, [r2, #12]
 8002650:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002654:	60d3      	str	r3, [r2, #12]
 8002656:	e700      	b.n	800245a <HAL_PCD_IRQHandler+0x3aa>
      epnum = 0;
 8002658:	4682      	mov	sl, r0
 800265a:	e552      	b.n	8002102 <HAL_PCD_IRQHandler+0x52>
        else if((hclk >= 16000000)&&(hclk < 17200000))
 800265c:	4b32      	ldr	r3, [pc, #200]	; (8002728 <HAL_PCD_IRQHandler+0x678>)
 800265e:	4a33      	ldr	r2, [pc, #204]	; (800272c <HAL_PCD_IRQHandler+0x67c>)
 8002660:	4403      	add	r3, r0
 8002662:	4293      	cmp	r3, r2
 8002664:	d813      	bhi.n	800268e <HAL_PCD_IRQHandler+0x5de>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xD << 10) & USB_OTG_GUSBCFG_TRDT);
 8002666:	6822      	ldr	r2, [r4, #0]
 8002668:	68d3      	ldr	r3, [r2, #12]
 800266a:	f443 5350 	orr.w	r3, r3, #13312	; 0x3400
 800266e:	60d3      	str	r3, [r2, #12]
 8002670:	e6f3      	b.n	800245a <HAL_PCD_IRQHandler+0x3aa>
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8002672:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8002676:	2101      	movs	r1, #1
 8002678:	6820      	ldr	r0, [r4, #0]
 800267a:	f002 fca1 	bl	8004fc0 <USB_EP0_OutStart>
 800267e:	e619      	b.n	80022b4 <HAL_PCD_IRQHandler+0x204>
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8002680:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8002684:	2101      	movs	r1, #1
 8002686:	6820      	ldr	r0, [r4, #0]
 8002688:	f002 fc9a 	bl	8004fc0 <USB_EP0_OutStart>
 800268c:	e6b8      	b.n	8002400 <HAL_PCD_IRQHandler+0x350>
        else if((hclk >= 17200000)&&(hclk < 18500000))
 800268e:	4b28      	ldr	r3, [pc, #160]	; (8002730 <HAL_PCD_IRQHandler+0x680>)
 8002690:	4a28      	ldr	r2, [pc, #160]	; (8002734 <HAL_PCD_IRQHandler+0x684>)
 8002692:	4403      	add	r3, r0
 8002694:	4293      	cmp	r3, r2
 8002696:	d805      	bhi.n	80026a4 <HAL_PCD_IRQHandler+0x5f4>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xC << 10) & USB_OTG_GUSBCFG_TRDT);
 8002698:	6822      	ldr	r2, [r4, #0]
 800269a:	68d3      	ldr	r3, [r2, #12]
 800269c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80026a0:	60d3      	str	r3, [r2, #12]
 80026a2:	e6da      	b.n	800245a <HAL_PCD_IRQHandler+0x3aa>
        else if((hclk >= 18500000)&&(hclk < 20000000))
 80026a4:	4b24      	ldr	r3, [pc, #144]	; (8002738 <HAL_PCD_IRQHandler+0x688>)
 80026a6:	4a25      	ldr	r2, [pc, #148]	; (800273c <HAL_PCD_IRQHandler+0x68c>)
 80026a8:	4403      	add	r3, r0
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d805      	bhi.n	80026ba <HAL_PCD_IRQHandler+0x60a>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xB << 10) & USB_OTG_GUSBCFG_TRDT);
 80026ae:	6822      	ldr	r2, [r4, #0]
 80026b0:	68d3      	ldr	r3, [r2, #12]
 80026b2:	f443 5330 	orr.w	r3, r3, #11264	; 0x2c00
 80026b6:	60d3      	str	r3, [r2, #12]
 80026b8:	e6cf      	b.n	800245a <HAL_PCD_IRQHandler+0x3aa>
        else if((hclk >= 20000000)&&(hclk < 21800000))
 80026ba:	4b21      	ldr	r3, [pc, #132]	; (8002740 <HAL_PCD_IRQHandler+0x690>)
 80026bc:	4a21      	ldr	r2, [pc, #132]	; (8002744 <HAL_PCD_IRQHandler+0x694>)
 80026be:	4403      	add	r3, r0
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d805      	bhi.n	80026d0 <HAL_PCD_IRQHandler+0x620>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xA << 10) & USB_OTG_GUSBCFG_TRDT);
 80026c4:	6822      	ldr	r2, [r4, #0]
 80026c6:	68d3      	ldr	r3, [r2, #12]
 80026c8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80026cc:	60d3      	str	r3, [r2, #12]
 80026ce:	e6c4      	b.n	800245a <HAL_PCD_IRQHandler+0x3aa>
        else if((hclk >= 21800000)&&(hclk < 24000000))
 80026d0:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <HAL_PCD_IRQHandler+0x698>)
 80026d2:	4a1e      	ldr	r2, [pc, #120]	; (800274c <HAL_PCD_IRQHandler+0x69c>)
 80026d4:	4403      	add	r3, r0
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d805      	bhi.n	80026e6 <HAL_PCD_IRQHandler+0x636>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9 << 10) & USB_OTG_GUSBCFG_TRDT);
 80026da:	6822      	ldr	r2, [r4, #0]
 80026dc:	68d3      	ldr	r3, [r2, #12]
 80026de:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 80026e2:	60d3      	str	r3, [r2, #12]
 80026e4:	e6b9      	b.n	800245a <HAL_PCD_IRQHandler+0x3aa>
        else if((hclk >= 24000000)&&(hclk < 27700000))
 80026e6:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <HAL_PCD_IRQHandler+0x6a0>)
 80026e8:	4a1a      	ldr	r2, [pc, #104]	; (8002754 <HAL_PCD_IRQHandler+0x6a4>)
 80026ea:	4403      	add	r3, r0
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d805      	bhi.n	80026fc <HAL_PCD_IRQHandler+0x64c>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8 << 10) & USB_OTG_GUSBCFG_TRDT);
 80026f0:	6822      	ldr	r2, [r4, #0]
 80026f2:	68d3      	ldr	r3, [r2, #12]
 80026f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026f8:	60d3      	str	r3, [r2, #12]
 80026fa:	e6ae      	b.n	800245a <HAL_PCD_IRQHandler+0x3aa>
        else if((hclk >= 27700000)&&(hclk < 32000000))
 80026fc:	4b16      	ldr	r3, [pc, #88]	; (8002758 <HAL_PCD_IRQHandler+0x6a8>)
 80026fe:	4a17      	ldr	r2, [pc, #92]	; (800275c <HAL_PCD_IRQHandler+0x6ac>)
 8002700:	4403      	add	r3, r0
 8002702:	4293      	cmp	r3, r2
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7 << 10) & USB_OTG_GUSBCFG_TRDT);
 8002704:	6822      	ldr	r2, [r4, #0]
 8002706:	68d3      	ldr	r3, [r2, #12]
 8002708:	bf94      	ite	ls
 800270a:	f443 53e0 	orrls.w	r3, r3, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 800270e:	f443 53c0 	orrhi.w	r3, r3, #6144	; 0x1800
 8002712:	60d3      	str	r3, [r2, #12]
 8002714:	e6a1      	b.n	800245a <HAL_PCD_IRQHandler+0x3aa>
 8002716:	bf00      	nop
 8002718:	ff275340 	.word	0xff275340
 800271c:	000c34ff 	.word	0x000c34ff
 8002720:	ff1b1e40 	.word	0xff1b1e40
 8002724:	000f423f 	.word	0x000f423f
 8002728:	ff0bdc00 	.word	0xff0bdc00
 800272c:	00124f7f 	.word	0x00124f7f
 8002730:	fef98c80 	.word	0xfef98c80
 8002734:	0013d61f 	.word	0x0013d61f
 8002738:	fee5b660 	.word	0xfee5b660
 800273c:	0016e35f 	.word	0x0016e35f
 8002740:	feced300 	.word	0xfeced300
 8002744:	001b773f 	.word	0x001b773f
 8002748:	feb35bc0 	.word	0xfeb35bc0
 800274c:	002191bf 	.word	0x002191bf
 8002750:	fe91ca00 	.word	0xfe91ca00
 8002754:	0038751f 	.word	0x0038751f
 8002758:	fe5954e0 	.word	0xfe5954e0
 800275c:	00419cdf 	.word	0x00419cdf

08002760 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8002760:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <HAL_PCD_SetAddress+0xc>
 8002768:	2002      	movs	r0, #2
 800276a:	4770      	bx	lr
{
 800276c:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800276e:	2301      	movs	r3, #1
 8002770:	4604      	mov	r4, r0
  USB_SetDevAddress(hpcd->Instance, address);
 8002772:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8002774:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 8002778:	f002 fba8 	bl	8004ecc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800277c:	2000      	movs	r0, #0
 800277e:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8002782:	bd10      	pop	{r4, pc}

08002784 <HAL_PCD_EP_Open>:
{
 8002784:	b570      	push	{r4, r5, r6, lr}
  if ((ep_addr & 0x80) == 0x80)
 8002786:	060c      	lsls	r4, r1, #24
 8002788:	d419      	bmi.n	80027be <HAL_PCD_EP_Open+0x3a>
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800278a:	251c      	movs	r5, #28
  ep->num   = ep_addr & 0x7F;
 800278c:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
  ep->is_in = (0x80 & ep_addr) != 0;
 8002790:	2600      	movs	r6, #0
  if (ep_type == EP_TYPE_BULK )
 8002792:	2b02      	cmp	r3, #2
  ep->num   = ep_addr & 0x7F;
 8002794:	eb00 0484 	add.w	r4, r0, r4, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002798:	fb05 0501 	mla	r5, r5, r1, r0
  ep->num   = ep_addr & 0x7F;
 800279c:	f884 11f8 	strb.w	r1, [r4, #504]	; 0x1f8
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80027a0:	f505 75fc 	add.w	r5, r5, #504	; 0x1f8
  ep->maxpacket = ep_mps;
 80027a4:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
  ep->type = ep_type;
 80027a8:	f884 31fb 	strb.w	r3, [r4, #507]	; 0x1fb
  ep->is_in = (0x80 & ep_addr) != 0;
 80027ac:	f884 61f9 	strb.w	r6, [r4, #505]	; 0x1f9
  if (ep_type == EP_TYPE_BULK )
 80027b0:	d01b      	beq.n	80027ea <HAL_PCD_EP_Open+0x66>
  __HAL_LOCK(hpcd);
 80027b2:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d11d      	bne.n	80027f6 <HAL_PCD_EP_Open+0x72>
 80027ba:	2002      	movs	r0, #2
}
 80027bc:	bd70      	pop	{r4, r5, r6, pc}
 80027be:	f001 047f 	and.w	r4, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80027c2:	251c      	movs	r5, #28
  ep->is_in = (0x80 & ep_addr) != 0;
 80027c4:	2601      	movs	r6, #1
  if (ep_type == EP_TYPE_BULK )
 80027c6:	2b02      	cmp	r3, #2
  ep->num   = ep_addr & 0x7F;
 80027c8:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80027cc:	fb05 0504 	mla	r5, r5, r4, r0
  ep->num   = ep_addr & 0x7F;
 80027d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80027d4:	f105 0538 	add.w	r5, r5, #56	; 0x38
  ep->num   = ep_addr & 0x7F;
 80027d8:	f881 4038 	strb.w	r4, [r1, #56]	; 0x38
  ep->maxpacket = ep_mps;
 80027dc:	640a      	str	r2, [r1, #64]	; 0x40
  ep->type = ep_type;
 80027de:	f881 303b 	strb.w	r3, [r1, #59]	; 0x3b
    ep->tx_fifo_num = ep->num;
 80027e2:	87cc      	strh	r4, [r1, #62]	; 0x3e
  ep->is_in = (0x80 & ep_addr) != 0;
 80027e4:	f881 6039 	strb.w	r6, [r1, #57]	; 0x39
  if (ep_type == EP_TYPE_BULK )
 80027e8:	d1e3      	bne.n	80027b2 <HAL_PCD_EP_Open+0x2e>
    ep->data_pid_start = 0;
 80027ea:	2300      	movs	r3, #0
 80027ec:	712b      	strb	r3, [r5, #4]
  __HAL_LOCK(hpcd);
 80027ee:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d0e1      	beq.n	80027ba <HAL_PCD_EP_Open+0x36>
 80027f6:	4604      	mov	r4, r0
 80027f8:	2301      	movs	r3, #1
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80027fa:	4629      	mov	r1, r5
 80027fc:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 80027fe:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8002802:	f002 f92d 	bl	8004a60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002806:	2000      	movs	r0, #0
 8002808:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return ret;
 800280c:	bd70      	pop	{r4, r5, r6, pc}
 800280e:	bf00      	nop

08002810 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80) == 0x80)
 8002810:	b24a      	sxtb	r2, r1
 8002812:	2a00      	cmp	r2, #0
{
 8002814:	b510      	push	{r4, lr}
 8002816:	4604      	mov	r4, r0
  if ((ep_addr & 0x80) == 0x80)
 8002818:	db18      	blt.n	800284c <HAL_PCD_EP_Close+0x3c>
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800281a:	231c      	movs	r3, #28
 800281c:	fb03 0301 	mla	r3, r3, r1, r0
 8002820:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
  ep->is_in = (0x80 & ep_addr) != 0;
 8002824:	0fd2      	lsrs	r2, r2, #31
  ep->num   = ep_addr & 0x7F;
 8002826:	7019      	strb	r1, [r3, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8002828:	705a      	strb	r2, [r3, #1]
  __HAL_LOCK(hpcd);
 800282a:	f894 23b8 	ldrb.w	r2, [r4, #952]	; 0x3b8
 800282e:	2a01      	cmp	r2, #1
 8002830:	d101      	bne.n	8002836 <HAL_PCD_EP_Close+0x26>
 8002832:	2002      	movs	r0, #2
}
 8002834:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002836:	2201      	movs	r2, #1
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8002838:	4619      	mov	r1, r3
 800283a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800283c:	f884 23b8 	strb.w	r2, [r4, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8002840:	f002 f952 	bl	8004ae8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002844:	2000      	movs	r0, #0
 8002846:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 800284a:	bd10      	pop	{r4, pc}
 800284c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002850:	231c      	movs	r3, #28
 8002852:	fb03 0301 	mla	r3, r3, r1, r0
 8002856:	3338      	adds	r3, #56	; 0x38
 8002858:	e7e4      	b.n	8002824 <HAL_PCD_EP_Close+0x14>
 800285a:	bf00      	nop

0800285c <HAL_PCD_EP_Receive>:
{
 800285c:	b570      	push	{r4, r5, r6, lr}
 800285e:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep->xfer_count = 0;
 8002862:	2600      	movs	r6, #0
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002864:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 8002866:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800286a:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 800286e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002872:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
  ep->xfer_buff = pBuf;
 8002876:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
  ep->xfer_len = len;
 800287a:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
  ep->num = ep_addr & 0x7F;
 800287e:	f884 51f8 	strb.w	r5, [r4, #504]	; 0x1f8
  ep->xfer_count = 0;
 8002882:	f8c4 6210 	str.w	r6, [r4, #528]	; 0x210
  ep->is_in = 0;
 8002886:	f884 61f9 	strb.w	r6, [r4, #505]	; 0x1f9
  if (hpcd->Init.dma_enable == 1)
 800288a:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 800288c:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1)
 800288e:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8002890:	bf08      	it	eq
 8002892:	f8c4 2208 	streq.w	r2, [r4, #520]	; 0x208
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8002896:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 8002898:	b11d      	cbz	r5, 80028a2 <HAL_PCD_EP_Receive+0x46>
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 800289a:	f002 f94d 	bl	8004b38 <USB_EPStartXfer>
}
 800289e:	2000      	movs	r0, #0
 80028a0:	bd70      	pop	{r4, r5, r6, pc}
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 80028a2:	f002 fa2d 	bl	8004d00 <USB_EP0StartXfer>
}
 80028a6:	2000      	movs	r0, #0
 80028a8:	bd70      	pop	{r4, r5, r6, pc}
 80028aa:	bf00      	nop

080028ac <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 80028ac:	f001 010f 	and.w	r1, r1, #15
 80028b0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80028b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 80028b8:	f8b1 0210 	ldrh.w	r0, [r1, #528]	; 0x210
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop

080028c0 <HAL_PCD_EP_Transmit>:
{
 80028c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c2:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep->is_in = 1;
 80028c6:	2601      	movs	r6, #1
  ep->xfer_count = 0;
 80028c8:	2700      	movs	r7, #0
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80028ca:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 80028cc:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80028d0:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 80028d4:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80028d8:	3138      	adds	r1, #56	; 0x38
  ep->xfer_buff = pBuf;
 80028da:	6462      	str	r2, [r4, #68]	; 0x44
  ep->xfer_len = len;
 80028dc:	64e3      	str	r3, [r4, #76]	; 0x4c
  ep->num = ep_addr & 0x7F;
 80028de:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  ep->xfer_count = 0;
 80028e2:	6527      	str	r7, [r4, #80]	; 0x50
  ep->is_in = 1;
 80028e4:	f884 6039 	strb.w	r6, [r4, #57]	; 0x39
  if (hpcd->Init.dma_enable == 1)
 80028e8:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 80028ea:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1)
 80028ec:	42b3      	cmp	r3, r6
    ep->dma_addr = (uint32_t)pBuf;
 80028ee:	bf08      	it	eq
 80028f0:	64a2      	streq	r2, [r4, #72]	; 0x48
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 80028f2:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 80028f4:	b11d      	cbz	r5, 80028fe <HAL_PCD_EP_Transmit+0x3e>
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 80028f6:	f002 f91f 	bl	8004b38 <USB_EPStartXfer>
}
 80028fa:	2000      	movs	r0, #0
 80028fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 80028fe:	f002 f9ff 	bl	8004d00 <USB_EP0StartXfer>
}
 8002902:	2000      	movs	r0, #0
 8002904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002906:	bf00      	nop

08002908 <HAL_PCD_EP_SetStall>:
{
 8002908:	b538      	push	{r3, r4, r5, lr}
  if ((ep_addr & 0x0F) > hpcd->Init.dev_endpoints)
 800290a:	f001 020f 	and.w	r2, r1, #15
 800290e:	6843      	ldr	r3, [r0, #4]
 8002910:	429a      	cmp	r2, r3
 8002912:	d814      	bhi.n	800293e <HAL_PCD_EP_SetStall+0x36>
  if ((0x80 & ep_addr) == 0x80)
 8002914:	b24b      	sxtb	r3, r1
 8002916:	4605      	mov	r5, r0
 8002918:	460c      	mov	r4, r1
 800291a:	2b00      	cmp	r3, #0
 800291c:	db1b      	blt.n	8002956 <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr];
 800291e:	211c      	movs	r1, #28
 8002920:	fb01 0104 	mla	r1, r1, r4, r0
 8002924:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8002928:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 1;
 800292a:	2201      	movs	r2, #1
  ep->num   = ep_addr & 0x7F;
 800292c:	700c      	strb	r4, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800292e:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 1;
 8002930:	708a      	strb	r2, [r1, #2]
  __HAL_LOCK(hpcd);
 8002932:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 8002936:	4293      	cmp	r3, r2
 8002938:	d103      	bne.n	8002942 <HAL_PCD_EP_SetStall+0x3a>
 800293a:	2002      	movs	r0, #2
}
 800293c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800293e:	2001      	movs	r0, #1
 8002940:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8002942:	f885 23b8 	strb.w	r2, [r5, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 8002946:	6828      	ldr	r0, [r5, #0]
 8002948:	f002 fa8a 	bl	8004e60 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 800294c:	b154      	cbz	r4, 8002964 <HAL_PCD_EP_SetStall+0x5c>
  __HAL_UNLOCK(hpcd);
 800294e:	2000      	movs	r0, #0
 8002950:	f885 03b8 	strb.w	r0, [r5, #952]	; 0x3b8
  return HAL_OK;
 8002954:	bd38      	pop	{r3, r4, r5, pc}
 8002956:	f001 047f 	and.w	r4, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800295a:	211c      	movs	r1, #28
 800295c:	fb01 0104 	mla	r1, r1, r4, r0
 8002960:	3138      	adds	r1, #56	; 0x38
 8002962:	e7e1      	b.n	8002928 <HAL_PCD_EP_SetStall+0x20>
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002964:	f505 726f 	add.w	r2, r5, #956	; 0x3bc
 8002968:	7c29      	ldrb	r1, [r5, #16]
 800296a:	6828      	ldr	r0, [r5, #0]
 800296c:	f002 fb28 	bl	8004fc0 <USB_EP0_OutStart>
 8002970:	e7ed      	b.n	800294e <HAL_PCD_EP_SetStall+0x46>
 8002972:	bf00      	nop

08002974 <HAL_PCD_EP_ClrStall>:
{
 8002974:	b538      	push	{r3, r4, r5, lr}
  if ((ep_addr & 0x0F) > hpcd->Init.dev_endpoints)
 8002976:	f001 020f 	and.w	r2, r1, #15
 800297a:	6843      	ldr	r3, [r0, #4]
 800297c:	429a      	cmp	r2, r3
 800297e:	d813      	bhi.n	80029a8 <HAL_PCD_EP_ClrStall+0x34>
  if ((0x80 & ep_addr) == 0x80)
 8002980:	b24a      	sxtb	r2, r1
 8002982:	4604      	mov	r4, r0
 8002984:	2a00      	cmp	r2, #0
 8002986:	db1c      	blt.n	80029c2 <HAL_PCD_EP_ClrStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr];
 8002988:	231c      	movs	r3, #28
 800298a:	fb03 0301 	mla	r3, r3, r1, r0
 800298e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8002992:	0fd2      	lsrs	r2, r2, #31
  ep->is_stall = 0;
 8002994:	2500      	movs	r5, #0
  ep->num   = ep_addr & 0x7F;
 8002996:	7019      	strb	r1, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8002998:	705a      	strb	r2, [r3, #1]
  ep->is_stall = 0;
 800299a:	709d      	strb	r5, [r3, #2]
  __HAL_LOCK(hpcd);
 800299c:	f894 23b8 	ldrb.w	r2, [r4, #952]	; 0x3b8
 80029a0:	2a01      	cmp	r2, #1
 80029a2:	d103      	bne.n	80029ac <HAL_PCD_EP_ClrStall+0x38>
 80029a4:	2002      	movs	r0, #2
}
 80029a6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80029a8:	2001      	movs	r0, #1
 80029aa:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80029ac:	2201      	movs	r2, #1
  USB_EPClearStall(hpcd->Instance , ep);
 80029ae:	4619      	mov	r1, r3
 80029b0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80029b2:	f884 23b8 	strb.w	r2, [r4, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 80029b6:	f002 fa71 	bl	8004e9c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80029ba:	f884 53b8 	strb.w	r5, [r4, #952]	; 0x3b8
  return HAL_OK;
 80029be:	4628      	mov	r0, r5
 80029c0:	bd38      	pop	{r3, r4, r5, pc}
 80029c2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80029c6:	231c      	movs	r3, #28
 80029c8:	fb03 0301 	mla	r3, r3, r1, r0
 80029cc:	3338      	adds	r3, #56	; 0x38
 80029ce:	e7e0      	b.n	8002992 <HAL_PCD_EP_ClrStall+0x1e>

080029d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80029d0:	b470      	push	{r4, r5, r6}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80029d2:	6806      	ldr	r6, [r0, #0]
 80029d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
  
  if(fifo == 0)
 80029d6:	b1d1      	cbz	r1, 8002a0e <HAL_PCDEx_SetTxFiFo+0x3e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16) | Tx_Offset);
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80029d8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    for (i = 0; i < (fifo - 1); i++)
 80029da:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80029dc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0; i < (fifo - 1); i++)
 80029e0:	d00c      	beq.n	80029fc <HAL_PCDEx_SetTxFiFo+0x2c>
 80029e2:	2300      	movs	r3, #0
 80029e4:	4618      	mov	r0, r3
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80029e6:	3340      	adds	r3, #64	; 0x40
    for (i = 0; i < (fifo - 1); i++)
 80029e8:	3001      	adds	r0, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80029ea:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    for (i = 0; i < (fifo - 1); i++)
 80029ee:	b2c0      	uxtb	r0, r0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80029f0:	685d      	ldr	r5, [r3, #4]
    for (i = 0; i < (fifo - 1); i++)
 80029f2:	4288      	cmp	r0, r1
 80029f4:	4603      	mov	r3, r0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80029f6:	eb04 4415 	add.w	r4, r4, r5, lsr #16
    for (i = 0; i < (fifo - 1); i++)
 80029fa:	dbf4      	blt.n	80029e6 <HAL_PCDEx_SetTxFiFo+0x16>
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16) | Tx_Offset);
 80029fc:	3140      	adds	r1, #64	; 0x40
 80029fe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
  }
  
  return HAL_OK;
}
 8002a02:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16) | Tx_Offset);
 8002a04:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8002a08:	604c      	str	r4, [r1, #4]
}
 8002a0a:	bc70      	pop	{r4, r5, r6}
 8002a0c:	4770      	bx	lr
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16) | Tx_Offset);
 8002a0e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
}
 8002a12:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16) | Tx_Offset);
 8002a14:	62b4      	str	r4, [r6, #40]	; 0x28
}
 8002a16:	bc70      	pop	{r4, r5, r6}
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop

08002a1c <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8002a1c:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 8002a1e:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8002a20:	6259      	str	r1, [r3, #36]	; 0x24
}
 8002a22:	4770      	bx	lr

08002a24 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8002a24:	6803      	ldr	r3, [r0, #0]
  
  hpcd->lpm_active = ENABLE;
 8002a26:	2101      	movs	r1, #1
  hpcd->LPM_State = LPM_L0;
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a28:	4a08      	ldr	r2, [pc, #32]	; (8002a4c <HAL_PCDEx_ActivateLPM+0x28>)
{
 8002a2a:	b430      	push	{r4, r5}
  hpcd->lpm_active = ENABLE;
 8002a2c:	f8c0 13f4 	str.w	r1, [r0, #1012]	; 0x3f4
{
 8002a30:	4604      	mov	r4, r0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002a32:	6999      	ldr	r1, [r3, #24]
  hpcd->LPM_State = LPM_L0;
 8002a34:	2500      	movs	r5, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002a36:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  hpcd->LPM_State = LPM_L0;
 8002a3a:	f884 53ec 	strb.w	r5, [r4, #1004]	; 0x3ec
  
  return HAL_OK;  
}
 8002a3e:	4628      	mov	r0, r5
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002a40:	6199      	str	r1, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a42:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002a44:	430a      	orrs	r2, r1
}
 8002a46:	bc30      	pop	{r4, r5}
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a48:	655a      	str	r2, [r3, #84]	; 0x54
}
 8002a4a:	4770      	bx	lr
 8002a4c:	10000003 	.word	0x10000003

08002a50 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a50:	4a1b      	ldr	r2, [pc, #108]	; (8002ac0 <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a52:	4b1c      	ldr	r3, [pc, #112]	; (8002ac4 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a54:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002a56:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 8002a5a:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a5c:	6411      	str	r1, [r2, #64]	; 0x40
{
 8002a5e:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a60:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a62:	461c      	mov	r4, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a64:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002a68:	9201      	str	r2, [sp, #4]
 8002a6a:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002a72:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002a74:	f7fe fce8 	bl	8001448 <HAL_GetTick>
 8002a78:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a7a:	e005      	b.n	8002a88 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a7c:	f7fe fce4 	bl	8001448 <HAL_GetTick>
 8002a80:	1b40      	subs	r0, r0, r5
 8002a82:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002a86:	d817      	bhi.n	8002ab8 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a88:	6863      	ldr	r3, [r4, #4]
 8002a8a:	03da      	lsls	r2, r3, #15
 8002a8c:	d5f6      	bpl.n	8002a7c <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a8e:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a90:	4d0c      	ldr	r5, [pc, #48]	; (8002ac4 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a96:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002a98:	f7fe fcd6 	bl	8001448 <HAL_GetTick>
 8002a9c:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a9e:	e005      	b.n	8002aac <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002aa0:	f7fe fcd2 	bl	8001448 <HAL_GetTick>
 8002aa4:	1b00      	subs	r0, r0, r4
 8002aa6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002aaa:	d805      	bhi.n	8002ab8 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002aac:	686b      	ldr	r3, [r5, #4]
 8002aae:	039b      	lsls	r3, r3, #14
 8002ab0:	d5f6      	bpl.n	8002aa0 <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8002ab2:	2000      	movs	r0, #0
}
 8002ab4:	b003      	add	sp, #12
 8002ab6:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8002ab8:	2003      	movs	r0, #3
}
 8002aba:	b003      	add	sp, #12
 8002abc:	bd30      	pop	{r4, r5, pc}
 8002abe:	bf00      	nop
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	40007000 	.word	0x40007000

08002ac8 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ac8:	2800      	cmp	r0, #0
 8002aca:	f000 81cf 	beq.w	8002e6c <HAL_RCC_OscConfig+0x3a4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ace:	6803      	ldr	r3, [r0, #0]
{
 8002ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ad4:	07dd      	lsls	r5, r3, #31
{
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ada:	d530      	bpl.n	8002b3e <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002adc:	49aa      	ldr	r1, [pc, #680]	; (8002d88 <HAL_RCC_OscConfig+0x2c0>)
 8002ade:	688a      	ldr	r2, [r1, #8]
 8002ae0:	f002 020c 	and.w	r2, r2, #12
 8002ae4:	2a04      	cmp	r2, #4
 8002ae6:	f000 8119 	beq.w	8002d1c <HAL_RCC_OscConfig+0x254>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aea:	688a      	ldr	r2, [r1, #8]
 8002aec:	f002 020c 	and.w	r2, r2, #12
 8002af0:	2a08      	cmp	r2, #8
 8002af2:	f000 810f 	beq.w	8002d14 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af6:	6863      	ldr	r3, [r4, #4]
 8002af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002afc:	f000 8152 	beq.w	8002da4 <HAL_RCC_OscConfig+0x2dc>
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 80db 	beq.w	8002cbc <HAL_RCC_OscConfig+0x1f4>
 8002b06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b0a:	4b9f      	ldr	r3, [pc, #636]	; (8002d88 <HAL_RCC_OscConfig+0x2c0>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	f000 81a5 	beq.w	8002e5c <HAL_RCC_OscConfig+0x394>
 8002b12:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b1e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b20:	f7fe fc92 	bl	8001448 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b24:	4d98      	ldr	r5, [pc, #608]	; (8002d88 <HAL_RCC_OscConfig+0x2c0>)
        tickstart = HAL_GetTick();
 8002b26:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b28:	e005      	b.n	8002b36 <HAL_RCC_OscConfig+0x6e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b2a:	f7fe fc8d 	bl	8001448 <HAL_GetTick>
 8002b2e:	1b80      	subs	r0, r0, r6
 8002b30:	2864      	cmp	r0, #100	; 0x64
 8002b32:	f200 80eb 	bhi.w	8002d0c <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b36:	682b      	ldr	r3, [r5, #0]
 8002b38:	039a      	lsls	r2, r3, #14
 8002b3a:	d5f6      	bpl.n	8002b2a <HAL_RCC_OscConfig+0x62>
 8002b3c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b3e:	079f      	lsls	r7, r3, #30
 8002b40:	d529      	bpl.n	8002b96 <HAL_RCC_OscConfig+0xce>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b42:	4a91      	ldr	r2, [pc, #580]	; (8002d88 <HAL_RCC_OscConfig+0x2c0>)
 8002b44:	6891      	ldr	r1, [r2, #8]
 8002b46:	f011 0f0c 	tst.w	r1, #12
 8002b4a:	f000 8082 	beq.w	8002c52 <HAL_RCC_OscConfig+0x18a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b4e:	6891      	ldr	r1, [r2, #8]
 8002b50:	f001 010c 	and.w	r1, r1, #12
 8002b54:	2908      	cmp	r1, #8
 8002b56:	d079      	beq.n	8002c4c <HAL_RCC_OscConfig+0x184>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b58:	68e3      	ldr	r3, [r4, #12]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 8109 	beq.w	8002d72 <HAL_RCC_OscConfig+0x2aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b60:	4b89      	ldr	r3, [pc, #548]	; (8002d88 <HAL_RCC_OscConfig+0x2c0>)
 8002b62:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b64:	461d      	mov	r5, r3
        __HAL_RCC_HSI_ENABLE();
 8002b66:	f042 0201 	orr.w	r2, r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002b6c:	f7fe fc6c 	bl	8001448 <HAL_GetTick>
 8002b70:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b72:	e005      	b.n	8002b80 <HAL_RCC_OscConfig+0xb8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b74:	f7fe fc68 	bl	8001448 <HAL_GetTick>
 8002b78:	1b80      	subs	r0, r0, r6
 8002b7a:	2802      	cmp	r0, #2
 8002b7c:	f200 80c6 	bhi.w	8002d0c <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b80:	682b      	ldr	r3, [r5, #0]
 8002b82:	0798      	lsls	r0, r3, #30
 8002b84:	d5f6      	bpl.n	8002b74 <HAL_RCC_OscConfig+0xac>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b86:	682b      	ldr	r3, [r5, #0]
 8002b88:	6922      	ldr	r2, [r4, #16]
 8002b8a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002b8e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002b92:	602b      	str	r3, [r5, #0]
 8002b94:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b96:	071a      	lsls	r2, r3, #28
 8002b98:	d41f      	bmi.n	8002bda <HAL_RCC_OscConfig+0x112>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b9a:	075d      	lsls	r5, r3, #29
 8002b9c:	d536      	bpl.n	8002c0c <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b9e:	4b7a      	ldr	r3, [pc, #488]	; (8002d88 <HAL_RCC_OscConfig+0x2c0>)
 8002ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ba2:	00d0      	lsls	r0, r2, #3
 8002ba4:	d573      	bpl.n	8002c8e <HAL_RCC_OscConfig+0x1c6>
  FlagStatus pwrclkchanged = RESET;
 8002ba6:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ba8:	4b78      	ldr	r3, [pc, #480]	; (8002d8c <HAL_RCC_OscConfig+0x2c4>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	05d1      	lsls	r1, r2, #23
 8002bae:	f140 809c 	bpl.w	8002cea <HAL_RCC_OscConfig+0x222>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bb2:	68a3      	ldr	r3, [r4, #8]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	f000 80fb 	beq.w	8002db0 <HAL_RCC_OscConfig+0x2e8>
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 80b8 	beq.w	8002d30 <HAL_RCC_OscConfig+0x268>
 8002bc0:	2b05      	cmp	r3, #5
 8002bc2:	4b71      	ldr	r3, [pc, #452]	; (8002d88 <HAL_RCC_OscConfig+0x2c0>)
 8002bc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bc6:	f000 810c 	beq.w	8002de2 <HAL_RCC_OscConfig+0x31a>
 8002bca:	f022 0201 	bic.w	r2, r2, #1
 8002bce:	671a      	str	r2, [r3, #112]	; 0x70
 8002bd0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bd2:	f022 0204 	bic.w	r2, r2, #4
 8002bd6:	671a      	str	r2, [r3, #112]	; 0x70
 8002bd8:	e0ef      	b.n	8002dba <HAL_RCC_OscConfig+0x2f2>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bda:	6963      	ldr	r3, [r4, #20]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d043      	beq.n	8002c68 <HAL_RCC_OscConfig+0x1a0>
      __HAL_RCC_LSI_ENABLE();
 8002be0:	4b69      	ldr	r3, [pc, #420]	; (8002d88 <HAL_RCC_OscConfig+0x2c0>)
 8002be2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be4:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002bec:	f7fe fc2c 	bl	8001448 <HAL_GetTick>
 8002bf0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bf2:	e005      	b.n	8002c00 <HAL_RCC_OscConfig+0x138>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bf4:	f7fe fc28 	bl	8001448 <HAL_GetTick>
 8002bf8:	1b80      	subs	r0, r0, r6
 8002bfa:	2802      	cmp	r0, #2
 8002bfc:	f200 8086 	bhi.w	8002d0c <HAL_RCC_OscConfig+0x244>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c00:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002c02:	079b      	lsls	r3, r3, #30
 8002c04:	d5f6      	bpl.n	8002bf4 <HAL_RCC_OscConfig+0x12c>
 8002c06:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c08:	075d      	lsls	r5, r3, #29
 8002c0a:	d4c8      	bmi.n	8002b9e <HAL_RCC_OscConfig+0xd6>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c0c:	69a2      	ldr	r2, [r4, #24]
 8002c0e:	b1ca      	cbz	r2, 8002c44 <HAL_RCC_OscConfig+0x17c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c10:	4b5d      	ldr	r3, [pc, #372]	; (8002d88 <HAL_RCC_OscConfig+0x2c0>)
 8002c12:	6899      	ldr	r1, [r3, #8]
 8002c14:	f001 010c 	and.w	r1, r1, #12
 8002c18:	2908      	cmp	r1, #8
 8002c1a:	d021      	beq.n	8002c60 <HAL_RCC_OscConfig+0x198>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c1c:	2a02      	cmp	r2, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1e:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c20:	f000 80e7 	beq.w	8002df2 <HAL_RCC_OscConfig+0x32a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c24:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c28:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 8002c2a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002c2c:	f7fe fc0c 	bl	8001448 <HAL_GetTick>
 8002c30:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c32:	e004      	b.n	8002c3e <HAL_RCC_OscConfig+0x176>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c34:	f7fe fc08 	bl	8001448 <HAL_GetTick>
 8002c38:	1b40      	subs	r0, r0, r5
 8002c3a:	2802      	cmp	r0, #2
 8002c3c:	d866      	bhi.n	8002d0c <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3e:	6823      	ldr	r3, [r4, #0]
 8002c40:	019b      	lsls	r3, r3, #6
 8002c42:	d4f7      	bmi.n	8002c34 <HAL_RCC_OscConfig+0x16c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002c44:	2000      	movs	r0, #0
}
 8002c46:	b002      	add	sp, #8
 8002c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c4c:	6852      	ldr	r2, [r2, #4]
 8002c4e:	0256      	lsls	r6, r2, #9
 8002c50:	d482      	bmi.n	8002b58 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c52:	4a4d      	ldr	r2, [pc, #308]	; (8002d88 <HAL_RCC_OscConfig+0x2c0>)
 8002c54:	6812      	ldr	r2, [r2, #0]
 8002c56:	0795      	lsls	r5, r2, #30
 8002c58:	d524      	bpl.n	8002ca4 <HAL_RCC_OscConfig+0x1dc>
 8002c5a:	68e2      	ldr	r2, [r4, #12]
 8002c5c:	2a01      	cmp	r2, #1
 8002c5e:	d021      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x1dc>
    return HAL_ERROR;
 8002c60:	2001      	movs	r0, #1
}
 8002c62:	b002      	add	sp, #8
 8002c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8002c68:	4b47      	ldr	r3, [pc, #284]	; (8002d88 <HAL_RCC_OscConfig+0x2c0>)
 8002c6a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c6c:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 8002c6e:	f022 0201 	bic.w	r2, r2, #1
 8002c72:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002c74:	f7fe fbe8 	bl	8001448 <HAL_GetTick>
 8002c78:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c7a:	e004      	b.n	8002c86 <HAL_RCC_OscConfig+0x1be>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c7c:	f7fe fbe4 	bl	8001448 <HAL_GetTick>
 8002c80:	1b80      	subs	r0, r0, r6
 8002c82:	2802      	cmp	r0, #2
 8002c84:	d842      	bhi.n	8002d0c <HAL_RCC_OscConfig+0x244>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c86:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002c88:	079f      	lsls	r7, r3, #30
 8002c8a:	d4f7      	bmi.n	8002c7c <HAL_RCC_OscConfig+0x1b4>
 8002c8c:	e7bb      	b.n	8002c06 <HAL_RCC_OscConfig+0x13e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8002c90:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c92:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c96:	641a      	str	r2, [r3, #64]	; 0x40
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9e:	9301      	str	r3, [sp, #4]
 8002ca0:	9b01      	ldr	r3, [sp, #4]
 8002ca2:	e781      	b.n	8002ba8 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca4:	4938      	ldr	r1, [pc, #224]	; (8002d88 <HAL_RCC_OscConfig+0x2c0>)
 8002ca6:	6920      	ldr	r0, [r4, #16]
 8002ca8:	680a      	ldr	r2, [r1, #0]
 8002caa:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002cae:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002cb2:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb4:	071a      	lsls	r2, r3, #28
 8002cb6:	f57f af70 	bpl.w	8002b9a <HAL_RCC_OscConfig+0xd2>
 8002cba:	e78e      	b.n	8002bda <HAL_RCC_OscConfig+0x112>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cbc:	4b32      	ldr	r3, [pc, #200]	; (8002d88 <HAL_RCC_OscConfig+0x2c0>)
 8002cbe:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc0:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cc2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002cd0:	f7fe fbba 	bl	8001448 <HAL_GetTick>
 8002cd4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cd6:	e004      	b.n	8002ce2 <HAL_RCC_OscConfig+0x21a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd8:	f7fe fbb6 	bl	8001448 <HAL_GetTick>
 8002cdc:	1b80      	subs	r0, r0, r6
 8002cde:	2864      	cmp	r0, #100	; 0x64
 8002ce0:	d814      	bhi.n	8002d0c <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ce2:	682b      	ldr	r3, [r5, #0]
 8002ce4:	039b      	lsls	r3, r3, #14
 8002ce6:	d4f7      	bmi.n	8002cd8 <HAL_RCC_OscConfig+0x210>
 8002ce8:	e728      	b.n	8002b3c <HAL_RCC_OscConfig+0x74>
      PWR->CR1 |= PWR_CR1_DBP;
 8002cea:	681a      	ldr	r2, [r3, #0]
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cec:	461e      	mov	r6, r3
      PWR->CR1 |= PWR_CR1_DBP;
 8002cee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cf2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002cf4:	f7fe fba8 	bl	8001448 <HAL_GetTick>
 8002cf8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cfa:	6833      	ldr	r3, [r6, #0]
 8002cfc:	05da      	lsls	r2, r3, #23
 8002cfe:	f53f af58 	bmi.w	8002bb2 <HAL_RCC_OscConfig+0xea>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d02:	f7fe fba1 	bl	8001448 <HAL_GetTick>
 8002d06:	1bc0      	subs	r0, r0, r7
 8002d08:	2864      	cmp	r0, #100	; 0x64
 8002d0a:	d9f6      	bls.n	8002cfa <HAL_RCC_OscConfig+0x232>
            return HAL_TIMEOUT;
 8002d0c:	2003      	movs	r0, #3
}
 8002d0e:	b002      	add	sp, #8
 8002d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d14:	684a      	ldr	r2, [r1, #4]
 8002d16:	0250      	lsls	r0, r2, #9
 8002d18:	f57f aeed 	bpl.w	8002af6 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d1c:	4a1a      	ldr	r2, [pc, #104]	; (8002d88 <HAL_RCC_OscConfig+0x2c0>)
 8002d1e:	6812      	ldr	r2, [r2, #0]
 8002d20:	0391      	lsls	r1, r2, #14
 8002d22:	f57f af0c 	bpl.w	8002b3e <HAL_RCC_OscConfig+0x76>
 8002d26:	6862      	ldr	r2, [r4, #4]
 8002d28:	2a00      	cmp	r2, #0
 8002d2a:	f47f af08 	bne.w	8002b3e <HAL_RCC_OscConfig+0x76>
 8002d2e:	e797      	b.n	8002c60 <HAL_RCC_OscConfig+0x198>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d30:	4b15      	ldr	r3, [pc, #84]	; (8002d88 <HAL_RCC_OscConfig+0x2c0>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d32:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d38:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d3a:	f022 0201 	bic.w	r2, r2, #1
 8002d3e:	671a      	str	r2, [r3, #112]	; 0x70
 8002d40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d42:	f022 0204 	bic.w	r2, r2, #4
 8002d46:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002d48:	f7fe fb7e 	bl	8001448 <HAL_GetTick>
 8002d4c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d4e:	e004      	b.n	8002d5a <HAL_RCC_OscConfig+0x292>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d50:	f7fe fb7a 	bl	8001448 <HAL_GetTick>
 8002d54:	1bc0      	subs	r0, r0, r7
 8002d56:	4540      	cmp	r0, r8
 8002d58:	d8d8      	bhi.n	8002d0c <HAL_RCC_OscConfig+0x244>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d5a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002d5c:	0798      	lsls	r0, r3, #30
 8002d5e:	d4f7      	bmi.n	8002d50 <HAL_RCC_OscConfig+0x288>
    if(pwrclkchanged == SET)
 8002d60:	2d00      	cmp	r5, #0
 8002d62:	f43f af53 	beq.w	8002c0c <HAL_RCC_OscConfig+0x144>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d66:	4a08      	ldr	r2, [pc, #32]	; (8002d88 <HAL_RCC_OscConfig+0x2c0>)
 8002d68:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002d6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d6e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d70:	e74c      	b.n	8002c0c <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_HSI_DISABLE();
 8002d72:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <HAL_RCC_OscConfig+0x2c0>)
 8002d74:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d76:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8002d78:	f022 0201 	bic.w	r2, r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002d7e:	f7fe fb63 	bl	8001448 <HAL_GetTick>
 8002d82:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d84:	e009      	b.n	8002d9a <HAL_RCC_OscConfig+0x2d2>
 8002d86:	bf00      	nop
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	40007000 	.word	0x40007000
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d90:	f7fe fb5a 	bl	8001448 <HAL_GetTick>
 8002d94:	1b80      	subs	r0, r0, r6
 8002d96:	2802      	cmp	r0, #2
 8002d98:	d8b8      	bhi.n	8002d0c <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9a:	682b      	ldr	r3, [r5, #0]
 8002d9c:	0799      	lsls	r1, r3, #30
 8002d9e:	d4f7      	bmi.n	8002d90 <HAL_RCC_OscConfig+0x2c8>
 8002da0:	6823      	ldr	r3, [r4, #0]
 8002da2:	e6f8      	b.n	8002b96 <HAL_RCC_OscConfig+0xce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002da4:	4a32      	ldr	r2, [pc, #200]	; (8002e70 <HAL_RCC_OscConfig+0x3a8>)
 8002da6:	6813      	ldr	r3, [r2, #0]
 8002da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	e6b7      	b.n	8002b20 <HAL_RCC_OscConfig+0x58>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db0:	4a2f      	ldr	r2, [pc, #188]	; (8002e70 <HAL_RCC_OscConfig+0x3a8>)
 8002db2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002dba:	f7fe fb45 	bl	8001448 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dbe:	4e2c      	ldr	r6, [pc, #176]	; (8002e70 <HAL_RCC_OscConfig+0x3a8>)
      tickstart = HAL_GetTick();
 8002dc0:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dc2:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc6:	e005      	b.n	8002dd4 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dc8:	f7fe fb3e 	bl	8001448 <HAL_GetTick>
 8002dcc:	eba0 0008 	sub.w	r0, r0, r8
 8002dd0:	42b8      	cmp	r0, r7
 8002dd2:	d89b      	bhi.n	8002d0c <HAL_RCC_OscConfig+0x244>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd4:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002dd6:	079b      	lsls	r3, r3, #30
 8002dd8:	d5f6      	bpl.n	8002dc8 <HAL_RCC_OscConfig+0x300>
    if(pwrclkchanged == SET)
 8002dda:	2d00      	cmp	r5, #0
 8002ddc:	f43f af16 	beq.w	8002c0c <HAL_RCC_OscConfig+0x144>
 8002de0:	e7c1      	b.n	8002d66 <HAL_RCC_OscConfig+0x29e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002de2:	f042 0204 	orr.w	r2, r2, #4
 8002de6:	671a      	str	r2, [r3, #112]	; 0x70
 8002de8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002dea:	f042 0201 	orr.w	r2, r2, #1
 8002dee:	671a      	str	r2, [r3, #112]	; 0x70
 8002df0:	e7e3      	b.n	8002dba <HAL_RCC_OscConfig+0x2f2>
        __HAL_RCC_PLL_DISABLE();
 8002df2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df6:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8002df8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002dfa:	f7fe fb25 	bl	8001448 <HAL_GetTick>
 8002dfe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e00:	e005      	b.n	8002e0e <HAL_RCC_OscConfig+0x346>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e02:	f7fe fb21 	bl	8001448 <HAL_GetTick>
 8002e06:	1b80      	subs	r0, r0, r6
 8002e08:	2802      	cmp	r0, #2
 8002e0a:	f63f af7f 	bhi.w	8002d0c <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0e:	682b      	ldr	r3, [r5, #0]
 8002e10:	0199      	lsls	r1, r3, #6
 8002e12:	d4f6      	bmi.n	8002e02 <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e14:	6a22      	ldr	r2, [r4, #32]
 8002e16:	69e3      	ldr	r3, [r4, #28]
 8002e18:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002e1e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002e20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e24:	0852      	lsrs	r2, r2, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e26:	4c12      	ldr	r4, [pc, #72]	; (8002e70 <HAL_RCC_OscConfig+0x3a8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e28:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002e2c:	3a01      	subs	r2, #1
 8002e2e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002e32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002e36:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002e38:	682b      	ldr	r3, [r5, #0]
 8002e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e3e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002e40:	f7fe fb02 	bl	8001448 <HAL_GetTick>
 8002e44:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e46:	e005      	b.n	8002e54 <HAL_RCC_OscConfig+0x38c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e48:	f7fe fafe 	bl	8001448 <HAL_GetTick>
 8002e4c:	1b40      	subs	r0, r0, r5
 8002e4e:	2802      	cmp	r0, #2
 8002e50:	f63f af5c 	bhi.w	8002d0c <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e54:	6823      	ldr	r3, [r4, #0]
 8002e56:	019a      	lsls	r2, r3, #6
 8002e58:	d5f6      	bpl.n	8002e48 <HAL_RCC_OscConfig+0x380>
 8002e5a:	e6f3      	b.n	8002c44 <HAL_RCC_OscConfig+0x17c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e5c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	e659      	b.n	8002b20 <HAL_RCC_OscConfig+0x58>
    return HAL_ERROR;
 8002e6c:	2001      	movs	r0, #1
}
 8002e6e:	4770      	bx	lr
 8002e70:	40023800 	.word	0x40023800

08002e74 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e74:	b178      	cbz	r0, 8002e96 <HAL_RCC_ClockConfig+0x22>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e76:	4a5e      	ldr	r2, [pc, #376]	; (8002ff0 <HAL_RCC_ClockConfig+0x17c>)
 8002e78:	6813      	ldr	r3, [r2, #0]
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	428b      	cmp	r3, r1
 8002e80:	d20b      	bcs.n	8002e9a <HAL_RCC_ClockConfig+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e82:	6813      	ldr	r3, [r2, #0]
 8002e84:	f023 030f 	bic.w	r3, r3, #15
 8002e88:	430b      	orrs	r3, r1
 8002e8a:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8c:	6813      	ldr	r3, [r2, #0]
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	4299      	cmp	r1, r3
 8002e94:	d001      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8002e96:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 8002e98:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e9a:	6803      	ldr	r3, [r0, #0]
{
 8002e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea0:	079d      	lsls	r5, r3, #30
 8002ea2:	d514      	bpl.n	8002ece <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea4:	075c      	lsls	r4, r3, #29
 8002ea6:	d504      	bpl.n	8002eb2 <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ea8:	4c52      	ldr	r4, [pc, #328]	; (8002ff4 <HAL_RCC_ClockConfig+0x180>)
 8002eaa:	68a2      	ldr	r2, [r4, #8]
 8002eac:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8002eb0:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb2:	071a      	lsls	r2, r3, #28
 8002eb4:	d504      	bpl.n	8002ec0 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002eb6:	4c4f      	ldr	r4, [pc, #316]	; (8002ff4 <HAL_RCC_ClockConfig+0x180>)
 8002eb8:	68a2      	ldr	r2, [r4, #8]
 8002eba:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8002ebe:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec0:	4c4c      	ldr	r4, [pc, #304]	; (8002ff4 <HAL_RCC_ClockConfig+0x180>)
 8002ec2:	6885      	ldr	r5, [r0, #8]
 8002ec4:	68a2      	ldr	r2, [r4, #8]
 8002ec6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002eca:	432a      	orrs	r2, r5
 8002ecc:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ece:	07df      	lsls	r7, r3, #31
 8002ed0:	4604      	mov	r4, r0
 8002ed2:	460d      	mov	r5, r1
 8002ed4:	d521      	bpl.n	8002f1a <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ed6:	6842      	ldr	r2, [r0, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed8:	4b46      	ldr	r3, [pc, #280]	; (8002ff4 <HAL_RCC_ClockConfig+0x180>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eda:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002edc:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ede:	d07b      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x164>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ee0:	2a02      	cmp	r2, #2
 8002ee2:	d071      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x154>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee4:	0799      	lsls	r1, r3, #30
 8002ee6:	d528      	bpl.n	8002f3a <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ee8:	4942      	ldr	r1, [pc, #264]	; (8002ff4 <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eea:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eee:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef0:	460e      	mov	r6, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ef2:	f023 0303 	bic.w	r3, r3, #3
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002efa:	f7fe faa5 	bl	8001448 <HAL_GetTick>
 8002efe:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f00:	e004      	b.n	8002f0c <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f02:	f7fe faa1 	bl	8001448 <HAL_GetTick>
 8002f06:	1bc0      	subs	r0, r0, r7
 8002f08:	4540      	cmp	r0, r8
 8002f0a:	d862      	bhi.n	8002fd2 <HAL_RCC_ClockConfig+0x15e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f0c:	68b3      	ldr	r3, [r6, #8]
 8002f0e:	6862      	ldr	r2, [r4, #4]
 8002f10:	f003 030c 	and.w	r3, r3, #12
 8002f14:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002f18:	d1f3      	bne.n	8002f02 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f1a:	4a35      	ldr	r2, [pc, #212]	; (8002ff0 <HAL_RCC_ClockConfig+0x17c>)
 8002f1c:	6813      	ldr	r3, [r2, #0]
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	429d      	cmp	r5, r3
 8002f24:	d20c      	bcs.n	8002f40 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f26:	6813      	ldr	r3, [r2, #0]
 8002f28:	f023 030f 	bic.w	r3, r3, #15
 8002f2c:	432b      	orrs	r3, r5
 8002f2e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f30:	6813      	ldr	r3, [r2, #0]
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	429d      	cmp	r5, r3
 8002f38:	d002      	beq.n	8002f40 <HAL_RCC_ClockConfig+0xcc>
    return HAL_ERROR;
 8002f3a:	2001      	movs	r0, #1
 8002f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f40:	6823      	ldr	r3, [r4, #0]
 8002f42:	075a      	lsls	r2, r3, #29
 8002f44:	d506      	bpl.n	8002f54 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f46:	492b      	ldr	r1, [pc, #172]	; (8002ff4 <HAL_RCC_ClockConfig+0x180>)
 8002f48:	68e0      	ldr	r0, [r4, #12]
 8002f4a:	688a      	ldr	r2, [r1, #8]
 8002f4c:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8002f50:	4302      	orrs	r2, r0
 8002f52:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f54:	071b      	lsls	r3, r3, #28
 8002f56:	d507      	bpl.n	8002f68 <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f58:	4a26      	ldr	r2, [pc, #152]	; (8002ff4 <HAL_RCC_ClockConfig+0x180>)
 8002f5a:	6921      	ldr	r1, [r4, #16]
 8002f5c:	6893      	ldr	r3, [r2, #8]
 8002f5e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002f62:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002f66:	6093      	str	r3, [r2, #8]
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f68:	4922      	ldr	r1, [pc, #136]	; (8002ff4 <HAL_RCC_ClockConfig+0x180>)
 8002f6a:	688b      	ldr	r3, [r1, #8]
 8002f6c:	f003 030c 	and.w	r3, r3, #12
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	d019      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x134>
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d12a      	bne.n	8002fce <HAL_RCC_ClockConfig+0x15a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f78:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002f7a:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f7c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f80:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002f82:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8002f86:	d12a      	bne.n	8002fde <HAL_RCC_ClockConfig+0x16a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f88:	481b      	ldr	r0, [pc, #108]	; (8002ff8 <HAL_RCC_ClockConfig+0x184>)
 8002f8a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002f8e:	fba1 0100 	umull	r0, r1, r1, r0
 8002f92:	f7fd f93d 	bl	8000210 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002f96:	4b17      	ldr	r3, [pc, #92]	; (8002ff4 <HAL_RCC_ClockConfig+0x180>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fa6:	e000      	b.n	8002faa <HAL_RCC_ClockConfig+0x136>
      sysclockfreq = HSE_VALUE;
 8002fa8:	4b14      	ldr	r3, [pc, #80]	; (8002ffc <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002faa:	4a12      	ldr	r2, [pc, #72]	; (8002ff4 <HAL_RCC_ClockConfig+0x180>)
  HAL_InitTick (TICK_INT_PRIORITY);
 8002fac:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fae:	4c14      	ldr	r4, [pc, #80]	; (8003000 <HAL_RCC_ClockConfig+0x18c>)
 8002fb0:	6892      	ldr	r2, [r2, #8]
 8002fb2:	4914      	ldr	r1, [pc, #80]	; (8003004 <HAL_RCC_ClockConfig+0x190>)
 8002fb4:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002fb8:	5ca2      	ldrb	r2, [r4, r2]
 8002fba:	40d3      	lsrs	r3, r2
 8002fbc:	600b      	str	r3, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002fbe:	f003 fe71 	bl	8006ca4 <HAL_InitTick>
  return HAL_OK;
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc8:	0198      	lsls	r0, r3, #6
 8002fca:	d48d      	bmi.n	8002ee8 <HAL_RCC_ClockConfig+0x74>
 8002fcc:	e7b5      	b.n	8002f3a <HAL_RCC_ClockConfig+0xc6>
      sysclockfreq = HSI_VALUE;
 8002fce:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <HAL_RCC_ClockConfig+0x184>)
 8002fd0:	e7eb      	b.n	8002faa <HAL_RCC_ClockConfig+0x136>
        return HAL_TIMEOUT;
 8002fd2:	2003      	movs	r0, #3
}
 8002fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd8:	039e      	lsls	r6, r3, #14
 8002fda:	d485      	bmi.n	8002ee8 <HAL_RCC_ClockConfig+0x74>
 8002fdc:	e7ad      	b.n	8002f3a <HAL_RCC_ClockConfig+0xc6>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fde:	4807      	ldr	r0, [pc, #28]	; (8002ffc <HAL_RCC_ClockConfig+0x188>)
 8002fe0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	fba1 0100 	umull	r0, r1, r1, r0
 8002fea:	f7fd f911 	bl	8000210 <__aeabi_uldivmod>
 8002fee:	e7d2      	b.n	8002f96 <HAL_RCC_ClockConfig+0x122>
 8002ff0:	40023c00 	.word	0x40023c00
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	00f42400 	.word	0x00f42400
 8002ffc:	007a1200 	.word	0x007a1200
 8003000:	080084b0 	.word	0x080084b0
 8003004:	2000011c 	.word	0x2000011c

08003008 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003008:	4916      	ldr	r1, [pc, #88]	; (8003064 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800300a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800300c:	688b      	ldr	r3, [r1, #8]
 800300e:	f003 030c 	and.w	r3, r3, #12
 8003012:	2b04      	cmp	r3, #4
 8003014:	d01b      	beq.n	800304e <HAL_RCC_GetSysClockFreq+0x46>
 8003016:	2b08      	cmp	r3, #8
 8003018:	d117      	bne.n	800304a <HAL_RCC_GetSysClockFreq+0x42>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800301a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800301c:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800301e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003022:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003024:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8003028:	d113      	bne.n	8003052 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800302a:	480f      	ldr	r0, [pc, #60]	; (8003068 <HAL_RCC_GetSysClockFreq+0x60>)
 800302c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003030:	fba1 0100 	umull	r0, r1, r1, r0
 8003034:	f7fd f8ec 	bl	8000210 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8003038:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <HAL_RCC_GetSysClockFreq+0x5c>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003040:	3301      	adds	r3, #1
 8003042:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8003044:	fbb0 f0f3 	udiv	r0, r0, r3
 8003048:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800304a:	4807      	ldr	r0, [pc, #28]	; (8003068 <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800304c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800304e:	4807      	ldr	r0, [pc, #28]	; (800306c <HAL_RCC_GetSysClockFreq+0x64>)
 8003050:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003052:	4806      	ldr	r0, [pc, #24]	; (800306c <HAL_RCC_GetSysClockFreq+0x64>)
 8003054:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003058:	2300      	movs	r3, #0
 800305a:	fba1 0100 	umull	r0, r1, r1, r0
 800305e:	f7fd f8d7 	bl	8000210 <__aeabi_uldivmod>
 8003062:	e7e9      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0x30>
 8003064:	40023800 	.word	0x40023800
 8003068:	00f42400 	.word	0x00f42400
 800306c:	007a1200 	.word	0x007a1200

08003070 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8003070:	4b01      	ldr	r3, [pc, #4]	; (8003078 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	2000011c 	.word	0x2000011c

0800307c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800307c:	4b04      	ldr	r3, [pc, #16]	; (8003090 <HAL_RCC_GetPCLK1Freq+0x14>)
 800307e:	4a05      	ldr	r2, [pc, #20]	; (8003094 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003080:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003082:	4905      	ldr	r1, [pc, #20]	; (8003098 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003084:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003088:	6808      	ldr	r0, [r1, #0]
 800308a:	5cd3      	ldrb	r3, [r2, r3]
}
 800308c:	40d8      	lsrs	r0, r3
 800308e:	4770      	bx	lr
 8003090:	40023800 	.word	0x40023800
 8003094:	080084c0 	.word	0x080084c0
 8003098:	2000011c 	.word	0x2000011c

0800309c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800309c:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <HAL_RCC_GetPCLK2Freq+0x14>)
 800309e:	4a05      	ldr	r2, [pc, #20]	; (80030b4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80030a0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80030a2:	4905      	ldr	r1, [pc, #20]	; (80030b8 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030a4:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80030a8:	6808      	ldr	r0, [r1, #0]
 80030aa:	5cd3      	ldrb	r3, [r2, r3]
}
 80030ac:	40d8      	lsrs	r0, r3
 80030ae:	4770      	bx	lr
 80030b0:	40023800 	.word	0x40023800
 80030b4:	080084c0 	.word	0x080084c0
 80030b8:	2000011c 	.word	0x2000011c

080030bc <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030bc:	4b0e      	ldr	r3, [pc, #56]	; (80030f8 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030be:	220f      	movs	r2, #15
 80030c0:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	f002 0203 	and.w	r2, r2, #3
 80030c8:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80030d0:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80030d8:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	08db      	lsrs	r3, r3, #3
{
 80030de:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80030e0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030e4:	4c05      	ldr	r4, [pc, #20]	; (80030fc <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80030e6:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030e8:	6823      	ldr	r3, [r4, #0]
}
 80030ea:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	600b      	str	r3, [r1, #0]
}
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	40023800 	.word	0x40023800
 80030fc:	40023c00 	.word	0x40023c00

08003100 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003100:	6803      	ldr	r3, [r0, #0]
{
 8003102:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003106:	f013 0501 	ands.w	r5, r3, #1
{
 800310a:	b083      	sub	sp, #12
 800310c:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800310e:	d00b      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003110:	4ab6      	ldr	r2, [pc, #728]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003112:	6891      	ldr	r1, [r2, #8]
 8003114:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8003118:	6091      	str	r1, [r2, #8]
 800311a:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800311c:	6891      	ldr	r1, [r2, #8]
 800311e:	4329      	orrs	r1, r5
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003120:	fab5 f585 	clz	r5, r5
 8003124:	096d      	lsrs	r5, r5, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003126:	6091      	str	r1, [r2, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003128:	f413 2600 	ands.w	r6, r3, #524288	; 0x80000
 800312c:	d010      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800312e:	49af      	ldr	r1, [pc, #700]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003130:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8003132:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003136:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800313a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800313e:	ea42 0206 	orr.w	r2, r2, r6
 8003142:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003146:	f000 819c 	beq.w	8003482 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800314a:	fab6 f686 	clz	r6, r6
 800314e:	0976      	lsrs	r6, r6, #5
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003150:	02d9      	lsls	r1, r3, #11
 8003152:	d510      	bpl.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003154:	48a5      	ldr	r0, [pc, #660]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003156:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003158:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800315c:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003160:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003164:	ea42 0201 	orr.w	r2, r2, r1
 8003168:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800316c:	f000 8187 	beq.w	800347e <HAL_RCCEx_PeriphCLKConfig+0x37e>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 8003170:	2900      	cmp	r1, #0
 8003172:	bf08      	it	eq
 8003174:	2601      	moveq	r6, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 8003176:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800317a:	bf18      	it	ne
 800317c:	2501      	movne	r5, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800317e:	069a      	lsls	r2, r3, #26
 8003180:	f100 8136 	bmi.w	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003184:	06d9      	lsls	r1, r3, #27
 8003186:	d50c      	bpl.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003188:	4a98      	ldr	r2, [pc, #608]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800318a:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800318e:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8003192:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8003196:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800319a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800319c:	4301      	orrs	r1, r0
 800319e:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031a2:	045a      	lsls	r2, r3, #17
 80031a4:	d508      	bpl.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031a6:	4991      	ldr	r1, [pc, #580]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80031a8:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80031aa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80031ae:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80031b2:	4302      	orrs	r2, r0
 80031b4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031b8:	041f      	lsls	r7, r3, #16
 80031ba:	d508      	bpl.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031bc:	498b      	ldr	r1, [pc, #556]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80031be:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80031c0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80031c4:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80031c8:	4302      	orrs	r2, r0
 80031ca:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031ce:	03d8      	lsls	r0, r3, #15
 80031d0:	d508      	bpl.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031d2:	4986      	ldr	r1, [pc, #536]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80031d4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80031d6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80031da:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80031de:	4302      	orrs	r2, r0
 80031e0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031e4:	0399      	lsls	r1, r3, #14
 80031e6:	d508      	bpl.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031e8:	4980      	ldr	r1, [pc, #512]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80031ea:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80031ec:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80031f0:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80031f4:	4302      	orrs	r2, r0
 80031f6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031fa:	065a      	lsls	r2, r3, #25
 80031fc:	d508      	bpl.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031fe:	497b      	ldr	r1, [pc, #492]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003200:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003202:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003206:	f022 0203 	bic.w	r2, r2, #3
 800320a:	4302      	orrs	r2, r0
 800320c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003210:	061f      	lsls	r7, r3, #24
 8003212:	d508      	bpl.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003214:	4975      	ldr	r1, [pc, #468]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003216:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003218:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800321c:	f022 020c 	bic.w	r2, r2, #12
 8003220:	4302      	orrs	r2, r0
 8003222:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003226:	05d8      	lsls	r0, r3, #23
 8003228:	d508      	bpl.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800322a:	4970      	ldr	r1, [pc, #448]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800322c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800322e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003232:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8003236:	4302      	orrs	r2, r0
 8003238:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800323c:	0599      	lsls	r1, r3, #22
 800323e:	d508      	bpl.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003240:	496a      	ldr	r1, [pc, #424]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003242:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003244:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003248:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800324c:	4302      	orrs	r2, r0
 800324e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003252:	055a      	lsls	r2, r3, #21
 8003254:	d508      	bpl.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003256:	4965      	ldr	r1, [pc, #404]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003258:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800325a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800325e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003262:	4302      	orrs	r2, r0
 8003264:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003268:	051f      	lsls	r7, r3, #20
 800326a:	d508      	bpl.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800326c:	495f      	ldr	r1, [pc, #380]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800326e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003270:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003274:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003278:	4302      	orrs	r2, r0
 800327a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800327e:	04d8      	lsls	r0, r3, #19
 8003280:	d508      	bpl.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003282:	495a      	ldr	r1, [pc, #360]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003284:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003286:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800328a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800328e:	4302      	orrs	r2, r0
 8003290:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003294:	0499      	lsls	r1, r3, #18
 8003296:	d508      	bpl.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003298:	4954      	ldr	r1, [pc, #336]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800329a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800329c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80032a0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80032a4:	4302      	orrs	r2, r0
 80032a6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80032aa:	025a      	lsls	r2, r3, #9
 80032ac:	d508      	bpl.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032ae:	494f      	ldr	r1, [pc, #316]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80032b0:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80032b2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80032b6:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80032ba:	4302      	orrs	r2, r0
 80032bc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80032c0:	029f      	lsls	r7, r3, #10
 80032c2:	d50c      	bpl.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80032c4:	4949      	ldr	r1, [pc, #292]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80032c6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80032c8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 80032cc:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80032d0:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1; 
 80032d4:	bf08      	it	eq
 80032d6:	2601      	moveq	r6, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80032d8:	4302      	orrs	r2, r0
 80032da:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
    pllsaiused = 1; 
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032de:	0358      	lsls	r0, r3, #13
 80032e0:	d508      	bpl.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032e2:	4942      	ldr	r1, [pc, #264]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80032e4:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80032e6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80032ea:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80032ee:	4302      	orrs	r2, r0
 80032f0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80032f4:	0219      	lsls	r1, r3, #8
 80032f6:	d40b      	bmi.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x210>
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80032f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032fc:	d016      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x22c>
 80032fe:	07ea      	lsls	r2, r5, #31
 8003300:	d414      	bmi.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003302:	2e01      	cmp	r6, #1
 8003304:	f000 80c0 	beq.w	8003488 <HAL_RCCEx_PeriphCLKConfig+0x388>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003308:	2000      	movs	r0, #0
}
 800330a:	b003      	add	sp, #12
 800330c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003310:	4936      	ldr	r1, [pc, #216]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003312:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003316:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800331a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800331e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003322:	ea42 0200 	orr.w	r2, r2, r0
 8003326:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800332a:	d1e8      	bne.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    __HAL_RCC_PLLI2S_DISABLE();  
 800332c:	4b2f      	ldr	r3, [pc, #188]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800332e:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003330:	461d      	mov	r5, r3
    __HAL_RCC_PLLI2S_DISABLE();  
 8003332:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003336:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003338:	f7fe f886 	bl	8001448 <HAL_GetTick>
 800333c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800333e:	e004      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003340:	f7fe f882 	bl	8001448 <HAL_GetTick>
 8003344:	1bc0      	subs	r0, r0, r7
 8003346:	2864      	cmp	r0, #100	; 0x64
 8003348:	d84c      	bhi.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800334a:	682b      	ldr	r3, [r5, #0]
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	d4f7      	bmi.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x240>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003350:	6823      	ldr	r3, [r4, #0]
 8003352:	07df      	lsls	r7, r3, #31
 8003354:	d503      	bpl.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8003356:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003358:	2a00      	cmp	r2, #0
 800335a:	f000 80e3 	beq.w	8003524 <HAL_RCCEx_PeriphCLKConfig+0x424>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800335e:	031d      	lsls	r5, r3, #12
 8003360:	d504      	bpl.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003362:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003364:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003368:	f000 8107 	beq.w	800357a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800336c:	02d8      	lsls	r0, r3, #11
 800336e:	d504      	bpl.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x27a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8003370:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003372:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8003376:	f000 8100 	beq.w	800357a <HAL_RCCEx_PeriphCLKConfig+0x47a>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800337a:	01d9      	lsls	r1, r3, #7
 800337c:	d511      	bpl.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800337e:	4d1b      	ldr	r5, [pc, #108]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003380:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003382:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003386:	f8d5 7084 	ldr.w	r7, [r5, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800338a:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800338e:	6921      	ldr	r1, [r4, #16]
 8003390:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 8003394:	433a      	orrs	r2, r7
 8003396:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800339a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800339e:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80033a2:	019a      	lsls	r2, r3, #6
 80033a4:	d50d      	bpl.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80033a6:	6923      	ldr	r3, [r4, #16]
 80033a8:	6862      	ldr	r2, [r4, #4]
 80033aa:	041b      	lsls	r3, r3, #16
 80033ac:	68e0      	ldr	r0, [r4, #12]
 80033ae:	68a1      	ldr	r1, [r4, #8]
 80033b0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80033b4:	4a0d      	ldr	r2, [pc, #52]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80033b6:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80033ba:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80033be:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80033c2:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80033c4:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033c6:	461d      	mov	r5, r3
    __HAL_RCC_PLLI2S_ENABLE();
 80033c8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80033cc:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80033ce:	f7fe f83b 	bl	8001448 <HAL_GetTick>
 80033d2:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033d4:	682b      	ldr	r3, [r5, #0]
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	d493      	bmi.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x202>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033da:	f7fe f835 	bl	8001448 <HAL_GetTick>
 80033de:	1bc0      	subs	r0, r0, r7
 80033e0:	2864      	cmp	r0, #100	; 0x64
 80033e2:	d9f7      	bls.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        return HAL_TIMEOUT;
 80033e4:	2003      	movs	r0, #3
}
 80033e6:	b003      	add	sp, #12
 80033e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80033ec:	40023800 	.word	0x40023800
    __HAL_RCC_PWR_CLK_ENABLE();
 80033f0:	4a7e      	ldr	r2, [pc, #504]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
    PWR->CR1 |= PWR_CR1_DBP;
 80033f2:	4b7f      	ldr	r3, [pc, #508]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80033f4:	6c11      	ldr	r1, [r2, #64]	; 0x40
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033f6:	461f      	mov	r7, r3
    __HAL_RCC_PWR_CLK_ENABLE();
 80033f8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80033fc:	6411      	str	r1, [r2, #64]	; 0x40
 80033fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003400:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003404:	9201      	str	r2, [sp, #4]
 8003406:	9a01      	ldr	r2, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800340e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003410:	f7fe f81a 	bl	8001448 <HAL_GetTick>
 8003414:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003416:	e005      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x324>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003418:	f7fe f816 	bl	8001448 <HAL_GetTick>
 800341c:	eba0 0008 	sub.w	r0, r0, r8
 8003420:	2864      	cmp	r0, #100	; 0x64
 8003422:	d8df      	bhi.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	05db      	lsls	r3, r3, #23
 8003428:	d5f6      	bpl.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x318>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800342a:	4a70      	ldr	r2, [pc, #448]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800342c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800342e:	6f11      	ldr	r1, [r2, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003430:	f403 7040 	and.w	r0, r3, #768	; 0x300
 8003434:	f411 7140 	ands.w	r1, r1, #768	; 0x300
 8003438:	d010      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800343a:	4281      	cmp	r1, r0
 800343c:	d00e      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x35c>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800343e:	6f11      	ldr	r1, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8003440:	6f17      	ldr	r7, [r2, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003442:	f421 7140 	bic.w	r1, r1, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003446:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
 800344a:	6717      	str	r7, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800344c:	6f17      	ldr	r7, [r2, #112]	; 0x70
 800344e:	f427 3780 	bic.w	r7, r7, #65536	; 0x10000
 8003452:	6717      	str	r7, [r2, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8003454:	6711      	str	r1, [r2, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003456:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003458:	07cf      	lsls	r7, r1, #31
 800345a:	d479      	bmi.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x450>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800345c:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8003460:	f000 80a7 	beq.w	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003464:	4961      	ldr	r1, [pc, #388]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003466:	688a      	ldr	r2, [r1, #8]
 8003468:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800346c:	608a      	str	r2, [r1, #8]
 800346e:	4a5f      	ldr	r2, [pc, #380]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003474:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003476:	430b      	orrs	r3, r1
 8003478:	6713      	str	r3, [r2, #112]	; 0x70
 800347a:	6823      	ldr	r3, [r4, #0]
 800347c:	e682      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x84>
      plli2sused = 1; 
 800347e:	2501      	movs	r5, #1
 8003480:	e679      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x76>
  uint32_t pllsaiused = 0;
 8003482:	2600      	movs	r6, #0
      plli2sused = 1; 
 8003484:	2501      	movs	r5, #1
 8003486:	e663      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x50>
    __HAL_RCC_PLLSAI_DISABLE(); 
 8003488:	4b58      	ldr	r3, [pc, #352]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348a:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800348c:	461d      	mov	r5, r3
    __HAL_RCC_PLLSAI_DISABLE(); 
 800348e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003492:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003494:	f7fd ffd8 	bl	8001448 <HAL_GetTick>
 8003498:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800349a:	e004      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800349c:	f7fd ffd4 	bl	8001448 <HAL_GetTick>
 80034a0:	1b80      	subs	r0, r0, r6
 80034a2:	2864      	cmp	r0, #100	; 0x64
 80034a4:	d89e      	bhi.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034a6:	682b      	ldr	r3, [r5, #0]
 80034a8:	009f      	lsls	r7, r3, #2
 80034aa:	d4f7      	bmi.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x39c>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034ac:	6822      	ldr	r2, [r4, #0]
 80034ae:	0310      	lsls	r0, r2, #12
 80034b0:	d44a      	bmi.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x448>
 80034b2:	02d1      	lsls	r1, r2, #11
 80034b4:	d51d      	bpl.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034b8:	b9db      	cbnz	r3, 80034f2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034ba:	494c      	ldr	r1, [pc, #304]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80034bc:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034be:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034c2:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80034c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034ca:	69a0      	ldr	r0, [r4, #24]
 80034cc:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 80034d0:	4333      	orrs	r3, r6
 80034d2:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80034d6:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80034da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80034de:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 80034e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80034e4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80034e8:	3801      	subs	r0, #1
 80034ea:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80034ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80034f2:	0292      	lsls	r2, r2, #10
 80034f4:	d503      	bpl.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 80034f6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80034f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034fc:	d062      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    __HAL_RCC_PLLSAI_ENABLE();
 80034fe:	4b3b      	ldr	r3, [pc, #236]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003500:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003502:	461c      	mov	r4, r3
    __HAL_RCC_PLLSAI_ENABLE();
 8003504:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003508:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800350a:	f7fd ff9d 	bl	8001448 <HAL_GetTick>
 800350e:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003510:	6823      	ldr	r3, [r4, #0]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	f53f aef8 	bmi.w	8003308 <HAL_RCCEx_PeriphCLKConfig+0x208>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003518:	f7fd ff96 	bl	8001448 <HAL_GetTick>
 800351c:	1b40      	subs	r0, r0, r5
 800351e:	2864      	cmp	r0, #100	; 0x64
 8003520:	d9f6      	bls.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003522:	e75f      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003524:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003528:	f8d5 7084 	ldr.w	r7, [r5, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800352c:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8003530:	6860      	ldr	r0, [r4, #4]
 8003532:	f007 6770 	and.w	r7, r7, #251658240	; 0xf000000
 8003536:	68a1      	ldr	r1, [r4, #8]
 8003538:	433a      	orrs	r2, r7
 800353a:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800353e:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8003542:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
 8003546:	e70a      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003548:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0b5      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800354e:	e7b0      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003550:	4617      	mov	r7, r2
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003552:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003556:	f7fd ff77 	bl	8001448 <HAL_GetTick>
 800355a:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355c:	e006      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x46c>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800355e:	f7fd ff73 	bl	8001448 <HAL_GetTick>
 8003562:	eba0 0009 	sub.w	r0, r0, r9
 8003566:	4540      	cmp	r0, r8
 8003568:	f63f af3c 	bhi.w	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800356c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800356e:	0798      	lsls	r0, r3, #30
 8003570:	d5f5      	bpl.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8003572:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003574:	f403 7040 	and.w	r0, r3, #768	; 0x300
 8003578:	e770      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x35c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800357a:	4d1c      	ldr	r5, [pc, #112]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800357c:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800357e:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003582:	f8d5 7084 	ldr.w	r7, [r5, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003586:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800358a:	68e1      	ldr	r1, [r4, #12]
 800358c:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 8003590:	433a      	orrs	r2, r7
 8003592:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8003596:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800359a:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 800359e:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 80035a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80035a4:	f021 011f 	bic.w	r1, r1, #31
 80035a8:	3a01      	subs	r2, #1
 80035aa:	430a      	orrs	r2, r1
 80035ac:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
 80035b0:	e6e3      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035b2:	480e      	ldr	r0, [pc, #56]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b4:	490f      	ldr	r1, [pc, #60]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 80035b6:	6882      	ldr	r2, [r0, #8]
 80035b8:	4019      	ands	r1, r3
 80035ba:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80035be:	430a      	orrs	r2, r1
 80035c0:	6082      	str	r2, [r0, #8]
 80035c2:	e754      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x36e>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035c4:	4a09      	ldr	r2, [pc, #36]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80035c6:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035c8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035cc:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80035d0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80035d4:	6a20      	ldr	r0, [r4, #32]
 80035d6:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80035da:	430b      	orrs	r3, r1
 80035dc:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80035e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80035e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80035e8:	e789      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 80035ea:	bf00      	nop
 80035ec:	40023800 	.word	0x40023800
 80035f0:	40007000 	.word	0x40007000
 80035f4:	0ffffcff 	.word	0x0ffffcff

080035f8 <HAL_SPI_ErrorCallback>:
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop

080035fc <HAL_SPI_IRQHandler>:
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
  uint32_t itsource = hspi->Instance->CR2;
 80035fc:	6802      	ldr	r2, [r0, #0]
 80035fe:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8003600:	6893      	ldr	r3, [r2, #8]
{
 8003602:	b530      	push	{r4, r5, lr}

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8003604:	f003 0541 	and.w	r5, r3, #65	; 0x41
{
 8003608:	b085      	sub	sp, #20
 800360a:	4604      	mov	r4, r0
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 800360c:	2d01      	cmp	r5, #1
 800360e:	d056      	beq.n	80036be <HAL_SPI_IRQHandler+0xc2>
    hspi->RxISR(hspi);
    return;
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8003610:	079d      	lsls	r5, r3, #30
 8003612:	d44e      	bmi.n	80036b2 <HAL_SPI_IRQHandler+0xb6>
    hspi->TxISR(hspi);
    return;
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8003614:	f413 7fb0 	tst.w	r3, #352	; 0x160
 8003618:	d049      	beq.n	80036ae <HAL_SPI_IRQHandler+0xb2>
 800361a:	068d      	lsls	r5, r1, #26
 800361c:	d547      	bpl.n	80036ae <HAL_SPI_IRQHandler+0xb2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((itflag & SPI_FLAG_OVR) != RESET)
 800361e:	0658      	lsls	r0, r3, #25
 8003620:	d50e      	bpl.n	8003640 <HAL_SPI_IRQHandler+0x44>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003622:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8003626:	2803      	cmp	r0, #3
 8003628:	d052      	beq.n	80036d0 <HAL_SPI_IRQHandler+0xd4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800362a:	6e20      	ldr	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800362c:	2500      	movs	r5, #0
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800362e:	f040 0004 	orr.w	r0, r0, #4
 8003632:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003634:	9500      	str	r5, [sp, #0]
 8003636:	68d0      	ldr	r0, [r2, #12]
 8003638:	9000      	str	r0, [sp, #0]
 800363a:	6890      	ldr	r0, [r2, #8]
 800363c:	9000      	str	r0, [sp, #0]
 800363e:	9800      	ldr	r0, [sp, #0]
        return;
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((itflag & SPI_FLAG_MODF) != RESET)
 8003640:	069d      	lsls	r5, r3, #26
 8003642:	d50c      	bpl.n	800365e <HAL_SPI_IRQHandler+0x62>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003644:	6e20      	ldr	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003646:	2500      	movs	r5, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003648:	f040 0001 	orr.w	r0, r0, #1
 800364c:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800364e:	9502      	str	r5, [sp, #8]
 8003650:	6890      	ldr	r0, [r2, #8]
 8003652:	9002      	str	r0, [sp, #8]
 8003654:	6810      	ldr	r0, [r2, #0]
 8003656:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 800365a:	6010      	str	r0, [r2, #0]
 800365c:	9802      	ldr	r0, [sp, #8]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((itflag & SPI_FLAG_FRE) != RESET)
 800365e:	05d8      	lsls	r0, r3, #23
 8003660:	d508      	bpl.n	8003674 <HAL_SPI_IRQHandler+0x78>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003662:	6e23      	ldr	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003664:	2000      	movs	r0, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003666:	f043 0308 	orr.w	r3, r3, #8
 800366a:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800366c:	9003      	str	r0, [sp, #12]
 800366e:	6893      	ldr	r3, [r2, #8]
 8003670:	9303      	str	r3, [sp, #12]
 8003672:	9b03      	ldr	r3, [sp, #12]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003674:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003676:	b1d3      	cbz	r3, 80036ae <HAL_SPI_IRQHandler+0xb2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003678:	6853      	ldr	r3, [r2, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800367a:	2001      	movs	r0, #1
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800367c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003680:	6053      	str	r3, [r2, #4]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003682:	078b      	lsls	r3, r1, #30
      hspi->State = HAL_SPI_STATE_READY;
 8003684:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003688:	d01e      	beq.n	80036c8 <HAL_SPI_IRQHandler+0xcc>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800368a:	6853      	ldr	r3, [r2, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800368c:	6da1      	ldr	r1, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800368e:	f023 0303 	bic.w	r3, r3, #3
 8003692:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8003694:	b121      	cbz	r1, 80036a0 <HAL_SPI_IRQHandler+0xa4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003696:	4b12      	ldr	r3, [pc, #72]	; (80036e0 <HAL_SPI_IRQHandler+0xe4>)
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8003698:	4608      	mov	r0, r1
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800369a:	650b      	str	r3, [r1, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 800369c:	f7fe f8a8 	bl	80017f0 <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80036a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80036a2:	b123      	cbz	r3, 80036ae <HAL_SPI_IRQHandler+0xb2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80036a4:	4a0e      	ldr	r2, [pc, #56]	; (80036e0 <HAL_SPI_IRQHandler+0xe4>)
          HAL_DMA_Abort_IT(hspi->hdmatx);
 80036a6:	4618      	mov	r0, r3
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80036a8:	651a      	str	r2, [r3, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 80036aa:	f7fe f8a1 	bl	80017f0 <HAL_DMA_Abort_IT>
        HAL_SPI_ErrorCallback(hspi);
      }
    }
    return;
  }
}
 80036ae:	b005      	add	sp, #20
 80036b0:	bd30      	pop	{r4, r5, pc}
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 80036b2:	0608      	lsls	r0, r1, #24
 80036b4:	d5ae      	bpl.n	8003614 <HAL_SPI_IRQHandler+0x18>
    hspi->TxISR(hspi);
 80036b6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80036b8:	4620      	mov	r0, r4
 80036ba:	4798      	blx	r3
    return;
 80036bc:	e7f7      	b.n	80036ae <HAL_SPI_IRQHandler+0xb2>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 80036be:	064d      	lsls	r5, r1, #25
 80036c0:	d5a6      	bpl.n	8003610 <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 80036c2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80036c4:	4798      	blx	r3
    return;
 80036c6:	e7f2      	b.n	80036ae <HAL_SPI_IRQHandler+0xb2>
        HAL_SPI_ErrorCallback(hspi);
 80036c8:	4620      	mov	r0, r4
 80036ca:	f7ff ff95 	bl	80035f8 <HAL_SPI_ErrorCallback>
 80036ce:	e7ee      	b.n	80036ae <HAL_SPI_IRQHandler+0xb2>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036d0:	2300      	movs	r3, #0
 80036d2:	9301      	str	r3, [sp, #4]
 80036d4:	68d3      	ldr	r3, [r2, #12]
 80036d6:	9301      	str	r3, [sp, #4]
 80036d8:	6893      	ldr	r3, [r2, #8]
 80036da:	9301      	str	r3, [sp, #4]
 80036dc:	9b01      	ldr	r3, [sp, #4]
        return;
 80036de:	e7e6      	b.n	80036ae <HAL_SPI_IRQHandler+0xb2>
 80036e0:	080036e5 	.word	0x080036e5

080036e4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036e4:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  hspi->RxXferCount = 0U;
 80036e6:	2200      	movs	r2, #0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036e8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 80036ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;

  HAL_SPI_ErrorCallback(hspi);
 80036ee:	4618      	mov	r0, r3
  hspi->TxXferCount = 0U;
 80036f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 80036f2:	f7ff ff81 	bl	80035f8 <HAL_SPI_ErrorCallback>
 80036f6:	bd08      	pop	{r3, pc}

080036f8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80036f8:	2800      	cmp	r0, #0
 80036fa:	f000 808d 	beq.w	8003818 <HAL_TIM_Base_Init+0x120>
{ 
 80036fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8003700:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003704:	4604      	mov	r4, r0
 8003706:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800370a:	2b00      	cmp	r3, #0
 800370c:	d077      	beq.n	80037fe <HAL_TIM_Base_Init+0x106>
  }
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800370e:	6822      	ldr	r2, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8003710:	2302      	movs	r3, #2
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003712:	4943      	ldr	r1, [pc, #268]	; (8003820 <HAL_TIM_Base_Init+0x128>)
 8003714:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State= HAL_TIM_STATE_BUSY;
 8003718:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800371c:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8003720:	6813      	ldr	r3, [r2, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003722:	fab1 f181 	clz	r1, r1
 8003726:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800372a:	d047      	beq.n	80037bc <HAL_TIM_Base_Init+0xc4>
 800372c:	2900      	cmp	r1, #0
 800372e:	d145      	bne.n	80037bc <HAL_TIM_Base_Init+0xc4>
 8003730:	483c      	ldr	r0, [pc, #240]	; (8003824 <HAL_TIM_Base_Init+0x12c>)
 8003732:	4282      	cmp	r2, r0
 8003734:	d068      	beq.n	8003808 <HAL_TIM_Base_Init+0x110>
 8003736:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800373a:	4282      	cmp	r2, r0
 800373c:	d064      	beq.n	8003808 <HAL_TIM_Base_Init+0x110>
 800373e:	4d3a      	ldr	r5, [pc, #232]	; (8003828 <HAL_TIM_Base_Init+0x130>)
 8003740:	4e3a      	ldr	r6, [pc, #232]	; (800382c <HAL_TIM_Base_Init+0x134>)
 8003742:	1b50      	subs	r0, r2, r5
 8003744:	42aa      	cmp	r2, r5
 8003746:	bf18      	it	ne
 8003748:	42b2      	cmpne	r2, r6
 800374a:	fab0 f080 	clz	r0, r0
 800374e:	ea4f 1050 	mov.w	r0, r0, lsr #5
 8003752:	d15f      	bne.n	8003814 <HAL_TIM_Base_Init+0x11c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003754:	4d36      	ldr	r5, [pc, #216]	; (8003830 <HAL_TIM_Base_Init+0x138>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800375a:	68a6      	ldr	r6, [r4, #8]
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800375c:	42aa      	cmp	r2, r5
    tmpcr1 |= Structure->CounterMode;
 800375e:	ea43 0306 	orr.w	r3, r3, r6
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003762:	d034      	beq.n	80037ce <HAL_TIM_Base_Init+0xd6>
 8003764:	f5a5 6580 	sub.w	r5, r5, #1024	; 0x400
 8003768:	42aa      	cmp	r2, r5
 800376a:	d030      	beq.n	80037ce <HAL_TIM_Base_Init+0xd6>
 800376c:	4d2f      	ldr	r5, [pc, #188]	; (800382c <HAL_TIM_Base_Init+0x134>)
 800376e:	42aa      	cmp	r2, r5
 8003770:	bf14      	ite	ne
 8003772:	4605      	movne	r5, r0
 8003774:	f040 0501 	orreq.w	r5, r0, #1
 8003778:	bb4d      	cbnz	r5, 80037ce <HAL_TIM_Base_Init+0xd6>
 800377a:	482e      	ldr	r0, [pc, #184]	; (8003834 <HAL_TIM_Base_Init+0x13c>)
 800377c:	4e2e      	ldr	r6, [pc, #184]	; (8003838 <HAL_TIM_Base_Init+0x140>)
 800377e:	4282      	cmp	r2, r0
 8003780:	bf18      	it	ne
 8003782:	42b2      	cmpne	r2, r6
 8003784:	bf0c      	ite	eq
 8003786:	2001      	moveq	r0, #1
 8003788:	2000      	movne	r0, #0
 800378a:	d047      	beq.n	800381c <HAL_TIM_Base_Init+0x124>
 800378c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003790:	4d2a      	ldr	r5, [pc, #168]	; (800383c <HAL_TIM_Base_Init+0x144>)
 8003792:	42aa      	cmp	r2, r5
 8003794:	bf18      	it	ne
 8003796:	42b2      	cmpne	r2, r6
 8003798:	d019      	beq.n	80037ce <HAL_TIM_Base_Init+0xd6>
 800379a:	4829      	ldr	r0, [pc, #164]	; (8003840 <HAL_TIM_Base_Init+0x148>)
 800379c:	4282      	cmp	r2, r0
 800379e:	d03d      	beq.n	800381c <HAL_TIM_Base_Init+0x124>
 80037a0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80037a4:	4282      	cmp	r2, r0
 80037a6:	d039      	beq.n	800381c <HAL_TIM_Base_Init+0x124>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037a8:	69a1      	ldr	r1, [r4, #24]
 80037aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037ae:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037b0:	430b      	orrs	r3, r1
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80037b2:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80037b4:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037b6:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80037b8:	6291      	str	r1, [r2, #40]	; 0x28
 80037ba:	e017      	b.n	80037ec <HAL_TIM_Base_Init+0xf4>
 80037bc:	481a      	ldr	r0, [pc, #104]	; (8003828 <HAL_TIM_Base_Init+0x130>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80037c2:	68a5      	ldr	r5, [r4, #8]
 80037c4:	1a10      	subs	r0, r2, r0
 80037c6:	432b      	orrs	r3, r5
 80037c8:	fab0 f080 	clz	r0, r0
 80037cc:	0940      	lsrs	r0, r0, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ce:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80037d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037d4:	69a5      	ldr	r5, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037d6:	4333      	orrs	r3, r6
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037d8:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80037da:	6866      	ldr	r6, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037e0:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80037e2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037e4:	62d7      	str	r7, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80037e6:	6296      	str	r6, [r2, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80037e8:	b931      	cbnz	r1, 80037f8 <HAL_TIM_Base_Init+0x100>
 80037ea:	b928      	cbnz	r0, 80037f8 <HAL_TIM_Base_Init+0x100>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037ec:	2301      	movs	r3, #1
  return HAL_OK;
 80037ee:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 80037f0:	6153      	str	r3, [r2, #20]
  htim->State= HAL_TIM_STATE_READY;
 80037f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80037f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIMx->RCR = Structure->RepetitionCounter;
 80037f8:	6963      	ldr	r3, [r4, #20]
 80037fa:	6313      	str	r3, [r2, #48]	; 0x30
 80037fc:	e7f6      	b.n	80037ec <HAL_TIM_Base_Init+0xf4>
    htim->Lock = HAL_UNLOCKED;
 80037fe:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003802:	f003 fc17 	bl	8007034 <HAL_TIM_Base_MspInit>
 8003806:	e782      	b.n	800370e <HAL_TIM_Base_Init+0x16>
 8003808:	4807      	ldr	r0, [pc, #28]	; (8003828 <HAL_TIM_Base_Init+0x130>)
 800380a:	1a10      	subs	r0, r2, r0
 800380c:	fab0 f080 	clz	r0, r0
 8003810:	0940      	lsrs	r0, r0, #5
 8003812:	e79f      	b.n	8003754 <HAL_TIM_Base_Init+0x5c>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003814:	4608      	mov	r0, r1
 8003816:	e7a9      	b.n	800376c <HAL_TIM_Base_Init+0x74>
    return HAL_ERROR;
 8003818:	2001      	movs	r0, #1
 800381a:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800381c:	2000      	movs	r0, #0
 800381e:	e7d6      	b.n	80037ce <HAL_TIM_Base_Init+0xd6>
 8003820:	40010000 	.word	0x40010000
 8003824:	40000400 	.word	0x40000400
 8003828:	40010400 	.word	0x40010400
 800382c:	40000c00 	.word	0x40000c00
 8003830:	40000800 	.word	0x40000800
 8003834:	40014400 	.word	0x40014400
 8003838:	40014000 	.word	0x40014000
 800383c:	40001800 	.word	0x40001800
 8003840:	40001c00 	.word	0x40001c00

08003844 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003844:	6803      	ldr	r3, [r0, #0]
}
 8003846:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	f042 0201 	orr.w	r2, r2, #1
 800384e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	f042 0201 	orr.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]
}
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop

0800385c <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 800385c:	2800      	cmp	r0, #0
 800385e:	f000 808d 	beq.w	800397c <HAL_TIM_PWM_Init+0x120>
{
 8003862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 8003864:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003868:	4604      	mov	r4, r0
 800386a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800386e:	2b00      	cmp	r3, #0
 8003870:	d077      	beq.n	8003962 <HAL_TIM_PWM_Init+0x106>
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003872:	6822      	ldr	r2, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;  
 8003874:	2302      	movs	r3, #2
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003876:	4943      	ldr	r1, [pc, #268]	; (8003984 <HAL_TIM_PWM_Init+0x128>)
 8003878:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State= HAL_TIM_STATE_BUSY;  
 800387c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003880:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8003884:	6813      	ldr	r3, [r2, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003886:	fab1 f181 	clz	r1, r1
 800388a:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800388e:	d047      	beq.n	8003920 <HAL_TIM_PWM_Init+0xc4>
 8003890:	2900      	cmp	r1, #0
 8003892:	d145      	bne.n	8003920 <HAL_TIM_PWM_Init+0xc4>
 8003894:	483c      	ldr	r0, [pc, #240]	; (8003988 <HAL_TIM_PWM_Init+0x12c>)
 8003896:	4282      	cmp	r2, r0
 8003898:	d068      	beq.n	800396c <HAL_TIM_PWM_Init+0x110>
 800389a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800389e:	4282      	cmp	r2, r0
 80038a0:	d064      	beq.n	800396c <HAL_TIM_PWM_Init+0x110>
 80038a2:	4d3a      	ldr	r5, [pc, #232]	; (800398c <HAL_TIM_PWM_Init+0x130>)
 80038a4:	4e3a      	ldr	r6, [pc, #232]	; (8003990 <HAL_TIM_PWM_Init+0x134>)
 80038a6:	1b50      	subs	r0, r2, r5
 80038a8:	42aa      	cmp	r2, r5
 80038aa:	bf18      	it	ne
 80038ac:	42b2      	cmpne	r2, r6
 80038ae:	fab0 f080 	clz	r0, r0
 80038b2:	ea4f 1050 	mov.w	r0, r0, lsr #5
 80038b6:	d15f      	bne.n	8003978 <HAL_TIM_PWM_Init+0x11c>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80038b8:	4d36      	ldr	r5, [pc, #216]	; (8003994 <HAL_TIM_PWM_Init+0x138>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80038be:	68a6      	ldr	r6, [r4, #8]
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80038c0:	42aa      	cmp	r2, r5
    tmpcr1 |= Structure->CounterMode;
 80038c2:	ea43 0306 	orr.w	r3, r3, r6
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80038c6:	d034      	beq.n	8003932 <HAL_TIM_PWM_Init+0xd6>
 80038c8:	f5a5 6580 	sub.w	r5, r5, #1024	; 0x400
 80038cc:	42aa      	cmp	r2, r5
 80038ce:	d030      	beq.n	8003932 <HAL_TIM_PWM_Init+0xd6>
 80038d0:	4d2f      	ldr	r5, [pc, #188]	; (8003990 <HAL_TIM_PWM_Init+0x134>)
 80038d2:	42aa      	cmp	r2, r5
 80038d4:	bf14      	ite	ne
 80038d6:	4605      	movne	r5, r0
 80038d8:	f040 0501 	orreq.w	r5, r0, #1
 80038dc:	bb4d      	cbnz	r5, 8003932 <HAL_TIM_PWM_Init+0xd6>
 80038de:	482e      	ldr	r0, [pc, #184]	; (8003998 <HAL_TIM_PWM_Init+0x13c>)
 80038e0:	4e2e      	ldr	r6, [pc, #184]	; (800399c <HAL_TIM_PWM_Init+0x140>)
 80038e2:	4282      	cmp	r2, r0
 80038e4:	bf18      	it	ne
 80038e6:	42b2      	cmpne	r2, r6
 80038e8:	bf0c      	ite	eq
 80038ea:	2001      	moveq	r0, #1
 80038ec:	2000      	movne	r0, #0
 80038ee:	d047      	beq.n	8003980 <HAL_TIM_PWM_Init+0x124>
 80038f0:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80038f4:	4d2a      	ldr	r5, [pc, #168]	; (80039a0 <HAL_TIM_PWM_Init+0x144>)
 80038f6:	42aa      	cmp	r2, r5
 80038f8:	bf18      	it	ne
 80038fa:	42b2      	cmpne	r2, r6
 80038fc:	d019      	beq.n	8003932 <HAL_TIM_PWM_Init+0xd6>
 80038fe:	4829      	ldr	r0, [pc, #164]	; (80039a4 <HAL_TIM_PWM_Init+0x148>)
 8003900:	4282      	cmp	r2, r0
 8003902:	d03d      	beq.n	8003980 <HAL_TIM_PWM_Init+0x124>
 8003904:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8003908:	4282      	cmp	r2, r0
 800390a:	d039      	beq.n	8003980 <HAL_TIM_PWM_Init+0x124>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800390c:	69a1      	ldr	r1, [r4, #24]
 800390e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003912:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003914:	430b      	orrs	r3, r1
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003916:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8003918:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800391a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800391c:	6291      	str	r1, [r2, #40]	; 0x28
 800391e:	e017      	b.n	8003950 <HAL_TIM_PWM_Init+0xf4>
 8003920:	481a      	ldr	r0, [pc, #104]	; (800398c <HAL_TIM_PWM_Init+0x130>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003926:	68a5      	ldr	r5, [r4, #8]
 8003928:	1a10      	subs	r0, r2, r0
 800392a:	432b      	orrs	r3, r5
 800392c:	fab0 f080 	clz	r0, r0
 8003930:	0940      	lsrs	r0, r0, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003932:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003938:	69a5      	ldr	r5, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800393a:	4333      	orrs	r3, r6
  TIMx->ARR = (uint32_t)Structure->Period ;
 800393c:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800393e:	6866      	ldr	r6, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003940:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003944:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003946:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003948:	62d7      	str	r7, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800394a:	6296      	str	r6, [r2, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800394c:	b931      	cbnz	r1, 800395c <HAL_TIM_PWM_Init+0x100>
 800394e:	b928      	cbnz	r0, 800395c <HAL_TIM_PWM_Init+0x100>
  TIMx->EGR = TIM_EGR_UG;
 8003950:	2301      	movs	r3, #1
  return HAL_OK;
 8003952:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8003954:	6153      	str	r3, [r2, #20]
  htim->State= HAL_TIM_STATE_READY;
 8003956:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800395a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIMx->RCR = Structure->RepetitionCounter;
 800395c:	6963      	ldr	r3, [r4, #20]
 800395e:	6313      	str	r3, [r2, #48]	; 0x30
 8003960:	e7f6      	b.n	8003950 <HAL_TIM_PWM_Init+0xf4>
    htim->Lock = HAL_UNLOCKED;
 8003962:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003966:	f003 fbe1 	bl	800712c <HAL_TIM_PWM_MspInit>
 800396a:	e782      	b.n	8003872 <HAL_TIM_PWM_Init+0x16>
 800396c:	4807      	ldr	r0, [pc, #28]	; (800398c <HAL_TIM_PWM_Init+0x130>)
 800396e:	1a10      	subs	r0, r2, r0
 8003970:	fab0 f080 	clz	r0, r0
 8003974:	0940      	lsrs	r0, r0, #5
 8003976:	e79f      	b.n	80038b8 <HAL_TIM_PWM_Init+0x5c>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003978:	4608      	mov	r0, r1
 800397a:	e7a9      	b.n	80038d0 <HAL_TIM_PWM_Init+0x74>
    return HAL_ERROR;
 800397c:	2001      	movs	r0, #1
 800397e:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003980:	2000      	movs	r0, #0
 8003982:	e7d6      	b.n	8003932 <HAL_TIM_PWM_Init+0xd6>
 8003984:	40010000 	.word	0x40010000
 8003988:	40000400 	.word	0x40000400
 800398c:	40010400 	.word	0x40010400
 8003990:	40000c00 	.word	0x40000c00
 8003994:	40000800 	.word	0x40000800
 8003998:	40014400 	.word	0x40014400
 800399c:	40014000 	.word	0x40014000
 80039a0:	40001800 	.word	0x40001800
 80039a4:	40001c00 	.word	0x40001c00

080039a8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80039a8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d03f      	beq.n	8003a30 <HAL_TIM_ConfigClockSource+0x88>
  tmpsmcr = htim->Instance->SMCR;
 80039b0:	6803      	ldr	r3, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039b2:	4a5e      	ldr	r2, [pc, #376]	; (8003b2c <HAL_TIM_ConfigClockSource+0x184>)
{
 80039b4:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80039b6:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 80039b8:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80039ba:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  switch (sClockSourceConfig->ClockSource)
 80039be:	680c      	ldr	r4, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 80039c0:	689e      	ldr	r6, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80039c2:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 80039c4:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039c8:	ea02 0206 	and.w	r2, r2, r6
  htim->Instance->SMCR = tmpsmcr;
 80039cc:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80039ce:	d076      	beq.n	8003abe <HAL_TIM_ConfigClockSource+0x116>
 80039d0:	d918      	bls.n	8003a04 <HAL_TIM_ConfigClockSource+0x5c>
 80039d2:	2c70      	cmp	r4, #112	; 0x70
 80039d4:	d061      	beq.n	8003a9a <HAL_TIM_ConfigClockSource+0xf2>
 80039d6:	d92e      	bls.n	8003a36 <HAL_TIM_ConfigClockSource+0x8e>
 80039d8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80039dc:	d058      	beq.n	8003a90 <HAL_TIM_ConfigClockSource+0xe8>
 80039de:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 80039e2:	d11c      	bne.n	8003a1e <HAL_TIM_ConfigClockSource+0x76>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80039e4:	688a      	ldr	r2, [r1, #8]
 80039e6:	684d      	ldr	r5, [r1, #4]
 80039e8:	68cc      	ldr	r4, [r1, #12]
 80039ea:	432a      	orrs	r2, r5
  tmpsmcr = TIMx->SMCR;
 80039ec:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80039ee:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039f2:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80039f6:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039f8:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a00:	609a      	str	r2, [r3, #8]
    break;
 8003a02:	e00c      	b.n	8003a1e <HAL_TIM_ConfigClockSource+0x76>
  switch (sClockSourceConfig->ClockSource)
 8003a04:	2c10      	cmp	r4, #16
 8003a06:	d033      	beq.n	8003a70 <HAL_TIM_ConfigClockSource+0xc8>
 8003a08:	d939      	bls.n	8003a7e <HAL_TIM_ConfigClockSource+0xd6>
 8003a0a:	2c20      	cmp	r4, #32
 8003a0c:	d06f      	beq.n	8003aee <HAL_TIM_ConfigClockSource+0x146>
 8003a0e:	2c30      	cmp	r4, #48	; 0x30
 8003a10:	d105      	bne.n	8003a1e <HAL_TIM_ConfigClockSource+0x76>
   tmpsmcr = TIMx->SMCR;
 8003a12:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003a14:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003a18:	f042 0237 	orr.w	r2, r2, #55	; 0x37
   TIMx->SMCR = tmpsmcr;
 8003a1c:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8003a1e:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8003a20:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003a22:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8003a26:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	bcf0      	pop	{r4, r5, r6, r7}
 8003a2e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003a30:	2302      	movs	r3, #2
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003a36:	2c50      	cmp	r4, #80	; 0x50
 8003a38:	d060      	beq.n	8003afc <HAL_TIM_ConfigClockSource+0x154>
 8003a3a:	2c60      	cmp	r4, #96	; 0x60
 8003a3c:	d1ef      	bne.n	8003a1e <HAL_TIM_ConfigClockSource+0x76>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a3e:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8003a40:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a42:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8003a46:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a48:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a4a:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8003a4c:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a4e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a52:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12);
 8003a56:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4);
 8003a5a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8003a5e:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a60:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8003a62:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003a64:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003a68:	f042 0267 	orr.w	r2, r2, #103	; 0x67
   TIMx->SMCR = tmpsmcr;
 8003a6c:	609a      	str	r2, [r3, #8]
 8003a6e:	e7d6      	b.n	8003a1e <HAL_TIM_ConfigClockSource+0x76>
   tmpsmcr = TIMx->SMCR;
 8003a70:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003a72:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003a76:	f042 0217 	orr.w	r2, r2, #23
   TIMx->SMCR = tmpsmcr;
 8003a7a:	609a      	str	r2, [r3, #8]
 8003a7c:	e7cf      	b.n	8003a1e <HAL_TIM_ConfigClockSource+0x76>
  switch (sClockSourceConfig->ClockSource)
 8003a7e:	2c00      	cmp	r4, #0
 8003a80:	d1cd      	bne.n	8003a1e <HAL_TIM_ConfigClockSource+0x76>
   tmpsmcr = TIMx->SMCR;
 8003a82:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003a84:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003a88:	f042 0207 	orr.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8003a8c:	609a      	str	r2, [r3, #8]
 8003a8e:	e7c6      	b.n	8003a1e <HAL_TIM_ConfigClockSource+0x76>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003a90:	6899      	ldr	r1, [r3, #8]
 8003a92:	4a27      	ldr	r2, [pc, #156]	; (8003b30 <HAL_TIM_ConfigClockSource+0x188>)
 8003a94:	400a      	ands	r2, r1
 8003a96:	609a      	str	r2, [r3, #8]
    break;
 8003a98:	e7c1      	b.n	8003a1e <HAL_TIM_ConfigClockSource+0x76>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003a9a:	684c      	ldr	r4, [r1, #4]
 8003a9c:	688a      	ldr	r2, [r1, #8]
 8003a9e:	68cd      	ldr	r5, [r1, #12]
 8003aa0:	4322      	orrs	r2, r4
  tmpsmcr = TIMx->SMCR;
 8003aa2:	689c      	ldr	r4, [r3, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003aa4:	4923      	ldr	r1, [pc, #140]	; (8003b34 <HAL_TIM_ConfigClockSource+0x18c>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003aa6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aaa:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003aae:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8003ab0:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003ab2:	689a      	ldr	r2, [r3, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ab4:	4011      	ands	r1, r2
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ab6:	f041 0177 	orr.w	r1, r1, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003aba:	6099      	str	r1, [r3, #8]
    break;
 8003abc:	e7af      	b.n	8003a1e <HAL_TIM_ConfigClockSource+0x76>
  tmpccer = TIMx->CCER;
 8003abe:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ac0:	6a1d      	ldr	r5, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003ac2:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ac4:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ac8:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003acc:	68cf      	ldr	r7, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 8003ace:	4334      	orrs	r4, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ad0:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8003ad2:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ad4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8003ad8:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003adc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ade:	621c      	str	r4, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8003ae0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003ae2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003ae6:	f042 0247 	orr.w	r2, r2, #71	; 0x47
   TIMx->SMCR = tmpsmcr;
 8003aea:	609a      	str	r2, [r3, #8]
 8003aec:	e797      	b.n	8003a1e <HAL_TIM_ConfigClockSource+0x76>
   tmpsmcr = TIMx->SMCR;
 8003aee:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003af0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003af4:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   TIMx->SMCR = tmpsmcr;
 8003af8:	609a      	str	r2, [r3, #8]
 8003afa:	e790      	b.n	8003a1e <HAL_TIM_ConfigClockSource+0x76>
  tmpccer = TIMx->CCER;
 8003afc:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003afe:	6a1d      	ldr	r5, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003b00:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b02:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b06:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003b0a:	68cf      	ldr	r7, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 8003b0c:	4334      	orrs	r4, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b0e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8003b10:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b12:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8003b16:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b1c:	621c      	str	r4, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8003b1e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003b20:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003b24:	f042 0257 	orr.w	r2, r2, #87	; 0x57
   TIMx->SMCR = tmpsmcr;
 8003b28:	609a      	str	r2, [r3, #8]
 8003b2a:	e778      	b.n	8003a1e <HAL_TIM_ConfigClockSource+0x76>
 8003b2c:	fffe0088 	.word	0xfffe0088
 8003b30:	fffefff8 	.word	0xfffefff8
 8003b34:	fffeff88 	.word	0xfffeff88

08003b38 <HAL_TIM_OC_DelayElapsedCallback>:
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop

08003b3c <HAL_TIM_IC_CaptureCallback>:
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop

08003b40 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop

08003b44 <HAL_TIM_TriggerCallback>:
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop

08003b48 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b48:	6803      	ldr	r3, [r0, #0]
 8003b4a:	691a      	ldr	r2, [r3, #16]
 8003b4c:	0791      	lsls	r1, r2, #30
{
 8003b4e:	b510      	push	{r4, lr}
 8003b50:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b52:	d502      	bpl.n	8003b5a <HAL_TIM_IRQHandler+0x12>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	0792      	lsls	r2, r2, #30
 8003b58:	d465      	bmi.n	8003c26 <HAL_TIM_IRQHandler+0xde>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b5a:	691a      	ldr	r2, [r3, #16]
 8003b5c:	0752      	lsls	r2, r2, #29
 8003b5e:	d502      	bpl.n	8003b66 <HAL_TIM_IRQHandler+0x1e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	0750      	lsls	r0, r2, #29
 8003b64:	d44c      	bmi.n	8003c00 <HAL_TIM_IRQHandler+0xb8>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b66:	691a      	ldr	r2, [r3, #16]
 8003b68:	0711      	lsls	r1, r2, #28
 8003b6a:	d502      	bpl.n	8003b72 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	0712      	lsls	r2, r2, #28
 8003b70:	d434      	bmi.n	8003bdc <HAL_TIM_IRQHandler+0x94>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b72:	691a      	ldr	r2, [r3, #16]
 8003b74:	06d0      	lsls	r0, r2, #27
 8003b76:	d502      	bpl.n	8003b7e <HAL_TIM_IRQHandler+0x36>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003b78:	68da      	ldr	r2, [r3, #12]
 8003b7a:	06d1      	lsls	r1, r2, #27
 8003b7c:	d41e      	bmi.n	8003bbc <HAL_TIM_IRQHandler+0x74>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b7e:	691a      	ldr	r2, [r3, #16]
 8003b80:	07d2      	lsls	r2, r2, #31
 8003b82:	d502      	bpl.n	8003b8a <HAL_TIM_IRQHandler+0x42>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	07d0      	lsls	r0, r2, #31
 8003b88:	d46b      	bmi.n	8003c62 <HAL_TIM_IRQHandler+0x11a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	0611      	lsls	r1, r2, #24
 8003b8e:	d502      	bpl.n	8003b96 <HAL_TIM_IRQHandler+0x4e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	0612      	lsls	r2, r2, #24
 8003b94:	d46d      	bmi.n	8003c72 <HAL_TIM_IRQHandler+0x12a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	05d0      	lsls	r0, r2, #23
 8003b9a:	d502      	bpl.n	8003ba2 <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	0611      	lsls	r1, r2, #24
 8003ba0:	d46f      	bmi.n	8003c82 <HAL_TIM_IRQHandler+0x13a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ba2:	691a      	ldr	r2, [r3, #16]
 8003ba4:	0652      	lsls	r2, r2, #25
 8003ba6:	d502      	bpl.n	8003bae <HAL_TIM_IRQHandler+0x66>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	0650      	lsls	r0, r2, #25
 8003bac:	d451      	bmi.n	8003c52 <HAL_TIM_IRQHandler+0x10a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	0691      	lsls	r1, r2, #26
 8003bb2:	d502      	bpl.n	8003bba <HAL_TIM_IRQHandler+0x72>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	0692      	lsls	r2, r2, #26
 8003bb8:	d443      	bmi.n	8003c42 <HAL_TIM_IRQHandler+0xfa>
 8003bba:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bbc:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bc0:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bc4:	6119      	str	r1, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8003bc6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bc8:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8003bca:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003bce:	d06c      	beq.n	8003caa <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_IC_CaptureCallback(htim);
 8003bd0:	f7ff ffb4 	bl	8003b3c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	6823      	ldr	r3, [r4, #0]
 8003bd8:	7722      	strb	r2, [r4, #28]
 8003bda:	e7d0      	b.n	8003b7e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bdc:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003be0:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8003be2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003be4:	6119      	str	r1, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8003be6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003be8:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8003bea:	079b      	lsls	r3, r3, #30
 8003bec:	d15a      	bne.n	8003ca4 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bee:	f7ff ffa3 	bl	8003b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	f7ff ffa4 	bl	8003b40 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	6823      	ldr	r3, [r4, #0]
 8003bfc:	7722      	strb	r2, [r4, #28]
 8003bfe:	e7b8      	b.n	8003b72 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c00:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c04:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8003c06:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c08:	6119      	str	r1, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8003c0a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c0c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8003c0e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003c12:	d144      	bne.n	8003c9e <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c14:	f7ff ff90 	bl	8003b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c18:	4620      	mov	r0, r4
 8003c1a:	f7ff ff91 	bl	8003b40 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c1e:	2200      	movs	r2, #0
 8003c20:	6823      	ldr	r3, [r4, #0]
 8003c22:	7722      	strb	r2, [r4, #28]
 8003c24:	e79f      	b.n	8003b66 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c26:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c2a:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c2c:	6119      	str	r1, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8003c2e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c30:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8003c32:	0799      	lsls	r1, r3, #30
 8003c34:	d02d      	beq.n	8003c92 <HAL_TIM_IRQHandler+0x14a>
          HAL_TIM_IC_CaptureCallback(htim);
 8003c36:	f7ff ff81 	bl	8003b3c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	6823      	ldr	r3, [r4, #0]
 8003c3e:	7722      	strb	r2, [r4, #28]
 8003c40:	e78b      	b.n	8003b5a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c42:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8003c46:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c48:	611a      	str	r2, [r3, #16]
}
 8003c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8003c4e:	f000 b925 	b.w	8003e9c <HAL_TIMEx_CommutationCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c52:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8003c56:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c58:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003c5a:	f7ff ff73 	bl	8003b44 <HAL_TIM_TriggerCallback>
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	e7a5      	b.n	8003bae <HAL_TIM_IRQHandler+0x66>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c62:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c66:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c68:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c6a:	f002 ffdf 	bl	8006c2c <HAL_TIM_PeriodElapsedCallback>
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	e78b      	b.n	8003b8a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c72:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8003c76:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c78:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003c7a:	f000 f911 	bl	8003ea0 <HAL_TIMEx_BreakCallback>
 8003c7e:	6823      	ldr	r3, [r4, #0]
 8003c80:	e789      	b.n	8003b96 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c82:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8003c86:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c88:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003c8a:	f000 f909 	bl	8003ea0 <HAL_TIMEx_BreakCallback>
 8003c8e:	6823      	ldr	r3, [r4, #0]
 8003c90:	e787      	b.n	8003ba2 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c92:	f7ff ff51 	bl	8003b38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c96:	4620      	mov	r0, r4
 8003c98:	f7ff ff52 	bl	8003b40 <HAL_TIM_PWM_PulseFinishedCallback>
 8003c9c:	e7cd      	b.n	8003c3a <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c9e:	f7ff ff4d 	bl	8003b3c <HAL_TIM_IC_CaptureCallback>
 8003ca2:	e7bc      	b.n	8003c1e <HAL_TIM_IRQHandler+0xd6>
        HAL_TIM_IC_CaptureCallback(htim);
 8003ca4:	f7ff ff4a 	bl	8003b3c <HAL_TIM_IC_CaptureCallback>
 8003ca8:	e7a6      	b.n	8003bf8 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003caa:	f7ff ff45 	bl	8003b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cae:	4620      	mov	r0, r4
 8003cb0:	f7ff ff46 	bl	8003b40 <HAL_TIM_PWM_PulseFinishedCallback>
 8003cb4:	e78e      	b.n	8003bd4 <HAL_TIM_IRQHandler+0x8c>
 8003cb6:	bf00      	nop

08003cb8 <TIM_OC1_SetConfig>:
{
 8003cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cba:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= OC_Config->OCPolarity;
 8003cbc:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cbe:	f024 0401 	bic.w	r4, r4, #1
  tmpccmrx |= OC_Config->OCMode;
 8003cc2:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cc4:	4a13      	ldr	r2, [pc, #76]	; (8003d14 <TIM_OC1_SetConfig+0x5c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cc6:	6204      	str	r4, [r0, #32]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003cc8:	4d13      	ldr	r5, [pc, #76]	; (8003d18 <TIM_OC1_SetConfig+0x60>)
  tmpccer = TIMx->CCER;
 8003cca:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8003ccc:	6844      	ldr	r4, [r0, #4]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003cce:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR1;
 8003cd0:	f8d0 e018 	ldr.w	lr, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8003cd4:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cd8:	ea0e 0202 	and.w	r2, lr, r2
  tmpccer |= OC_Config->OCPolarity;
 8003cdc:	ea43 0307 	orr.w	r3, r3, r7
  tmpccmrx |= OC_Config->OCMode;
 8003ce0:	ea42 0206 	orr.w	r2, r2, r6
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003ce4:	d009      	beq.n	8003cfa <TIM_OC1_SetConfig+0x42>
 8003ce6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003cea:	42a8      	cmp	r0, r5
 8003cec:	d005      	beq.n	8003cfa <TIM_OC1_SetConfig+0x42>
  TIMx->CCR1 = OC_Config->Pulse;
 8003cee:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003cf0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003cf2:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003cf4:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 8003cf6:	6203      	str	r3, [r0, #32]
 8003cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cfa:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003cfe:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d00:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d02:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d06:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8003d08:	433b      	orrs	r3, r7
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d0a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d0c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d10:	432c      	orrs	r4, r5
 8003d12:	e7ec      	b.n	8003cee <TIM_OC1_SetConfig+0x36>
 8003d14:	fffeff8c 	.word	0xfffeff8c
 8003d18:	40010000 	.word	0x40010000

08003d1c <TIM_OC2_SetConfig>:
{
 8003d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d1e:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 4);
 8003d20:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d22:	f024 0410 	bic.w	r4, r4, #16
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003d26:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d28:	4a14      	ldr	r2, [pc, #80]	; (8003d7c <TIM_OC2_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d2a:	6204      	str	r4, [r0, #32]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003d2c:	4d14      	ldr	r5, [pc, #80]	; (8003d80 <TIM_OC2_SetConfig+0x64>)
  tmpccer = TIMx->CCER;
 8003d2e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8003d30:	6844      	ldr	r4, [r0, #4]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003d32:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR1;
 8003d34:	f8d0 e018 	ldr.w	lr, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8003d38:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d3c:	ea0e 0202 	and.w	r2, lr, r2
  tmpccer |= (OC_Config->OCPolarity << 4);
 8003d40:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003d44:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003d48:	d009      	beq.n	8003d5e <TIM_OC2_SetConfig+0x42>
 8003d4a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003d4e:	42a8      	cmp	r0, r5
 8003d50:	d005      	beq.n	8003d5e <TIM_OC2_SetConfig+0x42>
  TIMx->CCR2 = OC_Config->Pulse;
 8003d52:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003d54:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003d56:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003d58:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003d5a:	6203      	str	r3, [r0, #32]
 8003d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8003d62:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8003d64:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d66:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003d6a:	698e      	ldr	r6, [r1, #24]
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8003d6c:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003d70:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003d76:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8003d7a:	e7ea      	b.n	8003d52 <TIM_OC2_SetConfig+0x36>
 8003d7c:	feff8cff 	.word	0xfeff8cff
 8003d80:	40010000 	.word	0x40010000

08003d84 <TIM_OC3_SetConfig>:
{
 8003d84:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d86:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 8);
 8003d88:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d8a:	f424 7480 	bic.w	r4, r4, #256	; 0x100
  tmpccmrx |= OC_Config->OCMode;
 8003d8e:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8003d90:	4a14      	ldr	r2, [pc, #80]	; (8003de4 <TIM_OC3_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d92:	6204      	str	r4, [r0, #32]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003d94:	4d14      	ldr	r5, [pc, #80]	; (8003de8 <TIM_OC3_SetConfig+0x64>)
  tmpccer = TIMx->CCER;
 8003d96:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8003d98:	6844      	ldr	r4, [r0, #4]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003d9a:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR2;
 8003d9c:	f8d0 e01c 	ldr.w	lr, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8003da0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8003da4:	ea0e 0202 	and.w	r2, lr, r2
  tmpccer |= (OC_Config->OCPolarity << 8);
 8003da8:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8003dac:	ea42 0206 	orr.w	r2, r2, r6
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003db0:	d009      	beq.n	8003dc6 <TIM_OC3_SetConfig+0x42>
 8003db2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003db6:	42a8      	cmp	r0, r5
 8003db8:	d005      	beq.n	8003dc6 <TIM_OC3_SetConfig+0x42>
  TIMx->CCR3 = OC_Config->Pulse;
 8003dba:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003dbc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003dbe:	61c2      	str	r2, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003dc0:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8003dc2:	6203      	str	r3, [r0, #32]
 8003dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8003dca:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8003dcc:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dce:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8003dd2:	698e      	ldr	r6, [r1, #24]
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8003dd4:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8003dd8:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8003dde:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8003de2:	e7ea      	b.n	8003dba <TIM_OC3_SetConfig+0x36>
 8003de4:	fffeff8c 	.word	0xfffeff8c
 8003de8:	40010000 	.word	0x40010000

08003dec <TIM_OC4_SetConfig>:
{
 8003dec:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003dee:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 12);
 8003df0:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003df2:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003df6:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003df8:	4a10      	ldr	r2, [pc, #64]	; (8003e3c <TIM_OC4_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003dfa:	6204      	str	r4, [r0, #32]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003dfc:	4d10      	ldr	r5, [pc, #64]	; (8003e40 <TIM_OC4_SetConfig+0x54>)
  tmpccer = TIMx->CCER;
 8003dfe:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8003e00:	6844      	ldr	r4, [r0, #4]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003e02:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR2;
 8003e04:	f8d0 e01c 	ldr.w	lr, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8003e08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e0c:	ea0e 0202 	and.w	r2, lr, r2
  tmpccer |= (OC_Config->OCPolarity << 12);
 8003e10:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003e14:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003e18:	d009      	beq.n	8003e2e <TIM_OC4_SetConfig+0x42>
 8003e1a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e1e:	42a8      	cmp	r0, r5
 8003e20:	d005      	beq.n	8003e2e <TIM_OC4_SetConfig+0x42>
  TIMx->CCR4 = OC_Config->Pulse;
 8003e22:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003e24:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003e26:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003e28:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8003e2a:	6203      	str	r3, [r0, #32]
 8003e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e2e:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8003e32:	694d      	ldr	r5, [r1, #20]
 8003e34:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8003e38:	e7f3      	b.n	8003e22 <TIM_OC4_SetConfig+0x36>
 8003e3a:	bf00      	nop
 8003e3c:	feff8cff 	.word	0xfeff8cff
 8003e40:	40010000 	.word	0x40010000

08003e44 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8003e44:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003e48:	2b01      	cmp	r3, #1
{
 8003e4a:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8003e4c:	d01f      	beq.n	8003e8e <HAL_TIMEx_MasterConfigSynchronization+0x4a>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e4e:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e50:	4d11      	ldr	r5, [pc, #68]	; (8003e98 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  tmpcr2 = htim->Instance->CR2;
 8003e52:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e54:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 8003e56:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e58:	d014      	beq.n	8003e84 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003e5a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e5e:	42aa      	cmp	r2, r5
 8003e60:	d010      	beq.n	8003e84 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e62:	680d      	ldr	r5, [r1, #0]
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8003e64:	2600      	movs	r6, #0
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e66:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003e68:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e70:	4321      	orrs	r1, r4
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e72:	432b      	orrs	r3, r5
  
  return HAL_OK;
 8003e74:	4635      	mov	r5, r6
  htim->Instance->CR2 = tmpcr2;
 8003e76:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR = tmpsmcr;
 8003e78:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8003e7a:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
} 
 8003e7e:	4628      	mov	r0, r5
 8003e80:	bc70      	pop	{r4, r5, r6}
 8003e82:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e84:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e88:	684d      	ldr	r5, [r1, #4]
 8003e8a:	432b      	orrs	r3, r5
 8003e8c:	e7e9      	b.n	8003e62 <HAL_TIMEx_MasterConfigSynchronization+0x1e>
  __HAL_LOCK(htim);
 8003e8e:	2502      	movs	r5, #2
} 
 8003e90:	4628      	mov	r0, r5
 8003e92:	bc70      	pop	{r4, r5, r6}
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40010000 	.word	0x40010000

08003e9c <HAL_TIMEx_CommutationCallback>:
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop

08003ea0 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop

08003ea4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 8003ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8003ea6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d030      	beq.n	8003f10 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8003eae:	460d      	mov	r5, r1
  
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb0:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003eba:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
    
  switch (Channel)
 8003ebe:	2a14      	cmp	r2, #20
 8003ec0:	d81e      	bhi.n	8003f00 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8003ec2:	e8df f002 	tbb	[pc, r2]
 8003ec6:	1d56      	.short	0x1d56
 8003ec8:	1d681d1d 	.word	0x1d681d1d
 8003ecc:	1d7b1d1d 	.word	0x1d7b1d1d
 8003ed0:	1d0b1d1d 	.word	0x1d0b1d1d
 8003ed4:	1d8d1d1d 	.word	0x1d8d1d1d
 8003ed8:	1d1d      	.short	0x1d1d
 8003eda:	27          	.byte	0x27
 8003edb:	00          	.byte	0x00
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003edc:	4629      	mov	r1, r5
 8003ede:	6800      	ldr	r0, [r0, #0]
 8003ee0:	f7ff ff84 	bl	8003dec <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ee4:	6823      	ldr	r3, [r4, #0]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8003ee6:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ee8:	69d9      	ldr	r1, [r3, #28]
 8003eea:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003eee:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ef0:	69d9      	ldr	r1, [r3, #28]
 8003ef2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003ef6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8003ef8:	69da      	ldr	r2, [r3, #28]
 8003efa:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003efe:	61da      	str	r2, [r3, #28]
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
    
  __HAL_UNLOCK(htim);
 8003f00:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003f02:	2201      	movs	r2, #1
  
  return HAL_OK;
 8003f04:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8003f06:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003f0a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return HAL_OK;
 8003f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8003f10:	2002      	movs	r0, #2
}
 8003f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f14:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8003f16:	68ae      	ldr	r6, [r5, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f18:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003f1a:	682f      	ldr	r7, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f1c:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f20:	494c      	ldr	r1, [pc, #304]	; (8004054 <HAL_TIM_PWM_ConfigChannel+0x1b0>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f22:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8003f24:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2; 
 8003f26:	6858      	ldr	r0, [r3, #4]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f28:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx = TIMx->CCMR3;
 8003f2c:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 20);
 8003f30:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003f34:	4e48      	ldr	r6, [pc, #288]	; (8004058 <HAL_TIM_PWM_ConfigChannel+0x1b4>)
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f36:	ea0e 0101 	and.w	r1, lr, r1
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003f3a:	42b3      	cmp	r3, r6
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003f3c:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003f40:	f000 8081 	beq.w	8004046 <HAL_TIM_PWM_ConfigChannel+0x1a2>
 8003f44:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003f48:	42b3      	cmp	r3, r6
 8003f4a:	d07c      	beq.n	8004046 <HAL_TIM_PWM_ConfigChannel+0x1a2>
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f4c:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8003f4e:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8003f50:	6559      	str	r1, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8003f52:	65de      	str	r6, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003f54:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f56:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8003f58:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f5a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003f5e:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003f60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f62:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003f66:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8003f68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f6a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003f6e:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8003f70:	e7c6      	b.n	8003f00 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f72:	4629      	mov	r1, r5
 8003f74:	6800      	ldr	r0, [r0, #0]
 8003f76:	f7ff fe9f 	bl	8003cb8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f7a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f7c:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f7e:	6999      	ldr	r1, [r3, #24]
 8003f80:	f041 0108 	orr.w	r1, r1, #8
 8003f84:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f86:	6999      	ldr	r1, [r3, #24]
 8003f88:	f021 0104 	bic.w	r1, r1, #4
 8003f8c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f8e:	699a      	ldr	r2, [r3, #24]
 8003f90:	4302      	orrs	r2, r0
 8003f92:	619a      	str	r2, [r3, #24]
    break;
 8003f94:	e7b4      	b.n	8003f00 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f96:	4629      	mov	r1, r5
 8003f98:	6800      	ldr	r0, [r0, #0]
 8003f9a:	f7ff febf 	bl	8003d1c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f9e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8003fa0:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fa2:	6999      	ldr	r1, [r3, #24]
 8003fa4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003fa8:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003faa:	6999      	ldr	r1, [r3, #24]
 8003fac:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003fb0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8003fb2:	699a      	ldr	r2, [r3, #24]
 8003fb4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003fb8:	619a      	str	r2, [r3, #24]
    break;
 8003fba:	e7a1      	b.n	8003f00 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fbc:	4629      	mov	r1, r5
 8003fbe:	6800      	ldr	r0, [r0, #0]
 8003fc0:	f7ff fee0 	bl	8003d84 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fc4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8003fc6:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fc8:	69d9      	ldr	r1, [r3, #28]
 8003fca:	f041 0108 	orr.w	r1, r1, #8
 8003fce:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003fd0:	69d9      	ldr	r1, [r3, #28]
 8003fd2:	f021 0104 	bic.w	r1, r1, #4
 8003fd6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8003fd8:	69da      	ldr	r2, [r3, #28]
 8003fda:	4302      	orrs	r2, r0
 8003fdc:	61da      	str	r2, [r3, #28]
    break;
 8003fde:	e78f      	b.n	8003f00 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003fe0:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16);
 8003fe2:	68ae      	ldr	r6, [r5, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003fe4:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8003fe6:	682f      	ldr	r7, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003fe8:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003fec:	491b      	ldr	r1, [pc, #108]	; (800405c <HAL_TIM_PWM_ConfigChannel+0x1b8>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003fee:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8003ff0:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2; 
 8003ff2:	6858      	ldr	r0, [r3, #4]
  tmpccer &= ~TIM_CCER_CC5P;
 8003ff4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx = TIMx->CCMR3;
 8003ff8:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 16);
 8003ffc:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004000:	4e15      	ldr	r6, [pc, #84]	; (8004058 <HAL_TIM_PWM_ConfigChannel+0x1b4>)
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004002:	ea0e 0101 	and.w	r1, lr, r1
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004006:	42b3      	cmp	r3, r6
  tmpccmrx |= OC_Config->OCMode;
 8004008:	ea41 0107 	orr.w	r1, r1, r7
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800400c:	d015      	beq.n	800403a <HAL_TIM_PWM_ConfigChannel+0x196>
 800400e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004012:	42b3      	cmp	r3, r6
 8004014:	d011      	beq.n	800403a <HAL_TIM_PWM_ConfigChannel+0x196>
  TIMx->CCR5 = OC_Config->Pulse;
 8004016:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8004018:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800401a:	6559      	str	r1, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800401c:	659e      	str	r6, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;  
 800401e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004020:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8004022:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004024:	f041 0108 	orr.w	r1, r1, #8
 8004028:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800402a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800402c:	f021 0104 	bic.w	r1, r1, #4
 8004030:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8004032:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004034:	4302      	orrs	r2, r0
 8004036:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8004038:	e762      	b.n	8003f00 <HAL_TIM_PWM_ConfigChannel+0x5c>
    tmpcr2 &= ~TIM_CR2_OIS5;
 800403a:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 800403e:	696e      	ldr	r6, [r5, #20]
 8004040:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8004044:	e7e7      	b.n	8004016 <HAL_TIM_PWM_ConfigChannel+0x172>
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004046:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 800404a:	696e      	ldr	r6, [r5, #20]
 800404c:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8004050:	e77c      	b.n	8003f4c <HAL_TIM_PWM_ConfigChannel+0xa8>
 8004052:	bf00      	nop
 8004054:	feff8fff 	.word	0xfeff8fff
 8004058:	40010000 	.word	0x40010000
 800405c:	fffeff8f 	.word	0xfffeff8f

08004060 <HAL_UART_TxCpltCallback>:
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop

08004064 <HAL_UART_RxCpltCallback>:
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop

08004068 <HAL_UART_ErrorCallback>:
  * @brief UART error callbacks
  * @param huart uart handle
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop

0800406c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800406c:	6803      	ldr	r3, [r0, #0]
 800406e:	69da      	ldr	r2, [r3, #28]
{
 8004070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (errorflags == RESET)
 8004074:	0716      	lsls	r6, r2, #28
{
 8004076:	4604      	mov	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004078:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800407a:	6899      	ldr	r1, [r3, #8]
  if (errorflags == RESET)
 800407c:	d10e      	bne.n	800409c <HAL_UART_IRQHandler+0x30>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800407e:	0695      	lsls	r5, r2, #26
 8004080:	d502      	bpl.n	8004088 <HAL_UART_IRQHandler+0x1c>
 8004082:	0681      	lsls	r1, r0, #26
 8004084:	f100 8098 	bmi.w	80041b8 <HAL_UART_IRQHandler+0x14c>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004088:	0616      	lsls	r6, r2, #24
 800408a:	d501      	bpl.n	8004090 <HAL_UART_IRQHandler+0x24>
 800408c:	0605      	lsls	r5, r0, #24
 800408e:	d478      	bmi.n	8004182 <HAL_UART_IRQHandler+0x116>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004090:	0651      	lsls	r1, r2, #25
 8004092:	d501      	bpl.n	8004098 <HAL_UART_IRQHandler+0x2c>
 8004094:	0642      	lsls	r2, r0, #25
 8004096:	d468      	bmi.n	800416a <HAL_UART_IRQHandler+0xfe>
 8004098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800409c:	f011 0101 	ands.w	r1, r1, #1
 80040a0:	461d      	mov	r5, r3
 80040a2:	d14a      	bne.n	800413a <HAL_UART_IRQHandler+0xce>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80040a4:	f410 7f90 	tst.w	r0, #288	; 0x120
 80040a8:	d0ee      	beq.n	8004088 <HAL_UART_IRQHandler+0x1c>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040aa:	f012 0601 	ands.w	r6, r2, #1
 80040ae:	f000 8094 	beq.w	80041da <HAL_UART_IRQHandler+0x16e>
 80040b2:	f410 7680 	ands.w	r6, r0, #256	; 0x100
 80040b6:	d144      	bne.n	8004142 <HAL_UART_IRQHandler+0xd6>
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040b8:	4631      	mov	r1, r6
 80040ba:	ea01 0692 	and.w	r6, r1, r2, lsr #2
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040be:	b12e      	cbz	r6, 80040cc <HAL_UART_IRQHandler+0x60>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80040c0:	2604      	movs	r6, #4
 80040c2:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040c4:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80040c6:	f046 0602 	orr.w	r6, r6, #2
 80040ca:	66e6      	str	r6, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80040cc:	0717      	lsls	r7, r2, #28
 80040ce:	d503      	bpl.n	80040d8 <HAL_UART_IRQHandler+0x6c>
 80040d0:	0686      	lsls	r6, r0, #26
 80040d2:	d47b      	bmi.n	80041cc <HAL_UART_IRQHandler+0x160>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80040d4:	2900      	cmp	r1, #0
 80040d6:	d179      	bne.n	80041cc <HAL_UART_IRQHandler+0x160>
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040d8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80040da:	2900      	cmp	r1, #0
 80040dc:	d0dc      	beq.n	8004098 <HAL_UART_IRQHandler+0x2c>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040de:	0691      	lsls	r1, r2, #26
 80040e0:	d502      	bpl.n	80040e8 <HAL_UART_IRQHandler+0x7c>
 80040e2:	0682      	lsls	r2, r0, #26
 80040e4:	f100 80a6 	bmi.w	8004234 <HAL_UART_IRQHandler+0x1c8>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80040e8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80040ea:	071b      	lsls	r3, r3, #28
 80040ec:	d404      	bmi.n	80040f8 <HAL_UART_IRQHandler+0x8c>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 80040ee:	68ae      	ldr	r6, [r5, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80040f0:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 80040f4:	f000 80a7 	beq.w	8004246 <HAL_UART_IRQHandler+0x1da>
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040f8:	682b      	ldr	r3, [r5, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040fa:	2220      	movs	r2, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004100:	602b      	str	r3, [r5, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004102:	68ab      	ldr	r3, [r5, #8]
 8004104:	f023 0301 	bic.w	r3, r3, #1
 8004108:	60ab      	str	r3, [r5, #8]
  huart->RxState = HAL_UART_STATE_READY;
 800410a:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800410e:	68ab      	ldr	r3, [r5, #8]
 8004110:	065f      	lsls	r7, r3, #25
 8004112:	d564      	bpl.n	80041de <HAL_UART_IRQHandler+0x172>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004114:	68ab      	ldr	r3, [r5, #8]
          if(huart->hdmarx != NULL)
 8004116:	6e62      	ldr	r2, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800411c:	60ab      	str	r3, [r5, #8]
          if(huart->hdmarx != NULL)
 800411e:	2a00      	cmp	r2, #0
 8004120:	d05d      	beq.n	80041de <HAL_UART_IRQHandler+0x172>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004122:	4b74      	ldr	r3, [pc, #464]	; (80042f4 <HAL_UART_IRQHandler+0x288>)
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004124:	4610      	mov	r0, r2
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004126:	6513      	str	r3, [r2, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004128:	f7fd fb62 	bl	80017f0 <HAL_DMA_Abort_IT>
 800412c:	2800      	cmp	r0, #0
 800412e:	d0b3      	beq.n	8004098 <HAL_UART_IRQHandler+0x2c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004130:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 8004132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004136:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004138:	4718      	bx	r3
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800413a:	07d7      	lsls	r7, r2, #31
 800413c:	d507      	bpl.n	800414e <HAL_UART_IRQHandler+0xe2>
 800413e:	05c6      	lsls	r6, r0, #23
 8004140:	d505      	bpl.n	800414e <HAL_UART_IRQHandler+0xe2>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8004142:	2601      	movs	r6, #1
 8004144:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004146:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8004148:	f046 0601 	orr.w	r6, r6, #1
 800414c:	66e6      	str	r6, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800414e:	b2c9      	uxtb	r1, r1
 8004150:	ea11 0652 	ands.w	r6, r1, r2, lsr #1
 8004154:	d0b1      	beq.n	80040ba <HAL_UART_IRQHandler+0x4e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8004156:	2702      	movs	r7, #2
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004158:	4631      	mov	r1, r6
 800415a:	f3c2 0680 	ubfx	r6, r2, #2, #1
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 800415e:	621f      	str	r7, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004160:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 8004162:	f047 0704 	orr.w	r7, r7, #4
 8004166:	66e7      	str	r7, [r4, #108]	; 0x6c
 8004168:	e7a9      	b.n	80040be <HAL_UART_IRQHandler+0x52>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800416a:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800416c:	2120      	movs	r1, #32
  HAL_UART_TxCpltCallback(huart);
 800416e:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004170:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004174:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004176:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
  HAL_UART_TxCpltCallback(huart);
 800417a:	f7ff ff71 	bl	8004060 <HAL_UART_TxCpltCallback>
 800417e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004182:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 8004186:	2a21      	cmp	r2, #33	; 0x21
 8004188:	d186      	bne.n	8004098 <HAL_UART_IRQHandler+0x2c>
    if(huart->TxXferCount == 0U)
 800418a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800418e:	b292      	uxth	r2, r2
 8004190:	2a00      	cmp	r2, #0
 8004192:	d074      	beq.n	800427e <HAL_UART_IRQHandler+0x212>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004194:	68a2      	ldr	r2, [r4, #8]
 8004196:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800419a:	f000 8084 	beq.w	80042a6 <HAL_UART_IRQHandler+0x23a>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 800419e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80041a0:	1c51      	adds	r1, r2, #1
 80041a2:	64e1      	str	r1, [r4, #76]	; 0x4c
 80041a4:	7812      	ldrb	r2, [r2, #0]
 80041a6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 80041a8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80041b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041b8:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
 80041bc:	2a22      	cmp	r2, #34	; 0x22
 80041be:	d013      	beq.n	80041e8 <HAL_UART_IRQHandler+0x17c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041c0:	699a      	ldr	r2, [r3, #24]
 80041c2:	f042 0208 	orr.w	r2, r2, #8
 80041c6:	619a      	str	r2, [r3, #24]
 80041c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80041cc:	2108      	movs	r1, #8
 80041ce:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041d0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80041d2:	f041 0108 	orr.w	r1, r1, #8
 80041d6:	66e1      	str	r1, [r4, #108]	; 0x6c
 80041d8:	e77e      	b.n	80040d8 <HAL_UART_IRQHandler+0x6c>
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041da:	4631      	mov	r1, r6
 80041dc:	e776      	b.n	80040cc <HAL_UART_IRQHandler+0x60>
            HAL_UART_ErrorCallback(huart);
 80041de:	4620      	mov	r0, r4
 80041e0:	f7ff ff42 	bl	8004068 <HAL_UART_ErrorCallback>
 80041e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041e8:	68a2      	ldr	r2, [r4, #8]
  uint16_t uhMask = huart->Mask;
 80041ea:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041ee:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80041f2:	d04e      	beq.n	8004292 <HAL_UART_IRQHandler+0x226>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80041f8:	400b      	ands	r3, r1
 80041fa:	1c51      	adds	r1, r2, #1
 80041fc:	6561      	str	r1, [r4, #84]	; 0x54
 80041fe:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0)
 8004200:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8004204:	3b01      	subs	r3, #1
 8004206:	b29b      	uxth	r3, r3
 8004208:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800420c:	2b00      	cmp	r3, #0
 800420e:	f47f af43 	bne.w	8004098 <HAL_UART_IRQHandler+0x2c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004212:	6823      	ldr	r3, [r4, #0]
      huart->RxState = HAL_UART_STATE_READY;
 8004214:	2120      	movs	r1, #32
      HAL_UART_RxCpltCallback(huart);
 8004216:	4620      	mov	r0, r4
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800421e:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004220:	689a      	ldr	r2, [r3, #8]
 8004222:	f022 0201 	bic.w	r2, r2, #1
 8004226:	609a      	str	r2, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8004228:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 800422c:	f7ff ff1a 	bl	8004064 <HAL_UART_RxCpltCallback>
 8004230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004234:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
 8004238:	2a22      	cmp	r2, #34	; 0x22
 800423a:	d00a      	beq.n	8004252 <HAL_UART_IRQHandler+0x1e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800423c:	699a      	ldr	r2, [r3, #24]
 800423e:	f042 0208 	orr.w	r2, r2, #8
 8004242:	619a      	str	r2, [r3, #24]
 8004244:	e750      	b.n	80040e8 <HAL_UART_IRQHandler+0x7c>
        HAL_UART_ErrorCallback(huart);
 8004246:	4620      	mov	r0, r4
 8004248:	f7ff ff0e 	bl	8004068 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800424c:	66e6      	str	r6, [r4, #108]	; 0x6c
 800424e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004252:	68a2      	ldr	r2, [r4, #8]
  uint16_t uhMask = huart->Mask;
 8004254:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004258:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800425c:	d03f      	beq.n	80042de <HAL_UART_IRQHandler+0x272>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004262:	400b      	ands	r3, r1
 8004264:	1c51      	adds	r1, r2, #1
 8004266:	6561      	str	r1, [r4, #84]	; 0x54
 8004268:	7013      	strb	r3, [r2, #0]
 800426a:	6823      	ldr	r3, [r4, #0]
    if(--huart->RxXferCount == 0)
 800426c:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8004270:	3a01      	subs	r2, #1
 8004272:	b292      	uxth	r2, r2
 8004274:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8004278:	b30a      	cbz	r2, 80042be <HAL_UART_IRQHandler+0x252>
 800427a:	461d      	mov	r5, r3
 800427c:	e734      	b.n	80040e8 <HAL_UART_IRQHandler+0x7c>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004284:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004292:	6922      	ldr	r2, [r4, #16]
 8004294:	2a00      	cmp	r2, #0
 8004296:	d1ad      	bne.n	80041f4 <HAL_UART_IRQHandler+0x188>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800429c:	400b      	ands	r3, r1
 800429e:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr +=2;
 80042a2:	6562      	str	r2, [r4, #84]	; 0x54
 80042a4:	e7ac      	b.n	8004200 <HAL_UART_IRQHandler+0x194>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042a6:	6922      	ldr	r2, [r4, #16]
 80042a8:	2a00      	cmp	r2, #0
 80042aa:	f47f af78 	bne.w	800419e <HAL_UART_IRQHandler+0x132>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80042ae:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80042b0:	f832 1b02 	ldrh.w	r1, [r2], #2
 80042b4:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80042b8:	6299      	str	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80042ba:	64e2      	str	r2, [r4, #76]	; 0x4c
 80042bc:	e774      	b.n	80041a8 <HAL_UART_IRQHandler+0x13c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042be:	681a      	ldr	r2, [r3, #0]
      huart->RxState = HAL_UART_STATE_READY;
 80042c0:	2120      	movs	r1, #32
      HAL_UART_RxCpltCallback(huart);
 80042c2:	4620      	mov	r0, r4
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042c4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80042c8:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	f022 0201 	bic.w	r2, r2, #1
 80042d0:	609a      	str	r2, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80042d2:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 80042d6:	f7ff fec5 	bl	8004064 <HAL_UART_RxCpltCallback>
 80042da:	6825      	ldr	r5, [r4, #0]
 80042dc:	e704      	b.n	80040e8 <HAL_UART_IRQHandler+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042de:	6922      	ldr	r2, [r4, #16]
 80042e0:	2a00      	cmp	r2, #0
 80042e2:	d1bc      	bne.n	800425e <HAL_UART_IRQHandler+0x1f2>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80042e4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80042e6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80042e8:	4001      	ands	r1, r0
 80042ea:	f822 1b02 	strh.w	r1, [r2], #2
      huart->pRxBuffPtr +=2;
 80042ee:	6562      	str	r2, [r4, #84]	; 0x54
 80042f0:	e7bc      	b.n	800426c <HAL_UART_IRQHandler+0x200>
 80042f2:	bf00      	nop
 80042f4:	080042f9 	.word	0x080042f9

080042f8 <UART_DMAAbortOnError>:
{
 80042f8:	b508      	push	{r3, lr}
  huart->RxXferCount = 0U;
 80042fa:	2200      	movs	r2, #0
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80042fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80042fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  HAL_UART_ErrorCallback(huart);
 8004302:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 8004304:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8004308:	f7ff feae 	bl	8004068 <HAL_UART_ErrorCallback>
 800430c:	bd08      	pop	{r3, pc}
 800430e:	bf00      	nop

08004310 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004310:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004312:	07da      	lsls	r2, r3, #31
{
 8004314:	b410      	push	{r4}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004316:	d506      	bpl.n	8004326 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004318:	6801      	ldr	r1, [r0, #0]
 800431a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800431c:	684a      	ldr	r2, [r1, #4]
 800431e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004322:	4322      	orrs	r2, r4
 8004324:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004326:	079c      	lsls	r4, r3, #30
 8004328:	d506      	bpl.n	8004338 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800432a:	6801      	ldr	r1, [r0, #0]
 800432c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800432e:	684a      	ldr	r2, [r1, #4]
 8004330:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004334:	4322      	orrs	r2, r4
 8004336:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004338:	0759      	lsls	r1, r3, #29
 800433a:	d506      	bpl.n	800434a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800433c:	6801      	ldr	r1, [r0, #0]
 800433e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004340:	684a      	ldr	r2, [r1, #4]
 8004342:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004346:	4322      	orrs	r2, r4
 8004348:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800434a:	071a      	lsls	r2, r3, #28
 800434c:	d506      	bpl.n	800435c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800434e:	6801      	ldr	r1, [r0, #0]
 8004350:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004352:	684a      	ldr	r2, [r1, #4]
 8004354:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004358:	4322      	orrs	r2, r4
 800435a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800435c:	06dc      	lsls	r4, r3, #27
 800435e:	d506      	bpl.n	800436e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004360:	6801      	ldr	r1, [r0, #0]
 8004362:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004364:	688a      	ldr	r2, [r1, #8]
 8004366:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800436a:	4322      	orrs	r2, r4
 800436c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800436e:	0699      	lsls	r1, r3, #26
 8004370:	d506      	bpl.n	8004380 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004372:	6801      	ldr	r1, [r0, #0]
 8004374:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004376:	688a      	ldr	r2, [r1, #8]
 8004378:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800437c:	4322      	orrs	r2, r4
 800437e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004380:	065a      	lsls	r2, r3, #25
 8004382:	d50a      	bpl.n	800439a <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004384:	6801      	ldr	r1, [r0, #0]
 8004386:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004388:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800438a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800438e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004392:	ea42 0204 	orr.w	r2, r2, r4
 8004396:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004398:	d00b      	beq.n	80043b2 <UART_AdvFeatureConfig+0xa2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800439a:	061b      	lsls	r3, r3, #24
 800439c:	d506      	bpl.n	80043ac <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800439e:	6802      	ldr	r2, [r0, #0]
 80043a0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80043a2:	6853      	ldr	r3, [r2, #4]
 80043a4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80043a8:	430b      	orrs	r3, r1
 80043aa:	6053      	str	r3, [r2, #4]
  }
}
 80043ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043b0:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043b2:	684a      	ldr	r2, [r1, #4]
 80043b4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80043b6:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80043ba:	4322      	orrs	r2, r4
 80043bc:	604a      	str	r2, [r1, #4]
 80043be:	e7ec      	b.n	800439a <UART_AdvFeatureConfig+0x8a>

080043c0 <HAL_UART_Init>:
  if(huart == NULL)
 80043c0:	2800      	cmp	r0, #0
 80043c2:	f000 81be 	beq.w	8004742 <HAL_UART_Init+0x382>
{
 80043c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 80043c8:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80043cc:	4604      	mov	r4, r0
 80043ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d047      	beq.n	8004466 <HAL_UART_Init+0xa6>
  __HAL_UART_DISABLE(huart);
 80043d6:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80043d8:	2224      	movs	r2, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043da:	6921      	ldr	r1, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 80043dc:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043e0:	68a3      	ldr	r3, [r4, #8]
  __HAL_UART_DISABLE(huart);
 80043e2:	682a      	ldr	r2, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043e4:	430b      	orrs	r3, r1
 80043e6:	6961      	ldr	r1, [r4, #20]
  __HAL_UART_DISABLE(huart);
 80043e8:	f022 0201 	bic.w	r2, r2, #1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80043ec:	48b8      	ldr	r0, [pc, #736]	; (80046d0 <HAL_UART_Init+0x310>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043ee:	430b      	orrs	r3, r1
 80043f0:	69e1      	ldr	r1, [r4, #28]
  __HAL_UART_DISABLE(huart);
 80043f2:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80043f4:	682a      	ldr	r2, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043f6:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043f8:	68e7      	ldr	r7, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80043fa:	4010      	ands	r0, r2
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80043fc:	6a26      	ldr	r6, [r4, #32]
 80043fe:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004400:	4303      	orrs	r3, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004402:	48b4      	ldr	r0, [pc, #720]	; (80046d4 <HAL_UART_Init+0x314>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8004404:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004406:	602b      	str	r3, [r5, #0]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004408:	4285      	cmp	r5, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800440a:	686b      	ldr	r3, [r5, #4]
 800440c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004410:	ea43 0307 	orr.w	r3, r3, r7
 8004414:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8004416:	68ab      	ldr	r3, [r5, #8]
 8004418:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800441c:	ea42 0203 	orr.w	r2, r2, r3
 8004420:	60aa      	str	r2, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004422:	f000 8094 	beq.w	800454e <HAL_UART_Init+0x18e>
 8004426:	4bac      	ldr	r3, [pc, #688]	; (80046d8 <HAL_UART_Init+0x318>)
 8004428:	429d      	cmp	r5, r3
 800442a:	f000 80a4 	beq.w	8004576 <HAL_UART_Init+0x1b6>
 800442e:	4bab      	ldr	r3, [pc, #684]	; (80046dc <HAL_UART_Init+0x31c>)
 8004430:	429d      	cmp	r5, r3
 8004432:	f000 80a9 	beq.w	8004588 <HAL_UART_Init+0x1c8>
 8004436:	4baa      	ldr	r3, [pc, #680]	; (80046e0 <HAL_UART_Init+0x320>)
 8004438:	429d      	cmp	r5, r3
 800443a:	d019      	beq.n	8004470 <HAL_UART_Init+0xb0>
 800443c:	4ba9      	ldr	r3, [pc, #676]	; (80046e4 <HAL_UART_Init+0x324>)
 800443e:	429d      	cmp	r5, r3
 8004440:	d027      	beq.n	8004492 <HAL_UART_Init+0xd2>
 8004442:	4ba9      	ldr	r3, [pc, #676]	; (80046e8 <HAL_UART_Init+0x328>)
 8004444:	429d      	cmp	r5, r3
 8004446:	f000 80c8 	beq.w	80045da <HAL_UART_Init+0x21a>
 800444a:	4ba8      	ldr	r3, [pc, #672]	; (80046ec <HAL_UART_Init+0x32c>)
 800444c:	429d      	cmp	r5, r3
 800444e:	f000 80b5 	beq.w	80045bc <HAL_UART_Init+0x1fc>
 8004452:	4ba7      	ldr	r3, [pc, #668]	; (80046f0 <HAL_UART_Init+0x330>)
 8004454:	429d      	cmp	r5, r3
 8004456:	f000 8159 	beq.w	800470c <HAL_UART_Init+0x34c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800445a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800445e:	f000 8168 	beq.w	8004732 <HAL_UART_Init+0x372>
    return HAL_ERROR;
 8004462:	2001      	movs	r0, #1
 8004464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 8004466:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 800446a:	f002 fecb 	bl	8007204 <HAL_UART_MspInit>
 800446e:	e7b2      	b.n	80043d6 <HAL_UART_Init+0x16>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004470:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8004474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004478:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800447c:	2b40      	cmp	r3, #64	; 0x40
 800447e:	f000 80a6 	beq.w	80045ce <HAL_UART_Init+0x20e>
 8004482:	d912      	bls.n	80044aa <HAL_UART_Init+0xea>
 8004484:	2b80      	cmp	r3, #128	; 0x80
 8004486:	f000 8103 	beq.w	8004690 <HAL_UART_Init+0x2d0>
 800448a:	2bc0      	cmp	r3, #192	; 0xc0
 800448c:	f000 808a 	beq.w	80045a4 <HAL_UART_Init+0x1e4>
 8004490:	e7e3      	b.n	800445a <HAL_UART_Init+0x9a>
 8004492:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 8004496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800449e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044a2:	f000 8094 	beq.w	80045ce <HAL_UART_Init+0x20e>
 80044a6:	f200 80e6 	bhi.w	8004676 <HAL_UART_Init+0x2b6>
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1d5      	bne.n	800445a <HAL_UART_Init+0x9a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044ae:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80044b2:	f000 80e7 	beq.w	8004684 <HAL_UART_Init+0x2c4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80044b6:	f7fe fde1 	bl	800307c <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80044ba:	6862      	ldr	r2, [r4, #4]
 80044bc:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80044c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	60eb      	str	r3, [r5, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d13b      	bne.n	8004546 <HAL_UART_Init+0x186>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044ce:	6823      	ldr	r3, [r4, #0]
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d0:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044e0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	f042 0201 	orr.w	r2, r2, #1
 80044e8:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ea:	66e1      	str	r1, [r4, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80044ec:	f7fc ffac 	bl	8001448 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044f0:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80044f2:	4606      	mov	r6, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	0712      	lsls	r2, r2, #28
 80044f8:	d409      	bmi.n	800450e <HAL_UART_Init+0x14e>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 80044fa:	2220      	movs	r2, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044fc:	2300      	movs	r3, #0
  huart->gState= HAL_UART_STATE_READY;
 80044fe:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69

  return HAL_OK;
 8004502:	4618      	mov	r0, r3
  huart->RxState= HAL_UART_STATE_READY;
 8004504:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
  __HAL_UNLOCK(huart);
 8004508:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800450c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800450e:	4f79      	ldr	r7, [pc, #484]	; (80046f4 <HAL_UART_Init+0x334>)
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004510:	69dd      	ldr	r5, [r3, #28]
 8004512:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 8004516:	d1f0      	bne.n	80044fa <HAL_UART_Init+0x13a>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8004518:	f7fc ff96 	bl	8001448 <HAL_GetTick>
 800451c:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800451e:	6823      	ldr	r3, [r4, #0]
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8004520:	42b8      	cmp	r0, r7
 8004522:	d9f5      	bls.n	8004510 <HAL_UART_Init+0x150>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004524:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 8004526:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 8004528:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800452a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800452e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004530:	689a      	ldr	r2, [r3, #8]
 8004532:	f022 0201 	bic.w	r2, r2, #1
 8004536:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8004538:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
        __HAL_UNLOCK(huart);
 800453c:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 8004540:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
 8004544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    UART_AdvFeatureConfig(huart);
 8004546:	4620      	mov	r0, r4
 8004548:	f7ff fee2 	bl	8004310 <UART_AdvFeatureConfig>
 800454c:	e7bf      	b.n	80044ce <HAL_UART_Init+0x10e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800454e:	4b6a      	ldr	r3, [pc, #424]	; (80046f8 <HAL_UART_Init+0x338>)
 8004550:	4a6a      	ldr	r2, [pc, #424]	; (80046fc <HAL_UART_Init+0x33c>)
 8004552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800455c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004560:	d159      	bne.n	8004616 <HAL_UART_Init+0x256>
    switch (clocksource)
 8004562:	2b08      	cmp	r3, #8
 8004564:	f200 80e5 	bhi.w	8004732 <HAL_UART_Init+0x372>
 8004568:	e8df f003 	tbb	[pc, r3]
 800456c:	e395748c 	.word	0xe395748c
 8004570:	e3e3e38f 	.word	0xe3e3e38f
 8004574:	9d          	.byte	0x9d
 8004575:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004576:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800457a:	4a61      	ldr	r2, [pc, #388]	; (8004700 <HAL_UART_Init+0x340>)
 800457c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004580:	f003 030c 	and.w	r3, r3, #12
 8004584:	5cd3      	ldrb	r3, [r2, r3]
 8004586:	e7e9      	b.n	800455c <HAL_UART_Init+0x19c>
 8004588:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 800458c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004590:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004594:	2b10      	cmp	r3, #16
 8004596:	d01a      	beq.n	80045ce <HAL_UART_Init+0x20e>
 8004598:	d987      	bls.n	80044aa <HAL_UART_Init+0xea>
 800459a:	2b20      	cmp	r3, #32
 800459c:	d078      	beq.n	8004690 <HAL_UART_Init+0x2d0>
 800459e:	2b30      	cmp	r3, #48	; 0x30
 80045a0:	f47f af5b 	bne.w	800445a <HAL_UART_Init+0x9a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045a4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80045a8:	d07d      	beq.n	80046a6 <HAL_UART_Init+0x2e6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80045aa:	6862      	ldr	r2, [r4, #4]
 80045ac:	0853      	lsrs	r3, r2, #1
 80045ae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80045b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	60eb      	str	r3, [r5, #12]
 80045ba:	e785      	b.n	80044c8 <HAL_UART_Init+0x108>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045bc:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 80045c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80045c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045cc:	d116      	bne.n	80045fc <HAL_UART_Init+0x23c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045ce:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80045d2:	d05a      	beq.n	800468a <HAL_UART_Init+0x2ca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80045d4:	f7fe fd18 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 80045d8:	e76f      	b.n	80044ba <HAL_UART_Init+0xfa>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045da:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 80045de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80045e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ea:	d0f0      	beq.n	80045ce <HAL_UART_Init+0x20e>
 80045ec:	d92c      	bls.n	8004648 <HAL_UART_Init+0x288>
 80045ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045f2:	d04d      	beq.n	8004690 <HAL_UART_Init+0x2d0>
 80045f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045f8:	d0d4      	beq.n	80045a4 <HAL_UART_Init+0x1e4>
 80045fa:	e72e      	b.n	800445a <HAL_UART_Init+0x9a>
 80045fc:	f240 809d 	bls.w	800473a <HAL_UART_Init+0x37a>
 8004600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004604:	d044      	beq.n	8004690 <HAL_UART_Init+0x2d0>
 8004606:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800460a:	d0cb      	beq.n	80045a4 <HAL_UART_Init+0x1e4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800460c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004610:	f000 808f 	beq.w	8004732 <HAL_UART_Init+0x372>
 8004614:	2310      	movs	r3, #16
    switch (clocksource)
 8004616:	2b08      	cmp	r3, #8
 8004618:	f63f af23 	bhi.w	8004462 <HAL_UART_Init+0xa2>
 800461c:	a201      	add	r2, pc, #4	; (adr r2, 8004624 <HAL_UART_Init+0x264>)
 800461e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004622:	bf00      	nop
 8004624:	080044b7 	.word	0x080044b7
 8004628:	080046b7 	.word	0x080046b7
 800462c:	080046bd 	.word	0x080046bd
 8004630:	08004463 	.word	0x08004463
 8004634:	080045d5 	.word	0x080045d5
 8004638:	08004463 	.word	0x08004463
 800463c:	08004463 	.word	0x08004463
 8004640:	08004463 	.word	0x08004463
 8004644:	080045ab 	.word	0x080045ab
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004648:	2b00      	cmp	r3, #0
 800464a:	f47f af06 	bne.w	800445a <HAL_UART_Init+0x9a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800464e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004652:	d130      	bne.n	80046b6 <HAL_UART_Init+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004654:	f7fe fd22 	bl	800309c <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004658:	6862      	ldr	r2, [r4, #4]
 800465a:	6825      	ldr	r5, [r4, #0]
 800465c:	0853      	lsrs	r3, r2, #1
 800465e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004662:	fbb3 f3f2 	udiv	r3, r3, r2
 8004666:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 8004668:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800466c:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8004670:	4313      	orrs	r3, r2
 8004672:	60eb      	str	r3, [r5, #12]
 8004674:	e728      	b.n	80044c8 <HAL_UART_Init+0x108>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800467a:	d009      	beq.n	8004690 <HAL_UART_Init+0x2d0>
 800467c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004680:	d090      	beq.n	80045a4 <HAL_UART_Init+0x1e4>
 8004682:	e6ea      	b.n	800445a <HAL_UART_Init+0x9a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004684:	f7fe fcfa 	bl	800307c <HAL_RCC_GetPCLK1Freq>
 8004688:	e7e6      	b.n	8004658 <HAL_UART_Init+0x298>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800468a:	f7fe fcbd 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 800468e:	e7e3      	b.n	8004658 <HAL_UART_Init+0x298>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004690:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004694:	d112      	bne.n	80046bc <HAL_UART_Init+0x2fc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004696:	6862      	ldr	r2, [r4, #4]
 8004698:	4b1a      	ldr	r3, [pc, #104]	; (8004704 <HAL_UART_Init+0x344>)
 800469a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800469e:	fbb3 f3f2 	udiv	r3, r3, r2
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	e7e0      	b.n	8004668 <HAL_UART_Init+0x2a8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80046a6:	6862      	ldr	r2, [r4, #4]
 80046a8:	0853      	lsrs	r3, r2, #1
 80046aa:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80046ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	e7d8      	b.n	8004668 <HAL_UART_Init+0x2a8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80046b6:	f7fe fcf1 	bl	800309c <HAL_RCC_GetPCLK2Freq>
 80046ba:	e6fe      	b.n	80044ba <HAL_UART_Init+0xfa>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80046bc:	6862      	ldr	r2, [r4, #4]
 80046be:	4b12      	ldr	r3, [pc, #72]	; (8004708 <HAL_UART_Init+0x348>)
 80046c0:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80046c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	60eb      	str	r3, [r5, #12]
 80046cc:	e6fc      	b.n	80044c8 <HAL_UART_Init+0x108>
 80046ce:	bf00      	nop
 80046d0:	efff69f3 	.word	0xefff69f3
 80046d4:	40011000 	.word	0x40011000
 80046d8:	40004400 	.word	0x40004400
 80046dc:	40004800 	.word	0x40004800
 80046e0:	40004c00 	.word	0x40004c00
 80046e4:	40005000 	.word	0x40005000
 80046e8:	40011400 	.word	0x40011400
 80046ec:	40007800 	.word	0x40007800
 80046f0:	40007c00 	.word	0x40007c00
 80046f4:	01fffffe 	.word	0x01fffffe
 80046f8:	40023800 	.word	0x40023800
 80046fc:	08008418 	.word	0x08008418
 8004700:	0800841c 	.word	0x0800841c
 8004704:	01e84800 	.word	0x01e84800
 8004708:	00f42400 	.word	0x00f42400
  UART_GETCLOCKSOURCE(huart, clocksource);
 800470c:	f503 33de 	add.w	r3, r3, #113664	; 0x1bc00
 8004710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004714:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004718:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800471c:	f43f af57 	beq.w	80045ce <HAL_UART_Init+0x20e>
 8004720:	d90b      	bls.n	800473a <HAL_UART_Init+0x37a>
 8004722:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004726:	d0b3      	beq.n	8004690 <HAL_UART_Init+0x2d0>
 8004728:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800472c:	f43f af3a 	beq.w	80045a4 <HAL_UART_Init+0x1e4>
 8004730:	e76c      	b.n	800460c <HAL_UART_Init+0x24c>
    huart->Instance->BRR = brrtemp;
 8004732:	2300      	movs	r3, #0
    return HAL_ERROR;
 8004734:	2001      	movs	r0, #1
    huart->Instance->BRR = brrtemp;
 8004736:	60eb      	str	r3, [r5, #12]
 8004738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800473a:	2b00      	cmp	r3, #0
 800473c:	f43f aeb7 	beq.w	80044ae <HAL_UART_Init+0xee>
 8004740:	e764      	b.n	800460c <HAL_UART_Init+0x24c>
    return HAL_ERROR;
 8004742:	2001      	movs	r0, #1
}
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop

08004748 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004748:	b084      	sub	sp, #16
 800474a:	b430      	push	{r4, r5}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800474c:	9d08      	ldr	r5, [sp, #32]
{
 800474e:	ac03      	add	r4, sp, #12
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004750:	2d01      	cmp	r5, #1
{
 8004752:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004756:	d027      	beq.n	80047a8 <USB_CoreInit+0x60>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004758:	68c2      	ldr	r2, [r0, #12]
 800475a:	4b27      	ldr	r3, [pc, #156]	; (80047f8 <USB_CoreInit+0xb0>)
 800475c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004760:	60c2      	str	r2, [r0, #12]
 8004762:	e001      	b.n	8004768 <USB_CoreInit+0x20>
  uint32_t count = 0;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 8004764:	3b01      	subs	r3, #1
 8004766:	d00d      	beq.n	8004784 <USB_CoreInit+0x3c>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 8004768:	6902      	ldr	r2, [r0, #16]
 800476a:	2a00      	cmp	r2, #0
 800476c:	dafa      	bge.n	8004764 <USB_CoreInit+0x1c>

  /* Core Soft Reset */
  count = 0;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800476e:	6902      	ldr	r2, [r0, #16]
 8004770:	4b21      	ldr	r3, [pc, #132]	; (80047f8 <USB_CoreInit+0xb0>)
 8004772:	f042 0201 	orr.w	r2, r2, #1
 8004776:	6102      	str	r2, [r0, #16]
 8004778:	e001      	b.n	800477e <USB_CoreInit+0x36>

  do
  {
    if (++count > 200000)
 800477a:	3b01      	subs	r3, #1
 800477c:	d002      	beq.n	8004784 <USB_CoreInit+0x3c>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800477e:	6902      	ldr	r2, [r0, #16]
 8004780:	07d2      	lsls	r2, r2, #31
 8004782:	d4fa      	bmi.n	800477a <USB_CoreInit+0x32>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8004784:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004788:	6383      	str	r3, [r0, #56]	; 0x38
  if(cfg.dma_enable == ENABLE)
 800478a:	9b06      	ldr	r3, [sp, #24]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d107      	bne.n	80047a0 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004790:	6883      	ldr	r3, [r0, #8]
 8004792:	f043 0306 	orr.w	r3, r3, #6
 8004796:	6083      	str	r3, [r0, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004798:	6883      	ldr	r3, [r0, #8]
 800479a:	f043 0320 	orr.w	r3, r3, #32
 800479e:	6083      	str	r3, [r0, #8]
}
 80047a0:	2000      	movs	r0, #0
 80047a2:	bc30      	pop	{r4, r5}
 80047a4:	b004      	add	sp, #16
 80047a6:	4770      	bx	lr
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047a8:	6b82      	ldr	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80047aa:	4b14      	ldr	r3, [pc, #80]	; (80047fc <USB_CoreInit+0xb4>)
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if(cfg.use_external_vbus == 1)
 80047b0:	990f      	ldr	r1, [sp, #60]	; 0x3c
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047b2:	6382      	str	r2, [r0, #56]	; 0x38
    if(cfg.use_external_vbus == 1)
 80047b4:	2901      	cmp	r1, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80047b6:	68c2      	ldr	r2, [r0, #12]
 80047b8:	ea03 0302 	and.w	r3, r3, r2
 80047bc:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80047be:	68c3      	ldr	r3, [r0, #12]
 80047c0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80047c4:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1)
 80047c6:	d012      	beq.n	80047ee <USB_CoreInit+0xa6>
{
 80047c8:	4b0b      	ldr	r3, [pc, #44]	; (80047f8 <USB_CoreInit+0xb0>)
 80047ca:	e001      	b.n	80047d0 <USB_CoreInit+0x88>
    if (++count > 200000)
 80047cc:	3b01      	subs	r3, #1
 80047ce:	d0dc      	beq.n	800478a <USB_CoreInit+0x42>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 80047d0:	6902      	ldr	r2, [r0, #16]
 80047d2:	2a00      	cmp	r2, #0
 80047d4:	dafa      	bge.n	80047cc <USB_CoreInit+0x84>
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80047d6:	6902      	ldr	r2, [r0, #16]
 80047d8:	4b07      	ldr	r3, [pc, #28]	; (80047f8 <USB_CoreInit+0xb0>)
 80047da:	f042 0201 	orr.w	r2, r2, #1
 80047de:	6102      	str	r2, [r0, #16]
 80047e0:	e001      	b.n	80047e6 <USB_CoreInit+0x9e>
    if (++count > 200000)
 80047e2:	3b01      	subs	r3, #1
 80047e4:	d0d1      	beq.n	800478a <USB_CoreInit+0x42>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80047e6:	6902      	ldr	r2, [r0, #16]
 80047e8:	07d1      	lsls	r1, r2, #31
 80047ea:	d4fa      	bmi.n	80047e2 <USB_CoreInit+0x9a>
 80047ec:	e7cd      	b.n	800478a <USB_CoreInit+0x42>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80047ee:	68c3      	ldr	r3, [r0, #12]
 80047f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047f4:	60c3      	str	r3, [r0, #12]
 80047f6:	e7e7      	b.n	80047c8 <USB_CoreInit+0x80>
 80047f8:	00030d40 	.word	0x00030d40
 80047fc:	ffbdffbf 	.word	0xffbdffbf

08004800 <USB_EnableGlobalInt>:
{
 8004800:	4602      	mov	r2, r0
}
 8004802:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004804:	6893      	ldr	r3, [r2, #8]
 8004806:	f043 0301 	orr.w	r3, r3, #1
 800480a:	6093      	str	r3, [r2, #8]
}
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop

08004810 <USB_DisableGlobalInt>:
{
 8004810:	4602      	mov	r2, r0
}
 8004812:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004814:	6893      	ldr	r3, [r2, #8]
 8004816:	f023 0301 	bic.w	r3, r3, #1
 800481a:	6093      	str	r3, [r2, #8]
}
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop

08004820 <USB_SetCurrentMode>:
{
 8004820:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004822:	68c3      	ldr	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 8004824:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004826:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800482a:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 800482c:	d009      	beq.n	8004842 <USB_SetCurrentMode+0x22>
  else if ( mode == USB_OTG_DEVICE_MODE)
 800482e:	b919      	cbnz	r1, 8004838 <USB_SetCurrentMode+0x18>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004830:	68c3      	ldr	r3, [r0, #12]
 8004832:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004836:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50);
 8004838:	2032      	movs	r0, #50	; 0x32
 800483a:	f7fc fe0b 	bl	8001454 <HAL_Delay>
}
 800483e:	2000      	movs	r0, #0
 8004840:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004842:	68c3      	ldr	r3, [r0, #12]
 8004844:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004848:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50);
 800484a:	2032      	movs	r0, #50	; 0x32
 800484c:	f7fc fe02 	bl	8001454 <HAL_Delay>
}
 8004850:	2000      	movs	r0, #0
 8004852:	bd08      	pop	{r3, pc}

08004854 <USB_DevInit>:
{
 8004854:	b084      	sub	sp, #16
 8004856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800485a:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 800485c:	af07      	add	r7, sp, #28
 800485e:	9c11      	ldr	r4, [sp, #68]	; 0x44
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004860:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
 8004864:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8004868:	6386      	str	r6, [r0, #56]	; 0x38
{
 800486a:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 800486e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004870:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  if (cfg.vbus_sensing_enable == 0)
 8004872:	b95c      	cbnz	r4, 800488c <USB_DevInit+0x38>
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 8004874:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004876:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800487a:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800487c:	6802      	ldr	r2, [r0, #0]
 800487e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004882:	6002      	str	r2, [r0, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004884:	6802      	ldr	r2, [r0, #0]
 8004886:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800488a:	6002      	str	r2, [r0, #0]
  USBx_PCGCCTL = 0;
 800488c:	2200      	movs	r2, #0
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 800488e:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004890:	f500 6600 	add.w	r6, r0, #2048	; 0x800
  USBx_PCGCCTL = 0;
 8004894:	f8c0 2e00 	str.w	r2, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004898:	f8d0 2800 	ldr.w	r2, [r0, #2048]	; 0x800
 800489c:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80048a0:	f000 8094 	beq.w	80049cc <USB_DevInit+0x178>
  else if(cfg.phy_itface  == USB_OTG_HS_EMBEDDED_PHY)
 80048a4:	2b03      	cmp	r3, #3
  USBx_DEVICE->DCFG |= speed;
 80048a6:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
  else if(cfg.phy_itface  == USB_OTG_HS_EMBEDDED_PHY)
 80048aa:	f000 8099 	beq.w	80049e0 <USB_DevInit+0x18c>
  USBx_DEVICE->DCFG |= speed;
 80048ae:	f043 0303 	orr.w	r3, r3, #3
 80048b2:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6));
 80048b6:	f44f 6284 	mov.w	r2, #1056	; 0x420
 80048ba:	4b4d      	ldr	r3, [pc, #308]	; (80049f0 <USB_DevInit+0x19c>)
 80048bc:	6102      	str	r2, [r0, #16]
 80048be:	e001      	b.n	80048c4 <USB_DevInit+0x70>
    if (++count > 200000)
 80048c0:	3b01      	subs	r3, #1
 80048c2:	d002      	beq.n	80048ca <USB_DevInit+0x76>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048c4:	6902      	ldr	r2, [r0, #16]
 80048c6:	0695      	lsls	r5, r2, #26
 80048c8:	d4fa      	bmi.n	80048c0 <USB_DevInit+0x6c>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048ca:	2210      	movs	r2, #16
 80048cc:	4b48      	ldr	r3, [pc, #288]	; (80049f0 <USB_DevInit+0x19c>)
 80048ce:	6102      	str	r2, [r0, #16]
 80048d0:	e001      	b.n	80048d6 <USB_DevInit+0x82>
    if (++count > 200000)
 80048d2:	3b01      	subs	r3, #1
 80048d4:	d002      	beq.n	80048dc <USB_DevInit+0x88>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048d6:	6902      	ldr	r2, [r0, #16]
 80048d8:	06d2      	lsls	r2, r2, #27
 80048da:	d4fa      	bmi.n	80048d2 <USB_DevInit+0x7e>
  USBx_DEVICE->DIEPMSK = 0;
 80048dc:	2200      	movs	r2, #0
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 80048de:	f04f 33ff 	mov.w	r3, #4294967295
  USBx_DEVICE->DIEPMSK = 0;
 80048e2:	6132      	str	r2, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0;
 80048e4:	6172      	str	r2, [r6, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 80048e6:	61b3      	str	r3, [r6, #24]
  USBx_DEVICE->DAINTMSK = 0;
 80048e8:	61f2      	str	r2, [r6, #28]
  for (i = 0; i < cfg.dev_endpoints; i++)
 80048ea:	b381      	cbz	r1, 800494e <USB_DevInit+0xfa>
 80048ec:	f500 6310 	add.w	r3, r0, #2304	; 0x900
    USBx_INEP(i)->DIEPINT  = 0xFF;
 80048f0:	f04f 0cff 	mov.w	ip, #255	; 0xff
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80048f4:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
      USBx_INEP(i)->DIEPCTL = 0;
 80048f8:	4615      	mov	r5, r2
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048fa:	681f      	ldr	r7, [r3, #0]
  for (i = 0; i < cfg.dev_endpoints; i++)
 80048fc:	3201      	adds	r2, #1
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048fe:	2f00      	cmp	r7, #0
 8004900:	db4d      	blt.n	800499e <USB_DevInit+0x14a>
  for (i = 0; i < cfg.dev_endpoints; i++)
 8004902:	428a      	cmp	r2, r1
      USBx_INEP(i)->DIEPCTL = 0;
 8004904:	601d      	str	r5, [r3, #0]
    USBx_INEP(i)->DIEPTSIZ = 0;
 8004906:	611d      	str	r5, [r3, #16]
 8004908:	f103 0320 	add.w	r3, r3, #32
    USBx_INEP(i)->DIEPINT  = 0xFF;
 800490c:	f843 cc18 	str.w	ip, [r3, #-24]
  for (i = 0; i < cfg.dev_endpoints; i++)
 8004910:	d1f3      	bne.n	80048fa <USB_DevInit+0xa6>
 8004912:	2200      	movs	r2, #0
 8004914:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 8004918:	f04f 0cff 	mov.w	ip, #255	; 0xff
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 800491c:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
      USBx_OUTEP(i)->DOEPCTL = 0;
 8004920:	4615      	mov	r5, r2
 8004922:	e007      	b.n	8004934 <USB_DevInit+0xe0>
  for (i = 0; i < cfg.dev_endpoints; i++)
 8004924:	428a      	cmp	r2, r1
      USBx_OUTEP(i)->DOEPCTL = 0;
 8004926:	601d      	str	r5, [r3, #0]
    USBx_OUTEP(i)->DOEPTSIZ = 0;
 8004928:	611d      	str	r5, [r3, #16]
 800492a:	f103 0320 	add.w	r3, r3, #32
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 800492e:	f843 cc18 	str.w	ip, [r3, #-24]
  for (i = 0; i < cfg.dev_endpoints; i++)
 8004932:	d00c      	beq.n	800494e <USB_DevInit+0xfa>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004934:	681f      	ldr	r7, [r3, #0]
  for (i = 0; i < cfg.dev_endpoints; i++)
 8004936:	3201      	adds	r2, #1
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004938:	2f00      	cmp	r7, #0
 800493a:	daf3      	bge.n	8004924 <USB_DevInit+0xd0>
  for (i = 0; i < cfg.dev_endpoints; i++)
 800493c:	428a      	cmp	r2, r1
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 800493e:	f8c3 8000 	str.w	r8, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0;
 8004942:	611d      	str	r5, [r3, #16]
 8004944:	f103 0320 	add.w	r3, r3, #32
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 8004948:	f843 cc18 	str.w	ip, [r3, #-24]
  for (i = 0; i < cfg.dev_endpoints; i++)
 800494c:	d1f2      	bne.n	8004934 <USB_DevInit+0xe0>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800494e:	6933      	ldr	r3, [r6, #16]
  if (cfg.dma_enable == 1)
 8004950:	f1be 0f01 	cmp.w	lr, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004954:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004958:	6133      	str	r3, [r6, #16]
  if (cfg.dma_enable == 1)
 800495a:	d02a      	beq.n	80049b2 <USB_DevInit+0x15e>
  USBx->GINTMSK = 0;
 800495c:	2200      	movs	r2, #0
  USBx->GINTSTS = 0xBFFFFFFF;
 800495e:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0;
 8004962:	6182      	str	r2, [r0, #24]
  USBx->GINTSTS = 0xBFFFFFFF;
 8004964:	6143      	str	r3, [r0, #20]
  if (cfg.dma_enable == DISABLE)
 8004966:	f1be 0f00 	cmp.w	lr, #0
 800496a:	d103      	bne.n	8004974 <USB_DevInit+0x120>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800496c:	6983      	ldr	r3, [r0, #24]
 800496e:	f043 0310 	orr.w	r3, r3, #16
 8004972:	6183      	str	r3, [r0, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8004974:	6981      	ldr	r1, [r0, #24]
 8004976:	4b1f      	ldr	r3, [pc, #124]	; (80049f4 <USB_DevInit+0x1a0>)
  if(cfg.Sof_enable)
 8004978:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 800497a:	430b      	orrs	r3, r1
 800497c:	6183      	str	r3, [r0, #24]
  if(cfg.Sof_enable)
 800497e:	b11a      	cbz	r2, 8004988 <USB_DevInit+0x134>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004980:	6983      	ldr	r3, [r0, #24]
 8004982:	f043 0308 	orr.w	r3, r3, #8
 8004986:	6183      	str	r3, [r0, #24]
  if (cfg.vbus_sensing_enable == ENABLE)
 8004988:	2c01      	cmp	r4, #1
 800498a:	d103      	bne.n	8004994 <USB_DevInit+0x140>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800498c:	6982      	ldr	r2, [r0, #24]
 800498e:	4b1a      	ldr	r3, [pc, #104]	; (80049f8 <USB_DevInit+0x1a4>)
 8004990:	4313      	orrs	r3, r2
 8004992:	6183      	str	r3, [r0, #24]
}
 8004994:	2000      	movs	r0, #0
 8004996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800499a:	b004      	add	sp, #16
 800499c:	4770      	bx	lr
  for (i = 0; i < cfg.dev_endpoints; i++)
 800499e:	4291      	cmp	r1, r2
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80049a0:	f8c3 8000 	str.w	r8, [r3]
    USBx_INEP(i)->DIEPTSIZ = 0;
 80049a4:	611d      	str	r5, [r3, #16]
 80049a6:	f103 0320 	add.w	r3, r3, #32
    USBx_INEP(i)->DIEPINT  = 0xFF;
 80049aa:	f843 cc18 	str.w	ip, [r3, #-24]
  for (i = 0; i < cfg.dev_endpoints; i++)
 80049ae:	d1a4      	bne.n	80048fa <USB_DevInit+0xa6>
 80049b0:	e7af      	b.n	8004912 <USB_DevInit+0xbe>
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 80049b2:	4d12      	ldr	r5, [pc, #72]	; (80049fc <USB_DevInit+0x1a8>)
  USBx->GINTMSK = 0;
 80049b4:	2100      	movs	r1, #0
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 80049b6:	4b12      	ldr	r3, [pc, #72]	; (8004a00 <USB_DevInit+0x1ac>)
  USBx->GINTSTS = 0xBFFFFFFF;
 80049b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 80049bc:	6335      	str	r5, [r6, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 80049be:	6b35      	ldr	r5, [r6, #48]	; 0x30
 80049c0:	432b      	orrs	r3, r5
 80049c2:	6333      	str	r3, [r6, #48]	; 0x30
    i= USBx_DEVICE->DTHRCTL;
 80049c4:	6b33      	ldr	r3, [r6, #48]	; 0x30
  USBx->GINTMSK = 0;
 80049c6:	6181      	str	r1, [r0, #24]
  USBx->GINTSTS = 0xBFFFFFFF;
 80049c8:	6142      	str	r2, [r0, #20]
 80049ca:	e7d3      	b.n	8004974 <USB_DevInit+0x120>
  USBx_DEVICE->DCFG |= speed;
 80049cc:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 80049d0:	2f00      	cmp	r7, #0
 80049d2:	f43f af6e 	beq.w	80048b2 <USB_DevInit+0x5e>
  USBx_DEVICE->DCFG |= speed;
 80049d6:	f043 0301 	orr.w	r3, r3, #1
 80049da:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
 80049de:	e76a      	b.n	80048b6 <USB_DevInit+0x62>
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 80049e0:	2f00      	cmp	r7, #0
 80049e2:	f43f af66 	beq.w	80048b2 <USB_DevInit+0x5e>
  USBx_DEVICE->DCFG |= speed;
 80049e6:	f043 0301 	orr.w	r3, r3, #1
 80049ea:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
 80049ee:	e762      	b.n	80048b6 <USB_DevInit+0x62>
 80049f0:	00030d40 	.word	0x00030d40
 80049f4:	803c3800 	.word	0x803c3800
 80049f8:	40000004 	.word	0x40000004
 80049fc:	00800100 	.word	0x00800100
 8004a00:	00010003 	.word	0x00010003

08004a04 <USB_FlushTxFifo>:
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6));
 8004a04:	0189      	lsls	r1, r1, #6
 8004a06:	4a07      	ldr	r2, [pc, #28]	; (8004a24 <USB_FlushTxFifo+0x20>)
 8004a08:	f041 0120 	orr.w	r1, r1, #32
 8004a0c:	6101      	str	r1, [r0, #16]
 8004a0e:	e001      	b.n	8004a14 <USB_FlushTxFifo+0x10>
    if (++count > 200000)
 8004a10:	3a01      	subs	r2, #1
 8004a12:	d005      	beq.n	8004a20 <USB_FlushTxFifo+0x1c>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a14:	6903      	ldr	r3, [r0, #16]
 8004a16:	f013 0320 	ands.w	r3, r3, #32
 8004a1a:	d1f9      	bne.n	8004a10 <USB_FlushTxFifo+0xc>
  return HAL_OK;
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004a20:	2003      	movs	r0, #3
}
 8004a22:	4770      	bx	lr
 8004a24:	00030d40 	.word	0x00030d40

08004a28 <USB_GetDevSpeed>:
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004a28:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8004a2c:	f8d0 0808 	ldr.w	r0, [r0, #2056]	; 0x808
 8004a30:	f010 0006 	ands.w	r0, r0, #6
 8004a34:	d012      	beq.n	8004a5c <USB_GetDevSpeed+0x34>
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8004a36:	6893      	ldr	r3, [r2, #8]
 8004a38:	f003 0306 	and.w	r3, r3, #6
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d00c      	beq.n	8004a5a <USB_GetDevSpeed+0x32>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 8004a40:	6893      	ldr	r3, [r2, #8]
 8004a42:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8004a46:	2b06      	cmp	r3, #6
 8004a48:	d007      	beq.n	8004a5a <USB_GetDevSpeed+0x32>
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8004a4a:	6893      	ldr	r3, [r2, #8]
 8004a4c:	f003 0306 	and.w	r3, r3, #6
 8004a50:	2b04      	cmp	r3, #4
    speed = USB_OTG_SPEED_LOW;
 8004a52:	bf14      	ite	ne
 8004a54:	2000      	movne	r0, #0
 8004a56:	2002      	moveq	r0, #2
 8004a58:	4770      	bx	lr
    speed = USB_OTG_SPEED_FULL;
 8004a5a:	2003      	movs	r0, #3
}
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop

08004a60 <USB_ActivateEndpoint>:
{
 8004a60:	b430      	push	{r4, r5}
  if (ep->is_in == 1)
 8004a62:	784b      	ldrb	r3, [r1, #1]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d01d      	beq.n	8004aa4 <USB_ActivateEndpoint+0x44>
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8004a68:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8004a6c:	780c      	ldrb	r4, [r1, #0]
 8004a6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a72:	69d5      	ldr	r5, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 8004a74:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8004a78:	40a3      	lsls	r3, r4
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 8004a7a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8004a7e:	432b      	orrs	r3, r5
 8004a80:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 8004a82:	6803      	ldr	r3, [r0, #0]
 8004a84:	041b      	lsls	r3, r3, #16
 8004a86:	d40a      	bmi.n	8004a9e <USB_ActivateEndpoint+0x3e>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8004a88:	688a      	ldr	r2, [r1, #8]
 8004a8a:	4b16      	ldr	r3, [pc, #88]	; (8004ae4 <USB_ActivateEndpoint+0x84>)
 8004a8c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8004a90:	78cc      	ldrb	r4, [r1, #3]
 8004a92:	6801      	ldr	r1, [r0, #0]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8004a9a:	430b      	orrs	r3, r1
 8004a9c:	6003      	str	r3, [r0, #0]
}
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	bc30      	pop	{r4, r5}
 8004aa2:	4770      	bx	lr
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 8004aa4:	780a      	ldrb	r2, [r1, #0]
 8004aa6:	f500 6400 	add.w	r4, r0, #2048	; 0x800
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 8004aaa:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 8004aae:	69e5      	ldr	r5, [r4, #28]
 8004ab0:	4093      	lsls	r3, r2
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 8004ab2:	eb00 1042 	add.w	r0, r0, r2, lsl #5
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	432b      	orrs	r3, r5
 8004aba:	61e3      	str	r3, [r4, #28]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 8004abc:	6803      	ldr	r3, [r0, #0]
 8004abe:	041c      	lsls	r4, r3, #16
 8004ac0:	d4ed      	bmi.n	8004a9e <USB_ActivateEndpoint+0x3e>
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8004ac2:	688c      	ldr	r4, [r1, #8]
 8004ac4:	4b07      	ldr	r3, [pc, #28]	; (8004ae4 <USB_ActivateEndpoint+0x84>)
 8004ac6:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8004aca:	78cd      	ldrb	r5, [r1, #3]
 8004acc:	6801      	ldr	r1, [r0, #0]
 8004ace:	4323      	orrs	r3, r4
 8004ad0:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
 8004ad4:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 8004ad8:	430b      	orrs	r3, r1
}
 8004ada:	bc30      	pop	{r4, r5}
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8004adc:	6003      	str	r3, [r0, #0]
}
 8004ade:	2000      	movs	r0, #0
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	10008000 	.word	0x10008000

08004ae8 <USB_DeactivateEndpoint>:
{
 8004ae8:	b410      	push	{r4}
  if (ep->is_in == 1)
 8004aea:	784b      	ldrb	r3, [r1, #1]
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8004aec:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1)
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d017      	beq.n	8004b22 <USB_DeactivateEndpoint+0x3a>
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 8004af2:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8004af6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;
 8004afa:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 8004afe:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004b00:	40a3      	lsls	r3, r4
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;
 8004b02:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 8004b06:	43db      	mvns	r3, r3
}
 8004b08:	f85d 4b04 	ldr.w	r4, [sp], #4
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 8004b0c:	4019      	ands	r1, r3
 8004b0e:	63d1      	str	r1, [r2, #60]	; 0x3c
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 8004b10:	69d1      	ldr	r1, [r2, #28]
 8004b12:	400b      	ands	r3, r1
 8004b14:	61d3      	str	r3, [r2, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;
 8004b16:	6803      	ldr	r3, [r0, #0]
 8004b18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b1c:	6003      	str	r3, [r0, #0]
}
 8004b1e:	2000      	movs	r0, #0
 8004b20:	4770      	bx	lr
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8004b22:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8004b26:	40a3      	lsls	r3, r4
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;
 8004b28:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8004b2c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004b2e:	b29b      	uxth	r3, r3
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;
 8004b30:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8004b34:	e7e7      	b.n	8004b06 <USB_DeactivateEndpoint+0x1e>
 8004b36:	bf00      	nop

08004b38 <USB_EPStartXfer>:
{
 8004b38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (ep->is_in == 1)
 8004b3c:	784c      	ldrb	r4, [r1, #1]
 8004b3e:	2c01      	cmp	r4, #1
 8004b40:	d04f      	beq.n	8004be2 <USB_EPStartXfer+0xaa>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b42:	780c      	ldrb	r4, [r1, #0]
 8004b44:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8004b48:	4e6a      	ldr	r6, [pc, #424]	; (8004cf4 <USB_EPStartXfer+0x1bc>)
 8004b4a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004b4e:	4d6a      	ldr	r5, [pc, #424]	; (8004cf8 <USB_EPStartXfer+0x1c0>)
    if (ep->xfer_len == 0)
 8004b50:	694c      	ldr	r4, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b52:	691f      	ldr	r7, [r3, #16]
 8004b54:	403e      	ands	r6, r7
 8004b56:	611e      	str	r6, [r3, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004b58:	691e      	ldr	r6, [r3, #16]
 8004b5a:	4035      	ands	r5, r6
 8004b5c:	611d      	str	r5, [r3, #16]
    if (ep->xfer_len == 0)
 8004b5e:	b314      	cbz	r4, 8004ba6 <USB_EPStartXfer+0x6e>
      pktcnt = (ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket;
 8004b60:	688d      	ldr	r5, [r1, #8]
    if (dma == 1)
 8004b62:	2a01      	cmp	r2, #1
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19));
 8004b64:	4e65      	ldr	r6, [pc, #404]	; (8004cfc <USB_EPStartXfer+0x1c4>)
      pktcnt = (ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket;
 8004b66:	442c      	add	r4, r5
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19));
 8004b68:	691f      	ldr	r7, [r3, #16]
      pktcnt = (ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket;
 8004b6a:	f104 34ff 	add.w	r4, r4, #4294967295
 8004b6e:	fbb4 f4f5 	udiv	r4, r4, r5
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8004b72:	fa1f fe84 	uxth.w	lr, r4
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19));
 8004b76:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8004b7a:	fb05 f50e 	mul.w	r5, r5, lr
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19));
 8004b7e:	ea44 0407 	orr.w	r4, r4, r7
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8004b82:	f3c5 0512 	ubfx	r5, r5, #0, #19
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19));
 8004b86:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8004b88:	691c      	ldr	r4, [r3, #16]
 8004b8a:	ea45 0504 	orr.w	r5, r5, r4
 8004b8e:	611d      	str	r5, [r3, #16]
    if (dma == 1)
 8004b90:	d016      	beq.n	8004bc0 <USB_EPStartXfer+0x88>
    if (ep->type == EP_TYPE_ISOC)
 8004b92:	78ca      	ldrb	r2, [r1, #3]
 8004b94:	2a01      	cmp	r2, #1
 8004b96:	d018      	beq.n	8004bca <USB_EPStartXfer+0x92>
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8004b9e:	601a      	str	r2, [r3, #0]
}
 8004ba0:	2000      	movs	r0, #0
 8004ba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004ba6:	688c      	ldr	r4, [r1, #8]
    if (dma == 1)
 8004ba8:	2a01      	cmp	r2, #1
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004baa:	691d      	ldr	r5, [r3, #16]
 8004bac:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8004bb0:	ea44 0405 	orr.w	r4, r4, r5
 8004bb4:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 8004bb6:	691c      	ldr	r4, [r3, #16]
 8004bb8:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8004bbc:	611c      	str	r4, [r3, #16]
    if (dma == 1)
 8004bbe:	d1e8      	bne.n	8004b92 <USB_EPStartXfer+0x5a>
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8004bc0:	68ca      	ldr	r2, [r1, #12]
 8004bc2:	615a      	str	r2, [r3, #20]
    if (ep->type == EP_TYPE_ISOC)
 8004bc4:	78ca      	ldrb	r2, [r1, #3]
 8004bc6:	2a01      	cmp	r2, #1
 8004bc8:	d1e6      	bne.n	8004b98 <USB_EPStartXfer+0x60>
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 8004bca:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8004bce:	f412 7f80 	tst.w	r2, #256	; 0x100
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	bf0c      	ite	eq
 8004bd6:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004bda:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	e7da      	b.n	8004b98 <USB_EPStartXfer+0x60>
    if (ep->xfer_len == 0)
 8004be2:	694d      	ldr	r5, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004be4:	f500 6310 	add.w	r3, r0, #2304	; 0x900
 8004be8:	f891 e000 	ldrb.w	lr, [r1]
    if (ep->xfer_len == 0)
 8004bec:	b395      	cbz	r5, 8004c54 <USB_EPStartXfer+0x11c>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004bee:	eb03 134e 	add.w	r3, r3, lr, lsl #5
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 8004bf2:	f8d1 c008 	ldr.w	ip, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004bf6:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8004cf4 <USB_EPStartXfer+0x1bc>
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004bfa:	f3c5 0612 	ubfx	r6, r5, #0, #19
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004bfe:	f8d3 8010 	ldr.w	r8, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 8004c02:	eb05 070c 	add.w	r7, r5, ip
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c06:	ea08 0909 	and.w	r9, r8, r9
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 8004c0a:	3f01      	subs	r7, #1
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c0c:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8004cf8 <USB_EPStartXfer+0x1c0>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c10:	f8c3 9010 	str.w	r9, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c14:	f8d3 9010 	ldr.w	r9, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 8004c18:	fbb7 fcfc 	udiv	ip, r7, ip
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c1c:	ea09 0808 	and.w	r8, r9, r8
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 8004c20:	4f36      	ldr	r7, [pc, #216]	; (8004cfc <USB_EPStartXfer+0x1c4>)
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c22:	f8c3 8010 	str.w	r8, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 8004c26:	ea07 47cc 	and.w	r7, r7, ip, lsl #19
 8004c2a:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8004c2e:	ea47 070c 	orr.w	r7, r7, ip
 8004c32:	611f      	str	r7, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c34:	691f      	ldr	r7, [r3, #16]
 8004c36:	433e      	orrs	r6, r7
 8004c38:	611e      	str	r6, [r3, #16]
      if (ep->type == EP_TYPE_ISOC)
 8004c3a:	78ce      	ldrb	r6, [r1, #3]
 8004c3c:	2e01      	cmp	r6, #1
 8004c3e:	d048      	beq.n	8004cd2 <USB_EPStartXfer+0x19a>
    if (dma == 1)
 8004c40:	2a01      	cmp	r2, #1
 8004c42:	d053      	beq.n	8004cec <USB_EPStartXfer+0x1b4>
          USBx_DEVICE->DIEPEMPMSK |= 1 << ep->num;
 8004c44:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8004c48:	fa04 f40e 	lsl.w	r4, r4, lr
 8004c4c:	4314      	orrs	r4, r2
 8004c4e:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
 8004c52:	e7a1      	b.n	8004b98 <USB_EPStartXfer+0x60>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c54:	eb03 134e 	add.w	r3, r3, lr, lsl #5
 8004c58:	4e27      	ldr	r6, [pc, #156]	; (8004cf8 <USB_EPStartXfer+0x1c0>)
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c5a:	4c26      	ldr	r4, [pc, #152]	; (8004cf4 <USB_EPStartXfer+0x1bc>)
    if (dma == 1)
 8004c5c:	2a01      	cmp	r2, #1
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c5e:	691f      	ldr	r7, [r3, #16]
 8004c60:	ea06 0607 	and.w	r6, r6, r7
 8004c64:	611e      	str	r6, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8004c66:	691e      	ldr	r6, [r3, #16]
 8004c68:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8004c6c:	611e      	str	r6, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c6e:	691e      	ldr	r6, [r3, #16]
 8004c70:	ea04 0406 	and.w	r4, r4, r6
 8004c74:	611c      	str	r4, [r3, #16]
 8004c76:	78cc      	ldrb	r4, [r1, #3]
    if (dma == 1)
 8004c78:	d025      	beq.n	8004cc6 <USB_EPStartXfer+0x18e>
      if (ep->type != EP_TYPE_ISOC)
 8004c7a:	2c01      	cmp	r4, #1
 8004c7c:	d18c      	bne.n	8004b98 <USB_EPStartXfer+0x60>
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 8004c7e:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8004c82:	f414 7f80 	tst.w	r4, #256	; 0x100
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c86:	681c      	ldr	r4, [r3, #0]
 8004c88:	bf0c      	ite	eq
 8004c8a:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c8e:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
 8004c92:	601c      	str	r4, [r3, #0]
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c94:	681c      	ldr	r4, [r3, #0]
 8004c96:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8004c9a:	601c      	str	r4, [r3, #0]
  if (dma == 0)
 8004c9c:	2a00      	cmp	r2, #0
 8004c9e:	f47f af7f 	bne.w	8004ba0 <USB_EPStartXfer+0x68>
    count32b =  (len + 3) / 4;
 8004ca2:	b2ac      	uxth	r4, r5
 8004ca4:	3403      	adds	r4, #3
    for (i = 0; i < count32b; i++, src += 4)
 8004ca6:	10a4      	asrs	r4, r4, #2
 8004ca8:	f43f af7a 	beq.w	8004ba0 <USB_EPStartXfer+0x68>
 8004cac:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);
 8004cb0:	68cb      	ldr	r3, [r1, #12]
 8004cb2:	eb00 3e0e 	add.w	lr, r0, lr, lsl #12
    for (i = 0; i < count32b; i++, src += 4)
 8004cb6:	3201      	adds	r2, #1
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8004cb8:	f853 1b04 	ldr.w	r1, [r3], #4
    for (i = 0; i < count32b; i++, src += 4)
 8004cbc:	4294      	cmp	r4, r2
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8004cbe:	f8ce 1000 	str.w	r1, [lr]
    for (i = 0; i < count32b; i++, src += 4)
 8004cc2:	d1f8      	bne.n	8004cb6 <USB_EPStartXfer+0x17e>
 8004cc4:	e76c      	b.n	8004ba0 <USB_EPStartXfer+0x68>
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004cc6:	690e      	ldr	r6, [r1, #16]
    if (ep->type == EP_TYPE_ISOC)
 8004cc8:	2c01      	cmp	r4, #1
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004cca:	615e      	str	r6, [r3, #20]
    if (ep->type == EP_TYPE_ISOC)
 8004ccc:	f47f af64 	bne.w	8004b98 <USB_EPStartXfer+0x60>
 8004cd0:	e7d5      	b.n	8004c7e <USB_EPStartXfer+0x146>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004cd2:	691c      	ldr	r4, [r3, #16]
    if (dma == 1)
 8004cd4:	2a01      	cmp	r2, #1
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004cd6:	f024 44c0 	bic.w	r4, r4, #1610612736	; 0x60000000
 8004cda:	611c      	str	r4, [r3, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29));
 8004cdc:	691c      	ldr	r4, [r3, #16]
 8004cde:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8004ce2:	611c      	str	r4, [r3, #16]
    if (dma == 1)
 8004ce4:	d1cb      	bne.n	8004c7e <USB_EPStartXfer+0x146>
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004ce6:	690c      	ldr	r4, [r1, #16]
 8004ce8:	615c      	str	r4, [r3, #20]
 8004cea:	e7c8      	b.n	8004c7e <USB_EPStartXfer+0x146>
 8004cec:	690a      	ldr	r2, [r1, #16]
 8004cee:	615a      	str	r2, [r3, #20]
 8004cf0:	e752      	b.n	8004b98 <USB_EPStartXfer+0x60>
 8004cf2:	bf00      	nop
 8004cf4:	fff80000 	.word	0xfff80000
 8004cf8:	e007ffff 	.word	0xe007ffff
 8004cfc:	1ff80000 	.word	0x1ff80000

08004d00 <USB_EP0StartXfer>:
{
 8004d00:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1)
 8004d02:	784b      	ldrb	r3, [r1, #1]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d023      	beq.n	8004d50 <USB_EP0StartXfer+0x50>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d08:	780b      	ldrb	r3, [r1, #0]
 8004d0a:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8004d0e:	4c3c      	ldr	r4, [pc, #240]	; (8004e00 <USB_EP0StartXfer+0x100>)
 8004d10:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    if (ep->xfer_len > 0)
 8004d14:	694d      	ldr	r5, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004d16:	4b3b      	ldr	r3, [pc, #236]	; (8004e04 <USB_EP0StartXfer+0x104>)
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d18:	6906      	ldr	r6, [r0, #16]
 8004d1a:	4034      	ands	r4, r6
 8004d1c:	6104      	str	r4, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004d1e:	6904      	ldr	r4, [r0, #16]
 8004d20:	4023      	ands	r3, r4
 8004d22:	6103      	str	r3, [r0, #16]
      ep->xfer_len = ep->maxpacket;
 8004d24:	688b      	ldr	r3, [r1, #8]
    if (ep->xfer_len > 0)
 8004d26:	b98d      	cbnz	r5, 8004d4c <USB_EP0StartXfer+0x4c>
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19));
 8004d28:	6904      	ldr	r4, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
    if (dma == 1)
 8004d2e:	2a01      	cmp	r2, #1
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19));
 8004d30:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8004d34:	6104      	str	r4, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004d36:	6904      	ldr	r4, [r0, #16]
 8004d38:	ea43 0304 	orr.w	r3, r3, r4
 8004d3c:	6103      	str	r3, [r0, #16]
    if (dma == 1)
 8004d3e:	d038      	beq.n	8004db2 <USB_EP0StartXfer+0xb2>
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d40:	6803      	ldr	r3, [r0, #0]
 8004d42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d46:	6003      	str	r3, [r0, #0]
}
 8004d48:	2000      	movs	r0, #0
 8004d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ep->xfer_len = ep->maxpacket;
 8004d4c:	614b      	str	r3, [r1, #20]
 8004d4e:	e7eb      	b.n	8004d28 <USB_EP0StartXfer+0x28>
    if (ep->xfer_len == 0)
 8004d50:	694c      	ldr	r4, [r1, #20]
 8004d52:	2c00      	cmp	r4, #0
 8004d54:	d030      	beq.n	8004db8 <USB_EP0StartXfer+0xb8>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d56:	f891 e000 	ldrb.w	lr, [r1]
 8004d5a:	f500 6310 	add.w	r3, r0, #2304	; 0x900
 8004d5e:	4e28      	ldr	r6, [pc, #160]	; (8004e00 <USB_EP0StartXfer+0x100>)
 8004d60:	eb03 134e 	add.w	r3, r3, lr, lsl #5
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d64:	4d27      	ldr	r5, [pc, #156]	; (8004e04 <USB_EP0StartXfer+0x104>)
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d66:	691f      	ldr	r7, [r3, #16]
 8004d68:	403e      	ands	r6, r7
      if(ep->xfer_len > ep->maxpacket)
 8004d6a:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d6c:	611e      	str	r6, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 8004d6e:	42bc      	cmp	r4, r7
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d70:	691e      	ldr	r6, [r3, #16]
 8004d72:	ea05 0506 	and.w	r5, r5, r6
 8004d76:	611d      	str	r5, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8004d78:	691d      	ldr	r5, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 8004d7a:	d935      	bls.n	8004de8 <USB_EP0StartXfer+0xe8>
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8004d7c:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
        ep->xfer_len = ep->maxpacket;
 8004d80:	614f      	str	r7, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d82:	f3c7 0412 	ubfx	r4, r7, #0, #19
    if (dma == 1)
 8004d86:	2a01      	cmp	r2, #1
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8004d88:	611d      	str	r5, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d8a:	691d      	ldr	r5, [r3, #16]
 8004d8c:	ea44 0405 	orr.w	r4, r4, r5
 8004d90:	611c      	str	r4, [r3, #16]
    if (dma == 1)
 8004d92:	d026      	beq.n	8004de2 <USB_EP0StartXfer+0xe2>
      if (ep->xfer_len > 0U)
 8004d94:	b13f      	cbz	r7, 8004da6 <USB_EP0StartXfer+0xa6>
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 8004d96:	2201      	movs	r2, #1
 8004d98:	f8d0 1834 	ldr.w	r1, [r0, #2100]	; 0x834
 8004d9c:	fa02 f20e 	lsl.w	r2, r2, lr
 8004da0:	430a      	orrs	r2, r1
 8004da2:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004da6:	681a      	ldr	r2, [r3, #0]
}
 8004da8:	2000      	movs	r0, #0
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004daa:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8004dae:	601a      	str	r2, [r3, #0]
}
 8004db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004db2:	68cb      	ldr	r3, [r1, #12]
 8004db4:	6143      	str	r3, [r0, #20]
 8004db6:	e7c3      	b.n	8004d40 <USB_EP0StartXfer+0x40>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004db8:	780b      	ldrb	r3, [r1, #0]
 8004dba:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8004dbe:	4c11      	ldr	r4, [pc, #68]	; (8004e04 <USB_EP0StartXfer+0x104>)
    if (dma == 1)
 8004dc0:	2a01      	cmp	r2, #1
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dc2:	eb00 1343 	add.w	r3, r0, r3, lsl #5
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004dc6:	480e      	ldr	r0, [pc, #56]	; (8004e00 <USB_EP0StartXfer+0x100>)
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dc8:	691d      	ldr	r5, [r3, #16]
 8004dca:	ea04 0405 	and.w	r4, r4, r5
 8004dce:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8004dd0:	691c      	ldr	r4, [r3, #16]
 8004dd2:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8004dd6:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004dd8:	691c      	ldr	r4, [r3, #16]
 8004dda:	ea00 0004 	and.w	r0, r0, r4
 8004dde:	6118      	str	r0, [r3, #16]
    if (dma == 1)
 8004de0:	d1e1      	bne.n	8004da6 <USB_EP0StartXfer+0xa6>
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004de2:	690a      	ldr	r2, [r1, #16]
 8004de4:	615a      	str	r2, [r3, #20]
 8004de6:	e7de      	b.n	8004da6 <USB_EP0StartXfer+0xa6>
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8004de8:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004dec:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1)
 8004df0:	2a01      	cmp	r2, #1
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8004df2:	611d      	str	r5, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004df4:	691d      	ldr	r5, [r3, #16]
 8004df6:	ea44 0405 	orr.w	r4, r4, r5
 8004dfa:	611c      	str	r4, [r3, #16]
    if (dma == 1)
 8004dfc:	d1cb      	bne.n	8004d96 <USB_EP0StartXfer+0x96>
 8004dfe:	e7f0      	b.n	8004de2 <USB_EP0StartXfer+0xe2>
 8004e00:	fff80000 	.word	0xfff80000
 8004e04:	e007ffff 	.word	0xe007ffff

08004e08 <USB_WritePacket>:
{
 8004e08:	b430      	push	{r4, r5}
 8004e0a:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0)
 8004e0e:	b96c      	cbnz	r4, 8004e2c <USB_WritePacket+0x24>
    count32b =  (len + 3) / 4;
 8004e10:	1cdd      	adds	r5, r3, #3
    for (i = 0; i < count32b; i++, src += 4)
 8004e12:	10ad      	asrs	r5, r5, #2
 8004e14:	d00a      	beq.n	8004e2c <USB_WritePacket+0x24>
 8004e16:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8004e1a:	4623      	mov	r3, r4
 8004e1c:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 8004e20:	3301      	adds	r3, #1
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8004e22:	f851 0b04 	ldr.w	r0, [r1], #4
    for (i = 0; i < count32b; i++, src += 4)
 8004e26:	429d      	cmp	r5, r3
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8004e28:	6010      	str	r0, [r2, #0]
    for (i = 0; i < count32b; i++, src += 4)
 8004e2a:	d1f9      	bne.n	8004e20 <USB_WritePacket+0x18>
}
 8004e2c:	2000      	movs	r0, #0
 8004e2e:	bc30      	pop	{r4, r5}
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop

08004e34 <USB_ReadPacket>:
  uint32_t count32b = (len + 3) / 4;
 8004e34:	3203      	adds	r2, #3
  for ( i = 0; i < count32b; i++, dest += 4 )
 8004e36:	1092      	asrs	r2, r2, #2
 8004e38:	d00f      	beq.n	8004e5a <USB_ReadPacket+0x26>
 8004e3a:	2300      	movs	r3, #0
{
 8004e3c:	b470      	push	{r4, r5, r6}
 8004e3e:	f500 5680 	add.w	r6, r0, #4096	; 0x1000
  for ( i = 0; i < count32b; i++, dest += 4 )
 8004e42:	460c      	mov	r4, r1
 8004e44:	3301      	adds	r3, #1
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 8004e46:	6835      	ldr	r5, [r6, #0]
  for ( i = 0; i < count32b; i++, dest += 4 )
 8004e48:	429a      	cmp	r2, r3
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 8004e4a:	f844 5b04 	str.w	r5, [r4], #4
  for ( i = 0; i < count32b; i++, dest += 4 )
 8004e4e:	d1f9      	bne.n	8004e44 <USB_ReadPacket+0x10>
 8004e50:	eb01 0182 	add.w	r1, r1, r2, lsl #2
}
 8004e54:	bc70      	pop	{r4, r5, r6}
 8004e56:	4608      	mov	r0, r1
 8004e58:	4770      	bx	lr
 8004e5a:	4608      	mov	r0, r1
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop

08004e60 <USB_EPSetStall>:
  if (ep->is_in == 1)
 8004e60:	784b      	ldrb	r3, [r1, #1]
 8004e62:	2b01      	cmp	r3, #1
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0)
 8004e64:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1)
 8004e66:	d010      	beq.n	8004e8a <USB_EPSetStall+0x2a>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
 8004e68:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8004e6c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004e70:	6803      	ldr	r3, [r0, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	db03      	blt.n	8004e7e <USB_EPSetStall+0x1e>
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004e76:	6803      	ldr	r3, [r0, #0]
 8004e78:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e7c:	6003      	str	r3, [r0, #0]
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004e7e:	6803      	ldr	r3, [r0, #0]
 8004e80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e84:	6003      	str	r3, [r0, #0]
}
 8004e86:	2000      	movs	r0, #0
 8004e88:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0)
 8004e8a:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8004e8e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004e92:	6803      	ldr	r3, [r0, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	daee      	bge.n	8004e76 <USB_EPSetStall+0x16>
 8004e98:	e7f1      	b.n	8004e7e <USB_EPSetStall+0x1e>
 8004e9a:	bf00      	nop

08004e9c <USB_EPClearStall>:
  if (ep->is_in == 1)
 8004e9c:	784b      	ldrb	r3, [r1, #1]
 8004e9e:	2b01      	cmp	r3, #1
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004ea0:	780b      	ldrb	r3, [r1, #0]
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004ea2:	bf0c      	ite	eq
 8004ea4:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004ea8:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 8004eac:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004eb0:	6803      	ldr	r3, [r0, #0]
 8004eb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004eb6:	6003      	str	r3, [r0, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8004eb8:	78cb      	ldrb	r3, [r1, #3]
 8004eba:	3b02      	subs	r3, #2
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d803      	bhi.n	8004ec8 <USB_EPClearStall+0x2c>
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004ec0:	6803      	ldr	r3, [r0, #0]
 8004ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ec6:	6003      	str	r3, [r0, #0]
}
 8004ec8:	2000      	movs	r0, #0
 8004eca:	4770      	bx	lr

08004ecc <USB_SetDevAddress>:
{
 8004ecc:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD ;
 8004ece:	0109      	lsls	r1, r1, #4
}
 8004ed0:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8004ed2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD ;
 8004ed6:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8004eda:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 8004ede:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD ;
 8004ee2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8004ee6:	4311      	orrs	r1, r2
 8004ee8:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop

08004ef0 <USB_DevConnect>:
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8004ef0:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  HAL_Delay(3);
 8004ef4:	2003      	movs	r0, #3
{
 8004ef6:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8004ef8:	6853      	ldr	r3, [r2, #4]
 8004efa:	f023 0302 	bic.w	r3, r3, #2
 8004efe:	6053      	str	r3, [r2, #4]
  HAL_Delay(3);
 8004f00:	f7fc faa8 	bl	8001454 <HAL_Delay>
}
 8004f04:	2000      	movs	r0, #0
 8004f06:	bd08      	pop	{r3, pc}

08004f08 <USB_DevDisconnect>:
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8004f08:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  HAL_Delay(3);
 8004f0c:	2003      	movs	r0, #3
{
 8004f0e:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8004f10:	6853      	ldr	r3, [r2, #4]
 8004f12:	f043 0302 	orr.w	r3, r3, #2
 8004f16:	6053      	str	r3, [r2, #4]
  HAL_Delay(3);
 8004f18:	f7fc fa9c 	bl	8001454 <HAL_Delay>
}
 8004f1c:	2000      	movs	r0, #0
 8004f1e:	bd08      	pop	{r3, pc}

08004f20 <USB_ReadInterrupts>:
  v = USBx->GINTSTS;
 8004f20:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 8004f22:	6980      	ldr	r0, [r0, #24]
}
 8004f24:	4010      	ands	r0, r2
 8004f26:	4770      	bx	lr

08004f28 <USB_ReadDevAllOutEpInterrupt>:
  v  = USBx_DEVICE->DAINT;
 8004f28:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8004f2c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8004f30:	69c0      	ldr	r0, [r0, #28]
 8004f32:	4018      	ands	r0, r3
}
 8004f34:	0c00      	lsrs	r0, r0, #16
 8004f36:	4770      	bx	lr

08004f38 <USB_ReadDevAllInEpInterrupt>:
  v  = USBx_DEVICE->DAINT;
 8004f38:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8004f3c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8004f40:	69c0      	ldr	r0, [r0, #28]
 8004f42:	4018      	ands	r0, r3
}
 8004f44:	b280      	uxth	r0, r0
 8004f46:	4770      	bx	lr

08004f48 <USB_ReadDevOutEPInterrupt>:
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8004f48:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  v &= USBx_DEVICE->DOEPMSK;
 8004f4c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8004f50:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 8004f54:	688a      	ldr	r2, [r1, #8]
  v &= USBx_DEVICE->DOEPMSK;
 8004f56:	6940      	ldr	r0, [r0, #20]
}
 8004f58:	4010      	ands	r0, r2
 8004f5a:	4770      	bx	lr

08004f5c <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8004f5c:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8004f60:	eb00 1041 	add.w	r0, r0, r1, lsl #5
{
 8004f64:	b410      	push	{r4}
  msk = USBx_DEVICE->DIEPMSK;
 8004f66:	6914      	ldr	r4, [r2, #16]
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8004f68:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004f6c:	6b53      	ldr	r3, [r2, #52]	; 0x34
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8004f6e:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1) << 7;
 8004f70:	40cb      	lsrs	r3, r1
 8004f72:	01db      	lsls	r3, r3, #7
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	4323      	orrs	r3, r4
}
 8004f78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f7c:	4018      	ands	r0, r3
 8004f7e:	4770      	bx	lr

08004f80 <USB_GetMode>:
  return ((USBx->GINTSTS ) & 0x1);
 8004f80:	6940      	ldr	r0, [r0, #20]
}
 8004f82:	f000 0001 	and.w	r0, r0, #1
 8004f86:	4770      	bx	lr

08004f88 <USB_ActivateSetup>:
  USBx_INEP(0)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004f88:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8004f8c:	f500 6300 	add.w	r3, r0, #2048	; 0x800
  USBx_INEP(0)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004f90:	4a0a      	ldr	r2, [pc, #40]	; (8004fbc <USB_ActivateSetup+0x34>)
 8004f92:	400a      	ands	r2, r1
 8004f94:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8004f98:	689a      	ldr	r2, [r3, #8]
 8004f9a:	f002 0206 	and.w	r2, r2, #6
 8004f9e:	2a04      	cmp	r2, #4
 8004fa0:	d105      	bne.n	8004fae <USB_ActivateSetup+0x26>
    USBx_INEP(0)->DIEPCTL |= 3;
 8004fa2:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8004fa6:	f042 0203 	orr.w	r2, r2, #3
 8004faa:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004fae:	685a      	ldr	r2, [r3, #4]
}
 8004fb0:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004fb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fb6:	605a      	str	r2, [r3, #4]
}
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	fffff800 	.word	0xfffff800

08004fc0 <USB_EP0_OutStart>:
{
 8004fc0:	b410      	push	{r4}
  USBx_OUTEP(0)->DOEPTSIZ = 0;
 8004fc2:	2400      	movs	r4, #0
  if (dma == 1)
 8004fc4:	2901      	cmp	r1, #1
  USBx_OUTEP(0)->DOEPTSIZ = 0;
 8004fc6:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 8004fca:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8004fce:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8004fd2:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0)->DOEPTSIZ |= (3 * 8);
 8004fd6:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8004fda:	f044 0418 	orr.w	r4, r4, #24
 8004fde:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004fe2:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8004fe6:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8004fea:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1)
 8004fee:	d105      	bne.n	8004ffc <USB_EP0_OutStart+0x3c>
    USBx_OUTEP(0)->DOEPCTL = 0x80008000;
 8004ff0:	f04f 2180 	mov.w	r1, #2147516416	; 0x80008000
    USBx_OUTEP(0)->DOEPDMA = (uint32_t)psetup;
 8004ff4:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0)->DOEPCTL = 0x80008000;
 8004ff8:	f8c0 1b00 	str.w	r1, [r0, #2816]	; 0xb00
}
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005002:	4770      	bx	lr

08005004 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005004:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8005008:	b11b      	cbz	r3, 8005012 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 800500a:	2000      	movs	r0, #0
 800500c:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8005010:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8005012:	2002      	movs	r0, #2
  }
}
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop

08005018 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8005018:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 800501c:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800501e:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8005022:	b15b      	cbz	r3, 800503c <USBD_CDC_EP0_RxReady+0x24>
 8005024:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8005028:	28ff      	cmp	r0, #255	; 0xff
 800502a:	d007      	beq.n	800503c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	4621      	mov	r1, r4
 8005030:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8005034:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8005036:	23ff      	movs	r3, #255	; 0xff
 8005038:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 800503c:	2000      	movs	r0, #0
 800503e:	bd10      	pop	{r4, pc}

08005040 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8005040:	2343      	movs	r3, #67	; 0x43
 8005042:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8005044:	4800      	ldr	r0, [pc, #0]	; (8005048 <USBD_CDC_GetFSCfgDesc+0x8>)
 8005046:	4770      	bx	lr
 8005048:	20000040 	.word	0x20000040

0800504c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800504c:	2343      	movs	r3, #67	; 0x43
 800504e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8005050:	4800      	ldr	r0, [pc, #0]	; (8005054 <USBD_CDC_GetHSCfgDesc+0x8>)
 8005052:	4770      	bx	lr
 8005054:	20000084 	.word	0x20000084

08005058 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8005058:	2343      	movs	r3, #67	; 0x43
 800505a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800505c:	4800      	ldr	r0, [pc, #0]	; (8005060 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800505e:	4770      	bx	lr
 8005060:	200000d4 	.word	0x200000d4

08005064 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8005064:	230a      	movs	r3, #10
 8005066:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8005068:	4800      	ldr	r0, [pc, #0]	; (800506c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800506a:	4770      	bx	lr
 800506c:	200000c8 	.word	0x200000c8

08005070 <USBD_CDC_DataOut>:
{      
 8005070:	b538      	push	{r3, r4, r5, lr}
 8005072:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005074:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8005078:	f002 fc36 	bl	80078e8 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 800507c:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8005080:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8005084:	b14b      	cbz	r3, 800509a <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005086:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800508a:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800508e:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	4798      	blx	r3
    return USBD_OK;
 8005096:	2000      	movs	r0, #0
 8005098:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800509a:	2002      	movs	r0, #2
}
 800509c:	bd38      	pop	{r3, r4, r5, pc}
 800509e:	bf00      	nop

080050a0 <USBD_CDC_Setup>:
{
 80050a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80050a2:	780b      	ldrb	r3, [r1, #0]
{
 80050a4:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80050a6:	f013 0260 	ands.w	r2, r3, #96	; 0x60
 80050aa:	d013      	beq.n	80050d4 <USBD_CDC_Setup+0x34>
 80050ac:	2a20      	cmp	r2, #32
 80050ae:	d10f      	bne.n	80050d0 <USBD_CDC_Setup+0x30>
    if (req->wLength)
 80050b0:	88ce      	ldrh	r6, [r1, #6]
 80050b2:	4605      	mov	r5, r0
 80050b4:	b326      	cbz	r6, 8005100 <USBD_CDC_Setup+0x60>
      if (req->bmRequest & 0x80)
 80050b6:	061b      	lsls	r3, r3, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80050b8:	f8d0 7218 	ldr.w	r7, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 80050bc:	d413      	bmi.n	80050e6 <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 80050be:	784b      	ldrb	r3, [r1, #1]
        USBD_CtlPrepareRx (pdev, 
 80050c0:	4632      	mov	r2, r6
        hcdc->CmdLength = req->wLength;
 80050c2:	f887 6201 	strb.w	r6, [r7, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 80050c6:	4639      	mov	r1, r7
        hcdc->CmdOpCode = req->bRequest;
 80050c8:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
        USBD_CtlPrepareRx (pdev, 
 80050cc:	f000 fc36 	bl	800593c <USBD_CtlPrepareRx>
}
 80050d0:	2000      	movs	r0, #0
 80050d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (req->bRequest)
 80050d4:	784b      	ldrb	r3, [r1, #1]
 80050d6:	2b0a      	cmp	r3, #10
 80050d8:	d1fa      	bne.n	80050d0 <USBD_CDC_Setup+0x30>
      USBD_CtlSendData (pdev,
 80050da:	2201      	movs	r2, #1
 80050dc:	490c      	ldr	r1, [pc, #48]	; (8005110 <USBD_CDC_Setup+0x70>)
 80050de:	f000 fc17 	bl	8005910 <USBD_CtlSendData>
}
 80050e2:	2000      	movs	r0, #0
 80050e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80050e6:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80050ea:	4632      	mov	r2, r6
 80050ec:	4639      	mov	r1, r7
 80050ee:	7860      	ldrb	r0, [r4, #1]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	4798      	blx	r3
          USBD_CtlSendData (pdev, 
 80050f4:	88e2      	ldrh	r2, [r4, #6]
 80050f6:	4639      	mov	r1, r7
 80050f8:	4628      	mov	r0, r5
 80050fa:	f000 fc09 	bl	8005910 <USBD_CtlSendData>
 80050fe:	e7e7      	b.n	80050d0 <USBD_CDC_Setup+0x30>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005100:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8005104:	4632      	mov	r2, r6
 8005106:	7848      	ldrb	r0, [r1, #1]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	4798      	blx	r3
 800510c:	e7e0      	b.n	80050d0 <USBD_CDC_Setup+0x30>
 800510e:	bf00      	nop
 8005110:	200006c4 	.word	0x200006c4

08005114 <USBD_CDC_DeInit>:
{
 8005114:	b510      	push	{r4, lr}
 8005116:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8005118:	2181      	movs	r1, #129	; 0x81
 800511a:	f002 fb7d 	bl	8007818 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800511e:	2101      	movs	r1, #1
 8005120:	4620      	mov	r0, r4
 8005122:	f002 fb79 	bl	8007818 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8005126:	4620      	mov	r0, r4
 8005128:	2182      	movs	r1, #130	; 0x82
 800512a:	f002 fb75 	bl	8007818 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800512e:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8005132:	b153      	cbz	r3, 800514a <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005134:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800513c:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8005140:	f002 fcc4 	bl	8007acc <free>
    pdev->pClassData = NULL;
 8005144:	2300      	movs	r3, #0
 8005146:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 800514a:	2000      	movs	r0, #0
 800514c:	bd10      	pop	{r4, pc}
 800514e:	bf00      	nop

08005150 <USBD_CDC_Init>:
{
 8005150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005152:	7c03      	ldrb	r3, [r0, #16]
{
 8005154:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005156:	bb73      	cbnz	r3, 80051b6 <USBD_CDC_Init+0x66>
    USBD_LL_OpenEP(pdev,
 8005158:	f44f 7300 	mov.w	r3, #512	; 0x200
 800515c:	2202      	movs	r2, #2
 800515e:	2181      	movs	r1, #129	; 0x81
 8005160:	f002 fb48 	bl	80077f4 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8005164:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005168:	2202      	movs	r2, #2
 800516a:	2101      	movs	r1, #1
 800516c:	4620      	mov	r0, r4
 800516e:	f002 fb41 	bl	80077f4 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8005172:	2308      	movs	r3, #8
 8005174:	2203      	movs	r2, #3
 8005176:	2182      	movs	r1, #130	; 0x82
 8005178:	4620      	mov	r0, r4
 800517a:	f002 fb3b 	bl	80077f4 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800517e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005182:	f002 fc9b 	bl	8007abc <malloc>
 8005186:	4605      	mov	r5, r0
 8005188:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 800518c:	b330      	cbz	r0, 80051dc <USBD_CDC_Init+0x8c>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800518e:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
    hcdc->TxState =0;
 8005192:	2600      	movs	r6, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005198:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 800519a:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
      USBD_LL_PrepareReceive(pdev,
 800519e:	4620      	mov	r0, r4
    hcdc->RxState =0;
 80051a0:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
      USBD_LL_PrepareReceive(pdev,
 80051a4:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80051a8:	b18f      	cbz	r7, 80051ce <USBD_CDC_Init+0x7e>
      USBD_LL_PrepareReceive(pdev,
 80051aa:	2340      	movs	r3, #64	; 0x40
 80051ac:	2101      	movs	r1, #1
 80051ae:	f002 fb8d 	bl	80078cc <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 80051b2:	4630      	mov	r0, r6
 80051b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 80051b6:	2340      	movs	r3, #64	; 0x40
 80051b8:	2202      	movs	r2, #2
 80051ba:	2181      	movs	r1, #129	; 0x81
 80051bc:	f002 fb1a 	bl	80077f4 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 80051c0:	2340      	movs	r3, #64	; 0x40
 80051c2:	2202      	movs	r2, #2
 80051c4:	2101      	movs	r1, #1
 80051c6:	4620      	mov	r0, r4
 80051c8:	f002 fb14 	bl	80077f4 <USBD_LL_OpenEP>
 80051cc:	e7d1      	b.n	8005172 <USBD_CDC_Init+0x22>
      USBD_LL_PrepareReceive(pdev,
 80051ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051d2:	2101      	movs	r1, #1
 80051d4:	f002 fb7a 	bl	80078cc <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 80051d8:	4638      	mov	r0, r7
 80051da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 80051dc:	2001      	movs	r0, #1
}
 80051de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080051e0 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 80051e0:	b119      	cbz	r1, 80051ea <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 80051e2:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 80051e6:	2000      	movs	r0, #0
 80051e8:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80051ea:	2002      	movs	r0, #2
  }
  
  return ret;
}
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop

080051f0 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80051f0:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 80051f4:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80051f6:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 80051fa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80051fe:	4770      	bx	lr

08005200 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8005200:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 8005204:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8005206:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800520a:	4770      	bx	lr

0800520c <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800520c:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8005210:	b18a      	cbz	r2, 8005236 <USBD_CDC_ReceivePacket+0x2a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005212:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
{      
 8005216:	b510      	push	{r4, lr}
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005218:	7c04      	ldrb	r4, [r0, #16]
 800521a:	b12c      	cbz	r4, 8005228 <USBD_CDC_ReceivePacket+0x1c>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800521c:	2340      	movs	r3, #64	; 0x40
 800521e:	2101      	movs	r1, #1
 8005220:	f002 fb54 	bl	80078cc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005224:	2000      	movs	r0, #0
 8005226:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8005228:	f44f 7300 	mov.w	r3, #512	; 0x200
 800522c:	2101      	movs	r1, #1
 800522e:	f002 fb4d 	bl	80078cc <USBD_LL_PrepareReceive>
    return USBD_OK;
 8005232:	4620      	mov	r0, r4
 8005234:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USBD_FAIL;
 8005236:	2002      	movs	r0, #2
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop

0800523c <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800523c:	b188      	cbz	r0, 8005262 <USBD_Init+0x26>
{
 800523e:	b508      	push	{r3, lr}
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8005240:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8005244:	b113      	cbz	r3, 800524c <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8005246:	2300      	movs	r3, #0
 8005248:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800524c:	b109      	cbz	r1, 8005252 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800524e:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8005252:	2101      	movs	r1, #1
  pdev->id = id;
 8005254:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8005256:	f880 11fc 	strb.w	r1, [r0, #508]	; 0x1fc
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800525a:	f002 fa85 	bl	8007768 <USBD_LL_Init>
  
  return USBD_OK; 
 800525e:	2000      	movs	r0, #0
 8005260:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8005262:	2002      	movs	r0, #2
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop

08005268 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8005268:	b119      	cbz	r1, 8005272 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800526a:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 800526e:	2000      	movs	r0, #0
 8005270:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8005272:	2002      	movs	r0, #2
  }
  
  return status;
}
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop

08005278 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8005278:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800527a:	f002 faad 	bl	80077d8 <USBD_LL_Start>
  
  return USBD_OK;  
}
 800527e:	2000      	movs	r0, #0
 8005280:	bd08      	pop	{r3, pc}
 8005282:	bf00      	nop

08005284 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005284:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8005286:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800528a:	b113      	cbz	r3, 8005292 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4798      	blx	r3
 8005290:	b108      	cbz	r0, 8005296 <USBD_SetClassConfig+0x12>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8005292:	2002      	movs	r0, #2
 8005294:	bd08      	pop	{r3, pc}
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8005296:	bd08      	pop	{r3, pc}

08005298 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005298:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800529a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	4798      	blx	r3
  return USBD_OK;
}
 80052a2:	2000      	movs	r0, #0
 80052a4:	bd08      	pop	{r3, pc}
 80052a6:	bf00      	nop

080052a8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80052a8:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80052aa:	f500 7502 	add.w	r5, r0, #520	; 0x208
{
 80052ae:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80052b0:	4628      	mov	r0, r5
 80052b2:	f000 faf3 	bl	800589c <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 80052b6:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 80052ba:	2001      	movs	r0, #1
  pdev->ep0_data_len = pdev->request.wLength;
 80052bc:	f8b4 220e 	ldrh.w	r2, [r4, #526]	; 0x20e
  switch (pdev->request.bmRequest & 0x1F) 
 80052c0:	f001 031f 	and.w	r3, r1, #31
  pdev->ep0_state = USBD_EP0_SETUP;
 80052c4:	f8c4 01f4 	str.w	r0, [r4, #500]	; 0x1f4
  switch (pdev->request.bmRequest & 0x1F) 
 80052c8:	4283      	cmp	r3, r0
  pdev->ep0_data_len = pdev->request.wLength;
 80052ca:	f8c4 21f8 	str.w	r2, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 80052ce:	d015      	beq.n	80052fc <USBD_LL_SetupStage+0x54>
 80052d0:	d30e      	bcc.n	80052f0 <USBD_LL_SetupStage+0x48>
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d006      	beq.n	80052e4 <USBD_LL_SetupStage+0x3c>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80052d6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80052da:	4620      	mov	r0, r4
 80052dc:	f002 faaa 	bl	8007834 <USBD_LL_StallEP>
    break;
  }  
  return USBD_OK;  
}
 80052e0:	2000      	movs	r0, #0
 80052e2:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdEPReq(pdev, &pdev->request);   
 80052e4:	4629      	mov	r1, r5
 80052e6:	4620      	mov	r0, r4
 80052e8:	f000 fa70 	bl	80057cc <USBD_StdEPReq>
}
 80052ec:	2000      	movs	r0, #0
 80052ee:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdDevReq (pdev, &pdev->request);
 80052f0:	4629      	mov	r1, r5
 80052f2:	4620      	mov	r0, r4
 80052f4:	f000 f8e2 	bl	80054bc <USBD_StdDevReq>
}
 80052f8:	2000      	movs	r0, #0
 80052fa:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 80052fc:	4629      	mov	r1, r5
 80052fe:	4620      	mov	r0, r4
 8005300:	f000 fa46 	bl	8005790 <USBD_StdItfReq>
}
 8005304:	2000      	movs	r0, #0
 8005306:	bd38      	pop	{r3, r4, r5, pc}

08005308 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8005308:	b538      	push	{r3, r4, r5, lr}
 800530a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800530c:	b929      	cbnz	r1, 800531a <USBD_LL_DataOutStage+0x12>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800530e:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8005312:	2b03      	cmp	r3, #3
 8005314:	d00c      	beq.n	8005330 <USBD_LL_DataOutStage+0x28>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8005316:	2000      	movs	r0, #0
 8005318:	bd38      	pop	{r3, r4, r5, pc}
  else if((pdev->pClass->DataOut != NULL)&&
 800531a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d0f8      	beq.n	8005316 <USBD_LL_DataOutStage+0xe>
 8005324:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8005328:	2a03      	cmp	r2, #3
 800532a:	d1f4      	bne.n	8005316 <USBD_LL_DataOutStage+0xe>
    pdev->pClass->DataOut(pdev, epnum); 
 800532c:	4798      	blx	r3
 800532e:	e7f2      	b.n	8005316 <USBD_LL_DataOutStage+0xe>
      if(pep->rem_length > pep->maxpacket)
 8005330:	f8d0 510c 	ldr.w	r5, [r0, #268]	; 0x10c
 8005334:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8005338:	429d      	cmp	r5, r3
 800533a:	d80c      	bhi.n	8005356 <USBD_LL_DataOutStage+0x4e>
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800533c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	b11b      	cbz	r3, 800534c <USBD_LL_DataOutStage+0x44>
 8005344:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8005348:	2a03      	cmp	r2, #3
 800534a:	d00f      	beq.n	800536c <USBD_LL_DataOutStage+0x64>
        USBD_CtlSendStatus(pdev);
 800534c:	4620      	mov	r0, r4
 800534e:	f000 fb0d 	bl	800596c <USBD_CtlSendStatus>
}
 8005352:	2000      	movs	r0, #0
 8005354:	bd38      	pop	{r3, r4, r5, pc}
        pep->rem_length -=  pep->maxpacket;
 8005356:	1aed      	subs	r5, r5, r3
        USBD_CtlContinueRx (pdev, 
 8005358:	4611      	mov	r1, r2
                            MIN(pep->rem_length ,pep->maxpacket));
 800535a:	42ab      	cmp	r3, r5
        pep->rem_length -=  pep->maxpacket;
 800535c:	f8c0 510c 	str.w	r5, [r0, #268]	; 0x10c
                            MIN(pep->rem_length ,pep->maxpacket));
 8005360:	bf28      	it	cs
 8005362:	462b      	movcs	r3, r5
        USBD_CtlContinueRx (pdev, 
 8005364:	b29a      	uxth	r2, r3
 8005366:	f000 faf9 	bl	800595c <USBD_CtlContinueRx>
 800536a:	e7d4      	b.n	8005316 <USBD_LL_DataOutStage+0xe>
          pdev->pClass->EP0_RxReady(pdev); 
 800536c:	4798      	blx	r3
 800536e:	e7ed      	b.n	800534c <USBD_LL_DataOutStage+0x44>

08005370 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8005370:	b570      	push	{r4, r5, r6, lr}
 8005372:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8005374:	b949      	cbnz	r1, 800538a <USBD_LL_DataInStage+0x1a>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8005376:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 800537a:	2b02      	cmp	r3, #2
 800537c:	d015      	beq.n	80053aa <USBD_LL_DataInStage+0x3a>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800537e:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8005382:	2b01      	cmp	r3, #1
 8005384:	d00c      	beq.n	80053a0 <USBD_LL_DataInStage+0x30>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8005386:	2000      	movs	r0, #0
 8005388:	bd70      	pop	{r4, r5, r6, pc}
  else if((pdev->pClass->DataIn != NULL)&& 
 800538a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0f8      	beq.n	8005386 <USBD_LL_DataInStage+0x16>
 8005394:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8005398:	2a03      	cmp	r2, #3
 800539a:	d1f4      	bne.n	8005386 <USBD_LL_DataInStage+0x16>
    pdev->pClass->DataIn(pdev, epnum); 
 800539c:	4798      	blx	r3
 800539e:	e7f2      	b.n	8005386 <USBD_LL_DataInStage+0x16>
      pdev->dev_test_mode = 0;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	2000      	movs	r0, #0
      pdev->dev_test_mode = 0;
 80053a4:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
}
 80053a8:	bd70      	pop	{r4, r5, r6, pc}
      if(pep->rem_length > pep->maxpacket)
 80053aa:	69c6      	ldr	r6, [r0, #28]
 80053ac:	460d      	mov	r5, r1
 80053ae:	6a03      	ldr	r3, [r0, #32]
 80053b0:	429e      	cmp	r6, r3
 80053b2:	d823      	bhi.n	80053fc <USBD_LL_DataInStage+0x8c>
        if((pep->total_length % pep->maxpacket == 0) &&
 80053b4:	6986      	ldr	r6, [r0, #24]
 80053b6:	fbb6 f2f3 	udiv	r2, r6, r3
 80053ba:	fb03 6212 	mls	r2, r3, r2, r6
 80053be:	b98a      	cbnz	r2, 80053e4 <USBD_LL_DataInStage+0x74>
 80053c0:	42b3      	cmp	r3, r6
 80053c2:	d80f      	bhi.n	80053e4 <USBD_LL_DataInStage+0x74>
           (pep->total_length >= pep->maxpacket) &&
 80053c4:	f8d0 31f8 	ldr.w	r3, [r0, #504]	; 0x1f8
 80053c8:	429e      	cmp	r6, r3
 80053ca:	d20b      	bcs.n	80053e4 <USBD_LL_DataInStage+0x74>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80053cc:	460a      	mov	r2, r1
 80053ce:	f000 faad 	bl	800592c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80053d2:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 80053d6:	462b      	mov	r3, r5
 80053d8:	462a      	mov	r2, r5
 80053da:	4629      	mov	r1, r5
 80053dc:	4620      	mov	r0, r4
 80053de:	f002 fa75 	bl	80078cc <USBD_LL_PrepareReceive>
 80053e2:	e7cc      	b.n	800537e <USBD_LL_DataInStage+0xe>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80053e4:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	b11b      	cbz	r3, 80053f4 <USBD_LL_DataInStage+0x84>
 80053ec:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 80053f0:	2a03      	cmp	r2, #3
 80053f2:	d00a      	beq.n	800540a <USBD_LL_DataInStage+0x9a>
          USBD_CtlReceiveStatus(pdev);
 80053f4:	4620      	mov	r0, r4
 80053f6:	f000 fac5 	bl	8005984 <USBD_CtlReceiveStatus>
 80053fa:	e7c0      	b.n	800537e <USBD_LL_DataInStage+0xe>
        pep->rem_length -=  pep->maxpacket;
 80053fc:	1af3      	subs	r3, r6, r3
        USBD_CtlContinueSendData (pdev, 
 80053fe:	4611      	mov	r1, r2
        pep->rem_length -=  pep->maxpacket;
 8005400:	61c3      	str	r3, [r0, #28]
        USBD_CtlContinueSendData (pdev, 
 8005402:	b29a      	uxth	r2, r3
 8005404:	f000 fa92 	bl	800592c <USBD_CtlContinueSendData>
 8005408:	e7e5      	b.n	80053d6 <USBD_LL_DataInStage+0x66>
            pdev->pClass->EP0_TxSent(pdev); 
 800540a:	4620      	mov	r0, r4
 800540c:	4798      	blx	r3
 800540e:	e7f1      	b.n	80053f4 <USBD_LL_DataInStage+0x84>

08005410 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8005410:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8005412:	2200      	movs	r2, #0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005414:	2540      	movs	r5, #64	; 0x40
{
 8005416:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 8005418:	4611      	mov	r1, r2
 800541a:	462b      	mov	r3, r5
 800541c:	f002 f9ea 	bl	80077f4 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8005420:	462b      	mov	r3, r5
 8005422:	2200      	movs	r2, #0
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005424:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8005428:	4620      	mov	r0, r4
 800542a:	2180      	movs	r1, #128	; 0x80
 800542c:	f002 f9e2 	bl	80077f4 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005430:	2201      	movs	r2, #1
  
  if (pdev->pClassData) 
 8005432:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005436:	6225      	str	r5, [r4, #32]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005438:	f884 21fc 	strb.w	r2, [r4, #508]	; 0x1fc
  if (pdev->pClassData) 
 800543c:	b12b      	cbz	r3, 800544a <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800543e:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8005442:	4620      	mov	r0, r4
 8005444:	7921      	ldrb	r1, [r4, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	4798      	blx	r3
 
  
  return USBD_OK;
}
 800544a:	2000      	movs	r0, #0
 800544c:	bd38      	pop	{r3, r4, r5, pc}
 800544e:	bf00      	nop

08005450 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8005450:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8005452:	2000      	movs	r0, #0
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop

08005458 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8005458:	4603      	mov	r3, r0
  pdev->dev_old_state =  pdev->dev_state;
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800545a:	2104      	movs	r1, #4
  return USBD_OK;
}
 800545c:	2000      	movs	r0, #0
  pdev->dev_old_state =  pdev->dev_state;
 800545e:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005462:	f883 11fc 	strb.w	r1, [r3, #508]	; 0x1fc
  pdev->dev_old_state =  pdev->dev_state;
 8005466:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
}
 800546a:	4770      	bx	lr

0800546c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800546c:	4603      	mov	r3, r0
  pdev->dev_state = pdev->dev_old_state;  
  return USBD_OK;
}
 800546e:	2000      	movs	r0, #0
  pdev->dev_state = pdev->dev_old_state;  
 8005470:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8005474:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
}
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop

0800547c <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800547c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8005480:	2a03      	cmp	r2, #3
 8005482:	d001      	beq.n	8005488 <USBD_LL_SOF+0xc>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 8005484:	2000      	movs	r0, #0
 8005486:	4770      	bx	lr
{
 8005488:	b508      	push	{r3, lr}
    if(pdev->pClass->SOF != NULL)
 800548a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800548e:	69db      	ldr	r3, [r3, #28]
 8005490:	b103      	cbz	r3, 8005494 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 8005492:	4798      	blx	r3
}
 8005494:	2000      	movs	r0, #0
 8005496:	bd08      	pop	{r3, pc}

08005498 <USBD_LL_IsoINIncomplete>:
 8005498:	2000      	movs	r0, #0
 800549a:	4770      	bx	lr

0800549c <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 800549c:	2000      	movs	r0, #0
 800549e:	4770      	bx	lr

080054a0 <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 80054a0:	2000      	movs	r0, #0
 80054a2:	4770      	bx	lr

080054a4 <USBD_LL_DevDisconnected>:
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80054a4:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
  pdev->dev_state = USBD_STATE_DEFAULT;
 80054a8:	2101      	movs	r1, #1
{
 80054aa:	b508      	push	{r3, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 80054ac:	f880 11fc 	strb.w	r1, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80054b0:	7901      	ldrb	r1, [r0, #4]
 80054b2:	6853      	ldr	r3, [r2, #4]
 80054b4:	4798      	blx	r3
   
  return USBD_OK;
}
 80054b6:	2000      	movs	r0, #0
 80054b8:	bd08      	pop	{r3, pc}
 80054ba:	bf00      	nop

080054bc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80054bc:	b530      	push	{r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 80054be:	784b      	ldrb	r3, [r1, #1]
{
 80054c0:	b083      	sub	sp, #12
 80054c2:	460d      	mov	r5, r1
 80054c4:	4604      	mov	r4, r0
  switch (req->bRequest) 
 80054c6:	2b09      	cmp	r3, #9
 80054c8:	d80c      	bhi.n	80054e4 <USBD_StdDevReq+0x28>
 80054ca:	e8df f003 	tbb	[pc, r3]
 80054ce:	4936      	.short	0x4936
 80054d0:	050b590b 	.word	0x050b590b
 80054d4:	168d0b66 	.word	0x168d0b66
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80054d8:	888b      	ldrh	r3, [r1, #4]
 80054da:	b91b      	cbnz	r3, 80054e4 <USBD_StdDevReq+0x28>
 80054dc:	88cb      	ldrh	r3, [r1, #6]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f000 8091 	beq.w	8005606 <USBD_StdDevReq+0x14a>
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 80054e4:	2180      	movs	r1, #128	; 0x80
 80054e6:	4620      	mov	r0, r4
 80054e8:	f002 f9a4 	bl	8007834 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80054ec:	4620      	mov	r0, r4
 80054ee:	2100      	movs	r1, #0
 80054f0:	f002 f9a0 	bl	8007834 <USBD_LL_StallEP>
}
 80054f4:	2000      	movs	r0, #0
 80054f6:	b003      	add	sp, #12
 80054f8:	bd30      	pop	{r4, r5, pc}
  cfgidx = (uint8_t)(req->wValue);                 
 80054fa:	7889      	ldrb	r1, [r1, #2]
 80054fc:	4da3      	ldr	r5, [pc, #652]	; (800578c <USBD_StdDevReq+0x2d0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80054fe:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8005500:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8005502:	d8ef      	bhi.n	80054e4 <USBD_StdDevReq+0x28>
    switch (pdev->dev_state) 
 8005504:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005508:	2b02      	cmp	r3, #2
 800550a:	f000 809a 	beq.w	8005642 <USBD_StdDevReq+0x186>
 800550e:	2b03      	cmp	r3, #3
 8005510:	d1e8      	bne.n	80054e4 <USBD_StdDevReq+0x28>
      if (cfgidx == 0) 
 8005512:	2900      	cmp	r1, #0
 8005514:	f000 8130 	beq.w	8005778 <USBD_StdDevReq+0x2bc>
      else  if (cfgidx != pdev->dev_config) 
 8005518:	6841      	ldr	r1, [r0, #4]
 800551a:	2901      	cmp	r1, #1
 800551c:	d009      	beq.n	8005532 <USBD_StdDevReq+0x76>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800551e:	b2c9      	uxtb	r1, r1
 8005520:	f7ff feba 	bl	8005298 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005524:	7829      	ldrb	r1, [r5, #0]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8005526:	4620      	mov	r0, r4
        pdev->dev_config = cfgidx;
 8005528:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800552a:	f7ff feab 	bl	8005284 <USBD_SetClassConfig>
 800552e:	2802      	cmp	r0, #2
 8005530:	d0d8      	beq.n	80054e4 <USBD_StdDevReq+0x28>
      USBD_CtlSendStatus(pdev);
 8005532:	4620      	mov	r0, r4
 8005534:	f000 fa1a 	bl	800596c <USBD_CtlSendStatus>
 8005538:	e7dc      	b.n	80054f4 <USBD_StdDevReq+0x38>
  switch (pdev->dev_state) 
 800553a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800553e:	2201      	movs	r2, #1
 8005540:	2103      	movs	r1, #3
 8005542:	3b02      	subs	r3, #2
 8005544:	4293      	cmp	r3, r2
 8005546:	d8cd      	bhi.n	80054e4 <USBD_StdDevReq+0x28>
    if (pdev->dev_remote_wakeup) 
 8005548:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800554c:	60c2      	str	r2, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 800554e:	b103      	cbz	r3, 8005552 <USBD_StdDevReq+0x96>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8005550:	60c1      	str	r1, [r0, #12]
    USBD_CtlSendData (pdev, 
 8005552:	2202      	movs	r2, #2
 8005554:	f104 010c 	add.w	r1, r4, #12
 8005558:	4620      	mov	r0, r4
 800555a:	f000 f9d9 	bl	8005910 <USBD_CtlSendData>
 800555e:	e7c9      	b.n	80054f4 <USBD_StdDevReq+0x38>
  switch (pdev->dev_state)
 8005560:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005564:	3b02      	subs	r3, #2
 8005566:	2b01      	cmp	r3, #1
 8005568:	d8bc      	bhi.n	80054e4 <USBD_StdDevReq+0x28>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800556a:	884b      	ldrh	r3, [r1, #2]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d1c1      	bne.n	80054f4 <USBD_StdDevReq+0x38>
      pdev->dev_remote_wakeup = 0; 
 8005570:	2200      	movs	r2, #0
      pdev->pClass->Setup (pdev, req);   
 8005572:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
      pdev->dev_remote_wakeup = 0; 
 8005576:	f8c0 2204 	str.w	r2, [r0, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	4798      	blx	r3
 800557e:	e7d8      	b.n	8005532 <USBD_StdDevReq+0x76>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005580:	884b      	ldrh	r3, [r1, #2]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d1b6      	bne.n	80054f4 <USBD_StdDevReq+0x38>
    pdev->pClass->Setup (pdev, req);   
 8005586:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
    pdev->dev_remote_wakeup = 1;  
 800558a:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 800558e:	6893      	ldr	r3, [r2, #8]
 8005590:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8005592:	4620      	mov	r0, r4
 8005594:	f000 f9ea 	bl	800596c <USBD_CtlSendStatus>
 8005598:	e7ac      	b.n	80054f4 <USBD_StdDevReq+0x38>
 800559a:	884a      	ldrh	r2, [r1, #2]
  switch (req->wValue >> 8)
 800559c:	0a13      	lsrs	r3, r2, #8
 800559e:	3b01      	subs	r3, #1
 80055a0:	2b0e      	cmp	r3, #14
 80055a2:	d89f      	bhi.n	80054e4 <USBD_StdDevReq+0x28>
 80055a4:	a101      	add	r1, pc, #4	; (adr r1, 80055ac <USBD_StdDevReq+0xf0>)
 80055a6:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055aa:	bf00      	nop
 80055ac:	080056af 	.word	0x080056af
 80055b0:	08005671 	.word	0x08005671
 80055b4:	0800565f 	.word	0x0800565f
 80055b8:	080054e5 	.word	0x080054e5
 80055bc:	080054e5 	.word	0x080054e5
 80055c0:	080056d9 	.word	0x080056d9
 80055c4:	080056bf 	.word	0x080056bf
 80055c8:	080054e5 	.word	0x080054e5
 80055cc:	080054e5 	.word	0x080054e5
 80055d0:	080054e5 	.word	0x080054e5
 80055d4:	080054e5 	.word	0x080054e5
 80055d8:	080054e5 	.word	0x080054e5
 80055dc:	080054e5 	.word	0x080054e5
 80055e0:	080054e5 	.word	0x080054e5
 80055e4:	080056ef 	.word	0x080056ef
  if (req->wLength != 1) 
 80055e8:	88ca      	ldrh	r2, [r1, #6]
 80055ea:	2a01      	cmp	r2, #1
 80055ec:	f47f af7a 	bne.w	80054e4 <USBD_StdDevReq+0x28>
    switch (pdev->dev_state )  
 80055f0:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d01d      	beq.n	8005634 <USBD_StdDevReq+0x178>
 80055f8:	2b03      	cmp	r3, #3
 80055fa:	f47f af73 	bne.w	80054e4 <USBD_StdDevReq+0x28>
      USBD_CtlSendData (pdev, 
 80055fe:	1d01      	adds	r1, r0, #4
 8005600:	f000 f986 	bl	8005910 <USBD_CtlSendData>
 8005604:	e776      	b.n	80054f4 <USBD_StdDevReq+0x38>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005606:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800560a:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800560c:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800560e:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005612:	f43f af67 	beq.w	80054e4 <USBD_StdDevReq+0x28>
      pdev->dev_address = dev_addr;
 8005616:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800561a:	4629      	mov	r1, r5
 800561c:	f002 f93a 	bl	8007894 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8005620:	4620      	mov	r0, r4
 8005622:	f000 f9a3 	bl	800596c <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8005626:	2d00      	cmp	r5, #0
 8005628:	f000 8099 	beq.w	800575e <USBD_StdDevReq+0x2a2>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800562c:	2302      	movs	r3, #2
 800562e:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8005632:	e75f      	b.n	80054f4 <USBD_StdDevReq+0x38>
      pdev->dev_default_config = 0;
 8005634:	2300      	movs	r3, #0
 8005636:	4601      	mov	r1, r0
 8005638:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 800563c:	f000 f968 	bl	8005910 <USBD_CtlSendData>
 8005640:	e758      	b.n	80054f4 <USBD_StdDevReq+0x38>
      if (cfgidx) 
 8005642:	2900      	cmp	r1, #0
 8005644:	f43f af75 	beq.w	8005532 <USBD_StdDevReq+0x76>
        pdev->dev_config = cfgidx;
 8005648:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800564a:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800564c:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800564e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8005652:	f7ff fe17 	bl	8005284 <USBD_SetClassConfig>
 8005656:	2802      	cmp	r0, #2
 8005658:	f47f af6b 	bne.w	8005532 <USBD_StdDevReq+0x76>
 800565c:	e742      	b.n	80054e4 <USBD_StdDevReq+0x28>
    switch ((uint8_t)(req->wValue))
 800565e:	b2d2      	uxtb	r2, r2
 8005660:	2a05      	cmp	r2, #5
 8005662:	f63f af3f 	bhi.w	80054e4 <USBD_StdDevReq+0x28>
 8005666:	e8df f002 	tbb	[pc, r2]
 800566a:	6a72      	.short	0x6a72
 800566c:	4a525a62 	.word	0x4a525a62
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8005670:	7c03      	ldrb	r3, [r0, #16]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d177      	bne.n	8005766 <USBD_StdDevReq+0x2aa>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005676:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800567a:	f10d 0006 	add.w	r0, sp, #6
 800567e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005680:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005682:	2302      	movs	r3, #2
 8005684:	7043      	strb	r3, [r0, #1]
  if((len != 0)&& (req->wLength != 0))
 8005686:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800568a:	2b00      	cmp	r3, #0
 800568c:	f43f af32 	beq.w	80054f4 <USBD_StdDevReq+0x38>
 8005690:	88ea      	ldrh	r2, [r5, #6]
 8005692:	2a00      	cmp	r2, #0
 8005694:	f43f af2e 	beq.w	80054f4 <USBD_StdDevReq+0x38>
    len = MIN(len , req->wLength);
 8005698:	4293      	cmp	r3, r2
    USBD_CtlSendData (pdev, 
 800569a:	4601      	mov	r1, r0
 800569c:	4620      	mov	r0, r4
    len = MIN(len , req->wLength);
 800569e:	bf28      	it	cs
 80056a0:	4613      	movcs	r3, r2
    USBD_CtlSendData (pdev, 
 80056a2:	461a      	mov	r2, r3
    len = MIN(len , req->wLength);
 80056a4:	f8ad 3006 	strh.w	r3, [sp, #6]
    USBD_CtlSendData (pdev, 
 80056a8:	f000 f932 	bl	8005910 <USBD_CtlSendData>
 80056ac:	e722      	b.n	80054f4 <USBD_StdDevReq+0x38>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80056ae:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80056b2:	f10d 0106 	add.w	r1, sp, #6
 80056b6:	7c00      	ldrb	r0, [r0, #16]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4798      	blx	r3
 80056bc:	e7e3      	b.n	8005686 <USBD_StdDevReq+0x1ca>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80056be:	7c03      	ldrb	r3, [r0, #16]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f47f af0f 	bne.w	80054e4 <USBD_StdDevReq+0x28>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80056c6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80056ca:	f10d 0006 	add.w	r0, sp, #6
 80056ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d0:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80056d2:	2307      	movs	r3, #7
 80056d4:	7043      	strb	r3, [r0, #1]
 80056d6:	e7d6      	b.n	8005686 <USBD_StdDevReq+0x1ca>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80056d8:	7c03      	ldrb	r3, [r0, #16]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f47f af02 	bne.w	80054e4 <USBD_StdDevReq+0x28>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80056e0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80056e4:	f10d 0006 	add.w	r0, sp, #6
 80056e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ea:	4798      	blx	r3
 80056ec:	e7cb      	b.n	8005686 <USBD_StdDevReq+0x1ca>
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80056ee:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80056f2:	f10d 0106 	add.w	r1, sp, #6
 80056f6:	7c00      	ldrb	r0, [r0, #16]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	4798      	blx	r3
 80056fc:	e7c3      	b.n	8005686 <USBD_StdDevReq+0x1ca>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80056fe:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8005702:	f10d 0106 	add.w	r1, sp, #6
 8005706:	7c00      	ldrb	r0, [r0, #16]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	4798      	blx	r3
 800570c:	e7bb      	b.n	8005686 <USBD_StdDevReq+0x1ca>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800570e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8005712:	f10d 0106 	add.w	r1, sp, #6
 8005716:	7c00      	ldrb	r0, [r0, #16]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	4798      	blx	r3
 800571c:	e7b3      	b.n	8005686 <USBD_StdDevReq+0x1ca>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800571e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8005722:	f10d 0106 	add.w	r1, sp, #6
 8005726:	7c00      	ldrb	r0, [r0, #16]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	4798      	blx	r3
 800572c:	e7ab      	b.n	8005686 <USBD_StdDevReq+0x1ca>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800572e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8005732:	f10d 0106 	add.w	r1, sp, #6
 8005736:	7c00      	ldrb	r0, [r0, #16]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	4798      	blx	r3
 800573c:	e7a3      	b.n	8005686 <USBD_StdDevReq+0x1ca>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800573e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8005742:	f10d 0106 	add.w	r1, sp, #6
 8005746:	7c00      	ldrb	r0, [r0, #16]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	4798      	blx	r3
 800574c:	e79b      	b.n	8005686 <USBD_StdDevReq+0x1ca>
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800574e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8005752:	f10d 0106 	add.w	r1, sp, #6
 8005756:	7c00      	ldrb	r0, [r0, #16]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	4798      	blx	r3
 800575c:	e793      	b.n	8005686 <USBD_StdDevReq+0x1ca>
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800575e:	2301      	movs	r3, #1
 8005760:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8005764:	e6c6      	b.n	80054f4 <USBD_StdDevReq+0x38>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005766:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800576a:	f10d 0006 	add.w	r0, sp, #6
 800576e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005770:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005772:	2302      	movs	r3, #2
 8005774:	7043      	strb	r3, [r0, #1]
 8005776:	e786      	b.n	8005686 <USBD_StdDevReq+0x1ca>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005778:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 800577a:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800577c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        USBD_ClrClassConfig(pdev , cfgidx);
 8005780:	f7ff fd8a 	bl	8005298 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8005784:	4620      	mov	r0, r4
 8005786:	f000 f8f1 	bl	800596c <USBD_CtlSendStatus>
 800578a:	e6b3      	b.n	80054f4 <USBD_StdDevReq+0x38>
 800578c:	200006c5 	.word	0x200006c5

08005790 <USBD_StdItfReq>:
{
 8005790:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 8005792:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
 8005796:	4604      	mov	r4, r0
  switch (pdev->dev_state) 
 8005798:	2b03      	cmp	r3, #3
 800579a:	d103      	bne.n	80057a4 <USBD_StdItfReq+0x14>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800579c:	790b      	ldrb	r3, [r1, #4]
 800579e:	460d      	mov	r5, r1
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d908      	bls.n	80057b6 <USBD_StdItfReq+0x26>
  USBD_LL_StallEP(pdev , 0x80);
 80057a4:	2180      	movs	r1, #128	; 0x80
 80057a6:	f002 f845 	bl	8007834 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80057aa:	4620      	mov	r0, r4
 80057ac:	2100      	movs	r1, #0
 80057ae:	f002 f841 	bl	8007834 <USBD_LL_StallEP>
}
 80057b2:	2000      	movs	r0, #0
 80057b4:	bd38      	pop	{r3, r4, r5, pc}
      pdev->pClass->Setup (pdev, req); 
 80057b6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 80057be:	88eb      	ldrh	r3, [r5, #6]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1f6      	bne.n	80057b2 <USBD_StdItfReq+0x22>
         USBD_CtlSendStatus(pdev);
 80057c4:	4620      	mov	r0, r4
 80057c6:	f000 f8d1 	bl	800596c <USBD_CtlSendStatus>
 80057ca:	e7f2      	b.n	80057b2 <USBD_StdItfReq+0x22>

080057cc <USBD_StdEPReq>:
{
 80057cc:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 80057ce:	780b      	ldrb	r3, [r1, #0]
{
 80057d0:	4605      	mov	r5, r0
  ep_addr  = LOBYTE(req->wIndex);   
 80057d2:	888a      	ldrh	r2, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 80057d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057d8:	2b20      	cmp	r3, #32
 80057da:	d059      	beq.n	8005890 <USBD_StdEPReq+0xc4>
  switch (req->bRequest) 
 80057dc:	784b      	ldrb	r3, [r1, #1]
 80057de:	460c      	mov	r4, r1
 80057e0:	b2d6      	uxtb	r6, r2
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d036      	beq.n	8005854 <USBD_StdEPReq+0x88>
 80057e6:	d319      	bcc.n	800581c <USBD_StdEPReq+0x50>
 80057e8:	2b03      	cmp	r3, #3
 80057ea:	d115      	bne.n	8005818 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 80057ec:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d033      	beq.n	800585c <USBD_StdEPReq+0x90>
 80057f4:	2b03      	cmp	r3, #3
 80057f6:	d142      	bne.n	800587e <USBD_StdEPReq+0xb2>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80057f8:	884b      	ldrh	r3, [r1, #2]
 80057fa:	b923      	cbnz	r3, 8005806 <USBD_StdEPReq+0x3a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80057fc:	0673      	lsls	r3, r6, #25
 80057fe:	d002      	beq.n	8005806 <USBD_StdEPReq+0x3a>
          USBD_LL_StallEP(pdev , ep_addr);
 8005800:	4631      	mov	r1, r6
 8005802:	f002 f817 	bl	8007834 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8005806:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 800580a:	4621      	mov	r1, r4
 800580c:	4628      	mov	r0, r5
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8005812:	4628      	mov	r0, r5
 8005814:	f000 f8aa 	bl	800596c <USBD_CtlSendStatus>
}
 8005818:	2000      	movs	r0, #0
 800581a:	bd70      	pop	{r4, r5, r6, pc}
    switch (pdev->dev_state) 
 800581c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005820:	2b02      	cmp	r3, #2
 8005822:	d01b      	beq.n	800585c <USBD_StdEPReq+0x90>
 8005824:	2b03      	cmp	r3, #3
 8005826:	d12a      	bne.n	800587e <USBD_StdEPReq+0xb2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8005828:	f006 047f 	and.w	r4, r6, #127	; 0x7f
 800582c:	0613      	lsls	r3, r2, #24
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800582e:	4631      	mov	r1, r6
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8005830:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 8005834:	bf4c      	ite	mi
 8005836:	3414      	addmi	r4, #20
 8005838:	f504 7482 	addpl.w	r4, r4, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800583c:	f002 f816 	bl	800786c <USBD_LL_IsStallEP>
 8005840:	1c03      	adds	r3, r0, #0
      USBD_CtlSendData (pdev,
 8005842:	4621      	mov	r1, r4
 8005844:	4628      	mov	r0, r5
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8005846:	bf18      	it	ne
 8005848:	2301      	movne	r3, #1
      USBD_CtlSendData (pdev,
 800584a:	2202      	movs	r2, #2
 800584c:	6023      	str	r3, [r4, #0]
 800584e:	f000 f85f 	bl	8005910 <USBD_CtlSendData>
      break;
 8005852:	e7e1      	b.n	8005818 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8005854:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005858:	2b02      	cmp	r3, #2
 800585a:	d105      	bne.n	8005868 <USBD_StdEPReq+0x9c>
      if ((ep_addr & 0x7F) != 0x00) 
 800585c:	0672      	lsls	r2, r6, #25
 800585e:	d0db      	beq.n	8005818 <USBD_StdEPReq+0x4c>
        USBD_LL_StallEP(pdev , ep_addr);
 8005860:	4631      	mov	r1, r6
 8005862:	f001 ffe7 	bl	8007834 <USBD_LL_StallEP>
 8005866:	e7d7      	b.n	8005818 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8005868:	2b03      	cmp	r3, #3
 800586a:	d108      	bne.n	800587e <USBD_StdEPReq+0xb2>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800586c:	884b      	ldrh	r3, [r1, #2]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1d2      	bne.n	8005818 <USBD_StdEPReq+0x4c>
        if ((ep_addr & 0x7F) != 0x00) 
 8005872:	0671      	lsls	r1, r6, #25
 8005874:	d0cd      	beq.n	8005812 <USBD_StdEPReq+0x46>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8005876:	4631      	mov	r1, r6
 8005878:	f001 ffea 	bl	8007850 <USBD_LL_ClearStallEP>
 800587c:	e7c3      	b.n	8005806 <USBD_StdEPReq+0x3a>
  USBD_LL_StallEP(pdev , 0x80);
 800587e:	2180      	movs	r1, #128	; 0x80
 8005880:	f001 ffd8 	bl	8007834 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8005884:	4628      	mov	r0, r5
 8005886:	2100      	movs	r1, #0
 8005888:	f001 ffd4 	bl	8007834 <USBD_LL_StallEP>
}
 800588c:	2000      	movs	r0, #0
 800588e:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClass->Setup (pdev, req);
 8005890:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	4798      	blx	r3
    return USBD_OK;
 8005898:	e7be      	b.n	8005818 <USBD_StdEPReq+0x4c>
 800589a:	bf00      	nop

0800589c <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800589c:	780b      	ldrb	r3, [r1, #0]
 800589e:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80058a0:	784b      	ldrb	r3, [r1, #1]
 80058a2:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80058a4:	78ca      	ldrb	r2, [r1, #3]
 80058a6:	788b      	ldrb	r3, [r1, #2]
 80058a8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80058ac:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80058ae:	794a      	ldrb	r2, [r1, #5]
 80058b0:	790b      	ldrb	r3, [r1, #4]
 80058b2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80058b6:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80058b8:	79ca      	ldrb	r2, [r1, #7]
 80058ba:	798b      	ldrb	r3, [r1, #6]
 80058bc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80058c0:	80c3      	strh	r3, [r0, #6]
 80058c2:	4770      	bx	lr

080058c4 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0;
  
  if (desc != NULL) 
 80058c4:	b300      	cbz	r0, 8005908 <USBD_GetString+0x44>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 80058c6:	7803      	ldrb	r3, [r0, #0]
{
 80058c8:	b430      	push	{r4, r5}
    while (*buf != '\0') 
 80058ca:	b1f3      	cbz	r3, 800590a <USBD_GetString+0x46>
 80058cc:	4604      	mov	r4, r0
 80058ce:	2300      	movs	r3, #0
    {
        len++;
 80058d0:	3301      	adds	r3, #1
    while (*buf != '\0') 
 80058d2:	f814 5f01 	ldrb.w	r5, [r4, #1]!
        len++;
 80058d6:	b2db      	uxtb	r3, r3
    while (*buf != '\0') 
 80058d8:	2d00      	cmp	r5, #0
 80058da:	d1f9      	bne.n	80058d0 <USBD_GetString+0xc>
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	3302      	adds	r3, #2
 80058e0:	b2dc      	uxtb	r4, r3
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80058e2:	2503      	movs	r5, #3
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80058e4:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 80058e6:	700c      	strb	r4, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80058e8:	704d      	strb	r5, [r1, #1]
    while (*desc != '\0') 
 80058ea:	7804      	ldrb	r4, [r0, #0]
 80058ec:	b15c      	cbz	r4, 8005906 <USBD_GetString+0x42>
 80058ee:	2302      	movs	r3, #2
      unicode[idx++] =  0x00;
 80058f0:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0x00;
 80058f6:	3302      	adds	r3, #2
      unicode[idx++] = *desc++;
 80058f8:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0') 
 80058fe:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8005902:	2c00      	cmp	r4, #0
 8005904:	d1f5      	bne.n	80058f2 <USBD_GetString+0x2e>
}
 8005906:	bc30      	pop	{r4, r5}
 8005908:	4770      	bx	lr
    while (*buf != '\0') 
 800590a:	2402      	movs	r4, #2
 800590c:	4623      	mov	r3, r4
 800590e:	e7e8      	b.n	80058e2 <USBD_GetString+0x1e>

08005910 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8005910:	b570      	push	{r4, r5, r6, lr}
 8005912:	4615      	mov	r5, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8005914:	2602      	movs	r6, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8005916:	460a      	mov	r2, r1
 8005918:	2100      	movs	r1, #0
  pdev->ep_in[0].total_length = len;
 800591a:	6185      	str	r5, [r0, #24]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800591c:	462b      	mov	r3, r5
  pdev->ep_in[0].rem_length   = len;
 800591e:	61c5      	str	r5, [r0, #28]
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8005920:	f8c0 61f4 	str.w	r6, [r0, #500]	; 0x1f4
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8005924:	f001 ffc4 	bl	80078b0 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8005928:	2000      	movs	r0, #0
 800592a:	bd70      	pop	{r4, r5, r6, pc}

0800592c <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800592c:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800592e:	4613      	mov	r3, r2
 8005930:	460a      	mov	r2, r1
 8005932:	2100      	movs	r1, #0
 8005934:	f001 ffbc 	bl	80078b0 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8005938:	2000      	movs	r0, #0
 800593a:	bd08      	pop	{r3, pc}

0800593c <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800593c:	b570      	push	{r4, r5, r6, lr}
 800593e:	4615      	mov	r5, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8005940:	2603      	movs	r6, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8005942:	460a      	mov	r2, r1
 8005944:	2100      	movs	r1, #0
  pdev->ep_out[0].total_length = len;
 8005946:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108
  USBD_LL_PrepareReceive (pdev,
 800594a:	462b      	mov	r3, r5
  pdev->ep_out[0].rem_length   = len;
 800594c:	f8c0 510c 	str.w	r5, [r0, #268]	; 0x10c
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8005950:	f8c0 61f4 	str.w	r6, [r0, #500]	; 0x1f4
  USBD_LL_PrepareReceive (pdev,
 8005954:	f001 ffba 	bl	80078cc <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8005958:	2000      	movs	r0, #0
 800595a:	bd70      	pop	{r4, r5, r6, pc}

0800595c <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800595c:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 800595e:	4613      	mov	r3, r2
 8005960:	460a      	mov	r2, r1
 8005962:	2100      	movs	r1, #0
 8005964:	f001 ffb2 	bl	80078cc <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8005968:	2000      	movs	r0, #0
 800596a:	bd08      	pop	{r3, pc}

0800596c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800596c:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800596e:	2204      	movs	r2, #4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8005970:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005972:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8005976:	4619      	mov	r1, r3
 8005978:	461a      	mov	r2, r3
 800597a:	f001 ff99 	bl	80078b0 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800597e:	2000      	movs	r0, #0
 8005980:	bd08      	pop	{r3, pc}
 8005982:	bf00      	nop

08005984 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8005984:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8005986:	2205      	movs	r2, #5
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8005988:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800598a:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  USBD_LL_PrepareReceive ( pdev,
 800598e:	4619      	mov	r1, r3
 8005990:	461a      	mov	r2, r3
 8005992:	f001 ff9b 	bl	80078cc <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8005996:	2000      	movs	r0, #0
 8005998:	bd08      	pop	{r3, pc}
 800599a:	bf00      	nop

0800599c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800599c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800599e:	f000 fc53 	bl	8006248 <vTaskStartScheduler>
  
  return osOK;
}
 80059a2:	2000      	movs	r0, #0
 80059a4:	bd08      	pop	{r3, pc}
 80059a6:	bf00      	nop

080059a8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80059a8:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059aa:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 80059ae:	b085      	sub	sp, #20
 80059b0:	4602      	mov	r2, r0
 80059b2:	460b      	mov	r3, r1
  if (priority != osPriorityError) {
 80059b4:	2c84      	cmp	r4, #132	; 0x84
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059b6:	ad03      	add	r5, sp, #12
 80059b8:	6811      	ldr	r1, [r2, #0]
    fpriority += (priority - osPriorityIdle);
 80059ba:	bf14      	ite	ne
 80059bc:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80059be:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059c0:	8a12      	ldrh	r2, [r2, #16]
 80059c2:	6840      	ldr	r0, [r0, #4]
 80059c4:	e88d 0030 	stmia.w	sp, {r4, r5}
 80059c8:	f000 fb06 	bl	8005fd8 <xTaskCreate>
 80059cc:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80059ce:	bf0c      	ite	eq
 80059d0:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80059d2:	2000      	movne	r0, #0
}
 80059d4:	b005      	add	sp, #20
 80059d6:	bd30      	pop	{r4, r5, pc}

080059d8 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80059d8:	2800      	cmp	r0, #0
 80059da:	bf08      	it	eq
 80059dc:	2001      	moveq	r0, #1
{
 80059de:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80059e0:	f000 fdbc 	bl	800655c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80059e4:	2000      	movs	r0, #0
 80059e6:	bd08      	pop	{r3, pc}

080059e8 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80059e8:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80059ea:	f000 fe73 	bl	80066d4 <xTaskGetSchedulerState>
 80059ee:	2801      	cmp	r0, #1
 80059f0:	d003      	beq.n	80059fa <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80059f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80059f6:	f000 b925 	b.w	8005c44 <xPortSysTickHandler>
 80059fa:	bd08      	pop	{r3, pc}

080059fc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059fc:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005a00:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005a04:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005a06:	6081      	str	r1, [r0, #8]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a08:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a0a:	6103      	str	r3, [r0, #16]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a0c:	e880 000c 	stmia.w	r0, {r2, r3}
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop

08005a14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005a14:	2300      	movs	r3, #0
 8005a16:	6103      	str	r3, [r0, #16]
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop

08005a1c <vListInsertEnd>:
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8005a1c:	e890 000c 	ldmia.w	r0, {r2, r3}
{
 8005a20:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a22:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 8005a24:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 8005a26:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a28:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a2a:	689c      	ldr	r4, [r3, #8]
 8005a2c:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a2e:	6099      	str	r1, [r3, #8]
}
 8005a30:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005a34:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005a36:	6002      	str	r2, [r0, #0]
}
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop

08005a3c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a3c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a3e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a40:	1c6b      	adds	r3, r5, #1
 8005a42:	d011      	beq.n	8005a68 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a44:	f100 0208 	add.w	r2, r0, #8
 8005a48:	e000      	b.n	8005a4c <vListInsert+0x10>
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	6853      	ldr	r3, [r2, #4]
 8005a4e:	681c      	ldr	r4, [r3, #0]
 8005a50:	42a5      	cmp	r5, r4
 8005a52:	d2fa      	bcs.n	8005a4a <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8005a54:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a56:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8005a58:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a5a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a5c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a5e:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005a60:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005a62:	6004      	str	r4, [r0, #0]
}
 8005a64:	bc30      	pop	{r4, r5}
 8005a66:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a68:	6902      	ldr	r2, [r0, #16]
 8005a6a:	6853      	ldr	r3, [r2, #4]
 8005a6c:	e7f2      	b.n	8005a54 <vListInsert+0x18>
 8005a6e:	bf00      	nop

08005a70 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005a70:	6902      	ldr	r2, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a72:	6843      	ldr	r3, [r0, #4]
 8005a74:	6881      	ldr	r1, [r0, #8]
{
 8005a76:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a78:	6854      	ldr	r4, [r2, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a7a:	6099      	str	r1, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a7c:	6881      	ldr	r1, [r0, #8]
	if( pxList->pxIndex == pxItemToRemove )
 8005a7e:	42a0      	cmp	r0, r4

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8005a80:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a84:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )--;
 8005a86:	6813      	ldr	r3, [r2, #0]
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a88:	bf08      	it	eq
 8005a8a:	6051      	streq	r1, [r2, #4]
	pxItemToRemove->pvContainer = NULL;
 8005a8c:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 8005a8e:	3b01      	subs	r3, #1
	pxItemToRemove->pvContainer = NULL;
 8005a90:	6101      	str	r1, [r0, #16]
}
 8005a92:	4618      	mov	r0, r3
	( pxList->uxNumberOfItems )--;
 8005a94:	6013      	str	r3, [r2, #0]
}
 8005a96:	4770      	bx	lr

08005a98 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a98:	4b0c      	ldr	r3, [pc, #48]	; (8005acc <prvTaskExitError+0x34>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	d00a      	beq.n	8005ab6 <prvTaskExitError+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa4:	b672      	cpsid	i
 8005aa6:	f383 8811 	msr	BASEPRI, r3
 8005aaa:	f3bf 8f6f 	isb	sy
 8005aae:	f3bf 8f4f 	dsb	sy
 8005ab2:	b662      	cpsie	i
 8005ab4:	e7fe      	b.n	8005ab4 <prvTaskExitError+0x1c>
 8005ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aba:	b672      	cpsid	i
 8005abc:	f383 8811 	msr	BASEPRI, r3
 8005ac0:	f3bf 8f6f 	isb	sy
 8005ac4:	f3bf 8f4f 	dsb	sy
 8005ac8:	b662      	cpsie	i
 8005aca:	e7fe      	b.n	8005aca <prvTaskExitError+0x32>
 8005acc:	20000118 	.word	0x20000118

08005ad0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005ad0:	4806      	ldr	r0, [pc, #24]	; (8005aec <prvPortStartFirstTask+0x1c>)
 8005ad2:	6800      	ldr	r0, [r0, #0]
 8005ad4:	6800      	ldr	r0, [r0, #0]
 8005ad6:	f380 8808 	msr	MSP, r0
 8005ada:	b662      	cpsie	i
 8005adc:	b661      	cpsie	f
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	f3bf 8f6f 	isb	sy
 8005ae6:	df00      	svc	0
 8005ae8:	bf00      	nop
 8005aea:	0000      	.short	0x0000
 8005aec:	e000ed08 	.word	0xe000ed08

08005af0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005af0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005b00 <vPortEnableVFP+0x10>
 8005af4:	6801      	ldr	r1, [r0, #0]
 8005af6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005afa:	6001      	str	r1, [r0, #0]
 8005afc:	4770      	bx	lr
 8005afe:	0000      	.short	0x0000
 8005b00:	e000ed88 	.word	0xe000ed88

08005b04 <pxPortInitialiseStack>:
{
 8005b04:	b470      	push	{r4, r5, r6}
 8005b06:	4603      	mov	r3, r0
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b08:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b0c:	4d08      	ldr	r5, [pc, #32]	; (8005b30 <pxPortInitialiseStack+0x2c>)
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8005b0e:	f06f 0402 	mvn.w	r4, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b12:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b16:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8005b1a:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b1c:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b1e:	f843 6c04 	str.w	r6, [r3, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b22:	f843 5c0c 	str.w	r5, [r3, #-12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8005b26:	f843 4c24 	str.w	r4, [r3, #-36]
}
 8005b2a:	bc70      	pop	{r4, r5, r6}
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	08005a99 	.word	0x08005a99
	...

08005b40 <SVC_Handler>:
	__asm volatile (
 8005b40:	4b07      	ldr	r3, [pc, #28]	; (8005b60 <pxCurrentTCBConst2>)
 8005b42:	6819      	ldr	r1, [r3, #0]
 8005b44:	6808      	ldr	r0, [r1, #0]
 8005b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b4a:	f380 8809 	msr	PSP, r0
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	f04f 0000 	mov.w	r0, #0
 8005b56:	f380 8811 	msr	BASEPRI, r0
 8005b5a:	4770      	bx	lr
 8005b5c:	f3af 8000 	nop.w

08005b60 <pxCurrentTCBConst2>:
 8005b60:	200042e4 	.word	0x200042e4

08005b64 <vPortEnterCritical>:
 8005b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b68:	b672      	cpsid	i
 8005b6a:	f383 8811 	msr	BASEPRI, r3
 8005b6e:	f3bf 8f6f 	isb	sy
 8005b72:	f3bf 8f4f 	dsb	sy
 8005b76:	b662      	cpsie	i
	uxCriticalNesting++;
 8005b78:	4a0b      	ldr	r2, [pc, #44]	; (8005ba8 <vPortEnterCritical+0x44>)
 8005b7a:	6813      	ldr	r3, [r2, #0]
 8005b7c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8005b7e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8005b80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8005b82:	d000      	beq.n	8005b86 <vPortEnterCritical+0x22>
 8005b84:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b86:	4b09      	ldr	r3, [pc, #36]	; (8005bac <vPortEnterCritical+0x48>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005b8e:	d0f9      	beq.n	8005b84 <vPortEnterCritical+0x20>
 8005b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b94:	b672      	cpsid	i
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	b662      	cpsie	i
 8005ba4:	e7fe      	b.n	8005ba4 <vPortEnterCritical+0x40>
 8005ba6:	bf00      	nop
 8005ba8:	20000118 	.word	0x20000118
 8005bac:	e000ed04 	.word	0xe000ed04

08005bb0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8005bb0:	4a09      	ldr	r2, [pc, #36]	; (8005bd8 <vPortExitCritical+0x28>)
 8005bb2:	6813      	ldr	r3, [r2, #0]
 8005bb4:	b953      	cbnz	r3, 8005bcc <vPortExitCritical+0x1c>
 8005bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bba:	b672      	cpsid	i
 8005bbc:	f383 8811 	msr	BASEPRI, r3
 8005bc0:	f3bf 8f6f 	isb	sy
 8005bc4:	f3bf 8f4f 	dsb	sy
 8005bc8:	b662      	cpsie	i
 8005bca:	e7fe      	b.n	8005bca <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005bd0:	b90b      	cbnz	r3, 8005bd6 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	4770      	bx	lr
 8005bd8:	20000118 	.word	0x20000118
 8005bdc:	00000000 	.word	0x00000000

08005be0 <PendSV_Handler>:
	__asm volatile
 8005be0:	f3ef 8009 	mrs	r0, PSP
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	4b15      	ldr	r3, [pc, #84]	; (8005c40 <pxCurrentTCBConst>)
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	f01e 0f10 	tst.w	lr, #16
 8005bf0:	bf08      	it	eq
 8005bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bfa:	6010      	str	r0, [r2, #0]
 8005bfc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8005c00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005c04:	b672      	cpsid	i
 8005c06:	f380 8811 	msr	BASEPRI, r0
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	b662      	cpsie	i
 8005c14:	f000 fd12 	bl	800663c <vTaskSwitchContext>
 8005c18:	f04f 0000 	mov.w	r0, #0
 8005c1c:	f380 8811 	msr	BASEPRI, r0
 8005c20:	bc08      	pop	{r3}
 8005c22:	6819      	ldr	r1, [r3, #0]
 8005c24:	6808      	ldr	r0, [r1, #0]
 8005c26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c2a:	f01e 0f10 	tst.w	lr, #16
 8005c2e:	bf08      	it	eq
 8005c30:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c34:	f380 8809 	msr	PSP, r0
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop

08005c40 <pxCurrentTCBConst>:
 8005c40:	200042e4 	.word	0x200042e4

08005c44 <xPortSysTickHandler>:
{
 8005c44:	b508      	push	{r3, lr}
	__asm volatile
 8005c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4a:	b672      	cpsid	i
 8005c4c:	f383 8811 	msr	BASEPRI, r3
 8005c50:	f3bf 8f6f 	isb	sy
 8005c54:	f3bf 8f4f 	dsb	sy
 8005c58:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8005c5a:	f000 fb3f 	bl	80062dc <xTaskIncrementTick>
 8005c5e:	b118      	cbz	r0, 8005c68 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c60:	4b03      	ldr	r3, [pc, #12]	; (8005c70 <xPortSysTickHandler+0x2c>)
 8005c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c66:	601a      	str	r2, [r3, #0]
	__asm volatile
 8005c68:	2300      	movs	r3, #0
 8005c6a:	f383 8811 	msr	BASEPRI, r3
 8005c6e:	bd08      	pop	{r3, pc}
 8005c70:	e000ed04 	.word	0xe000ed04

08005c74 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c74:	4b06      	ldr	r3, [pc, #24]	; (8005c90 <vPortSetupTimerInterrupt+0x1c>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005c76:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c78:	4a06      	ldr	r2, [pc, #24]	; (8005c94 <vPortSetupTimerInterrupt+0x20>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4806      	ldr	r0, [pc, #24]	; (8005c98 <vPortSetupTimerInterrupt+0x24>)
 8005c7e:	fba2 2303 	umull	r2, r3, r2, r3
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005c82:	4a06      	ldr	r2, [pc, #24]	; (8005c9c <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c84:	099b      	lsrs	r3, r3, #6
 8005c86:	3b01      	subs	r3, #1
 8005c88:	6003      	str	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005c8a:	6011      	str	r1, [r2, #0]
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	2000011c 	.word	0x2000011c
 8005c94:	10624dd3 	.word	0x10624dd3
 8005c98:	e000e014 	.word	0xe000e014
 8005c9c:	e000e010 	.word	0xe000e010

08005ca0 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005ca0:	4b23      	ldr	r3, [pc, #140]	; (8005d30 <xPortStartScheduler+0x90>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ca2:	2207      	movs	r2, #7
 8005ca4:	4823      	ldr	r0, [pc, #140]	; (8005d34 <xPortStartScheduler+0x94>)
{
 8005ca6:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005ca8:	7819      	ldrb	r1, [r3, #0]
{
 8005caa:	b083      	sub	sp, #12
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005cac:	25ff      	movs	r5, #255	; 0xff
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005cae:	4c22      	ldr	r4, [pc, #136]	; (8005d38 <xPortStartScheduler+0x98>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005cb0:	b2c9      	uxtb	r1, r1
 8005cb2:	9101      	str	r1, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005cb4:	701d      	strb	r5, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005cb6:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005cb8:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005cc0:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cc4:	f89d 1003 	ldrb.w	r1, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005cc8:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ccc:	0609      	lsls	r1, r1, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005cce:	7023      	strb	r3, [r4, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cd0:	d50d      	bpl.n	8005cee <xPortStartScheduler+0x4e>
 8005cd2:	2206      	movs	r2, #6
 8005cd4:	e000      	b.n	8005cd8 <xPortStartScheduler+0x38>
 8005cd6:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005cd8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005cdc:	1e51      	subs	r1, r2, #1
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ce6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005cea:	061b      	lsls	r3, r3, #24
 8005cec:	d4f3      	bmi.n	8005cd6 <xPortStartScheduler+0x36>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005cee:	9901      	ldr	r1, [sp, #4]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005cf0:	0212      	lsls	r2, r2, #8
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005cf2:	4b12      	ldr	r3, [pc, #72]	; (8005d3c <xPortStartScheduler+0x9c>)
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005cf4:	b2c9      	uxtb	r1, r1
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005cf6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005cfa:	4c0d      	ldr	r4, [pc, #52]	; (8005d30 <xPortStartScheduler+0x90>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005cfc:	6002      	str	r2, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005cfe:	7021      	strb	r1, [r4, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8005d06:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8005d0e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8005d10:	f7ff ffb0 	bl	8005c74 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8005d14:	4b0a      	ldr	r3, [pc, #40]	; (8005d40 <xPortStartScheduler+0xa0>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8005d1a:	f7ff fee9 	bl	8005af0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005d1e:	4a09      	ldr	r2, [pc, #36]	; (8005d44 <xPortStartScheduler+0xa4>)
 8005d20:	6813      	ldr	r3, [r2, #0]
 8005d22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005d26:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8005d28:	f7ff fed2 	bl	8005ad0 <prvPortStartFirstTask>
	prvTaskExitError();
 8005d2c:	f7ff feb4 	bl	8005a98 <prvTaskExitError>
 8005d30:	e000e400 	.word	0xe000e400
 8005d34:	200006c8 	.word	0x200006c8
 8005d38:	200006c6 	.word	0x200006c6
 8005d3c:	e000ed20 	.word	0xe000ed20
 8005d40:	20000118 	.word	0x20000118
 8005d44:	e000ef34 	.word	0xe000ef34

08005d48 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d48:	4b11      	ldr	r3, [pc, #68]	; (8005d90 <prvInsertBlockIntoFreeList+0x48>)
{
 8005d4a:	b430      	push	{r4, r5}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	4282      	cmp	r2, r0
 8005d50:	d201      	bcs.n	8005d56 <prvInsertBlockIntoFreeList+0xe>
 8005d52:	4613      	mov	r3, r2
 8005d54:	e7fa      	b.n	8005d4c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d56:	685c      	ldr	r4, [r3, #4]
 8005d58:	1919      	adds	r1, r3, r4
 8005d5a:	4288      	cmp	r0, r1
 8005d5c:	d103      	bne.n	8005d66 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d5e:	6841      	ldr	r1, [r0, #4]
 8005d60:	4618      	mov	r0, r3
 8005d62:	4421      	add	r1, r4
 8005d64:	6059      	str	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d66:	6844      	ldr	r4, [r0, #4]
 8005d68:	1901      	adds	r1, r0, r4
 8005d6a:	428a      	cmp	r2, r1
 8005d6c:	d109      	bne.n	8005d82 <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d6e:	4909      	ldr	r1, [pc, #36]	; (8005d94 <prvInsertBlockIntoFreeList+0x4c>)
 8005d70:	6809      	ldr	r1, [r1, #0]
 8005d72:	428a      	cmp	r2, r1
 8005d74:	d005      	beq.n	8005d82 <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d76:	6851      	ldr	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d78:	6815      	ldr	r5, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d7a:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d7c:	6005      	str	r5, [r0, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d7e:	6041      	str	r1, [r0, #4]
 8005d80:	e000      	b.n	8005d84 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005d82:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005d84:	4298      	cmp	r0, r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d86:	bc30      	pop	{r4, r5}
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005d88:	bf18      	it	ne
 8005d8a:	6018      	strne	r0, [r3, #0]
}
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	200042dc 	.word	0x200042dc
 8005d94:	200006cc 	.word	0x200006cc

08005d98 <pvPortMalloc>:
{
 8005d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 8005d9c:	4e47      	ldr	r6, [pc, #284]	; (8005ebc <pvPortMalloc+0x124>)
{
 8005d9e:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8005da0:	f000 fa94 	bl	80062cc <vTaskSuspendAll>
		if( pxEnd == NULL )
 8005da4:	6833      	ldr	r3, [r6, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d05e      	beq.n	8005e68 <pvPortMalloc+0xd0>
 8005daa:	4a45      	ldr	r2, [pc, #276]	; (8005ec0 <pvPortMalloc+0x128>)
 8005dac:	6816      	ldr	r6, [r2, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005dae:	4234      	tst	r4, r6
 8005db0:	d154      	bne.n	8005e5c <pvPortMalloc+0xc4>
			if( xWantedSize > 0 )
 8005db2:	2c00      	cmp	r4, #0
 8005db4:	d052      	beq.n	8005e5c <pvPortMalloc+0xc4>
				xWantedSize += xHeapStructSize;
 8005db6:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005dba:	0750      	lsls	r0, r2, #29
 8005dbc:	d002      	beq.n	8005dc4 <pvPortMalloc+0x2c>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005dbe:	f022 0207 	bic.w	r2, r2, #7
 8005dc2:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005dc4:	2a00      	cmp	r2, #0
 8005dc6:	d049      	beq.n	8005e5c <pvPortMalloc+0xc4>
 8005dc8:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8005ed0 <pvPortMalloc+0x138>
 8005dcc:	f8d8 5000 	ldr.w	r5, [r8]
 8005dd0:	42aa      	cmp	r2, r5
 8005dd2:	d843      	bhi.n	8005e5c <pvPortMalloc+0xc4>
				pxBlock = xStart.pxNextFreeBlock;
 8005dd4:	483b      	ldr	r0, [pc, #236]	; (8005ec4 <pvPortMalloc+0x12c>)
 8005dd6:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005dd8:	e006      	b.n	8005de8 <pvPortMalloc+0x50>
 8005dda:	f8d4 e000 	ldr.w	lr, [r4]
 8005dde:	f1be 0f00 	cmp.w	lr, #0
 8005de2:	d004      	beq.n	8005dee <pvPortMalloc+0x56>
 8005de4:	4620      	mov	r0, r4
 8005de6:	4674      	mov	r4, lr
 8005de8:	6861      	ldr	r1, [r4, #4]
 8005dea:	428a      	cmp	r2, r1
 8005dec:	d8f5      	bhi.n	8005dda <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8005dee:	429c      	cmp	r4, r3
 8005df0:	d034      	beq.n	8005e5c <pvPortMalloc+0xc4>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005df2:	1a8b      	subs	r3, r1, r2
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005df4:	6827      	ldr	r7, [r4, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005df6:	2b10      	cmp	r3, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005df8:	6007      	str	r7, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005dfa:	d912      	bls.n	8005e22 <pvPortMalloc+0x8a>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005dfc:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dfe:	0741      	lsls	r1, r0, #29
 8005e00:	d00a      	beq.n	8005e18 <pvPortMalloc+0x80>
	__asm volatile
 8005e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e06:	b672      	cpsid	i
 8005e08:	f383 8811 	msr	BASEPRI, r3
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	b662      	cpsie	i
 8005e16:	e7fe      	b.n	8005e16 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e18:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e1a:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e1c:	f7ff ff94 	bl	8005d48 <prvInsertBlockIntoFreeList>
 8005e20:	6861      	ldr	r1, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e22:	4a29      	ldr	r2, [pc, #164]	; (8005ec8 <pvPortMalloc+0x130>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e24:	1a6d      	subs	r5, r5, r1
					pxBlock->pxNextFreeBlock = NULL;
 8005e26:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e28:	4331      	orrs	r1, r6
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e2a:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e2c:	f8c8 5000 	str.w	r5, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e30:	4285      	cmp	r5, r0
					pxBlock->pxNextFreeBlock = NULL;
 8005e32:	6023      	str	r3, [r4, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e34:	6061      	str	r1, [r4, #4]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e36:	bf38      	it	cc
 8005e38:	6015      	strcc	r5, [r2, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e3a:	f104 0508 	add.w	r5, r4, #8
	( void ) xTaskResumeAll();
 8005e3e:	f000 fafd 	bl	800643c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e42:	076b      	lsls	r3, r5, #29
 8005e44:	d00d      	beq.n	8005e62 <pvPortMalloc+0xca>
 8005e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4a:	b672      	cpsid	i
 8005e4c:	f383 8811 	msr	BASEPRI, r3
 8005e50:	f3bf 8f6f 	isb	sy
 8005e54:	f3bf 8f4f 	dsb	sy
 8005e58:	b662      	cpsie	i
 8005e5a:	e7fe      	b.n	8005e5a <pvPortMalloc+0xc2>
	( void ) xTaskResumeAll();
 8005e5c:	2500      	movs	r5, #0
 8005e5e:	f000 faed 	bl	800643c <xTaskResumeAll>
}
 8005e62:	4628      	mov	r0, r5
 8005e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uxAddress = ( size_t ) ucHeap;
 8005e68:	4918      	ldr	r1, [pc, #96]	; (8005ecc <pvPortMalloc+0x134>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e6a:	074d      	lsls	r5, r1, #29
 8005e6c:	d023      	beq.n	8005eb6 <pvPortMalloc+0x11e>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e6e:	1dca      	adds	r2, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e70:	f501 5370 	add.w	r3, r1, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e74:	f022 0107 	bic.w	r1, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e78:	1a5b      	subs	r3, r3, r1
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e7a:	440b      	add	r3, r1
	xStart.xBlockSize = ( size_t ) 0;
 8005e7c:	2000      	movs	r0, #0
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e7e:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e82:	4f10      	ldr	r7, [pc, #64]	; (8005ec4 <pvPortMalloc+0x12c>)
	uxAddress -= xHeapStructSize;
 8005e84:	3b08      	subs	r3, #8
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e86:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8005ec8 <pvPortMalloc+0x130>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e8a:	f8df c044 	ldr.w	ip, [pc, #68]	; 8005ed0 <pvPortMalloc+0x138>
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e8e:	f023 0307 	bic.w	r3, r3, #7
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e92:	f8df e02c 	ldr.w	lr, [pc, #44]	; 8005ec0 <pvPortMalloc+0x128>
	xStart.xBlockSize = ( size_t ) 0;
 8005e96:	6078      	str	r0, [r7, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e98:	1a5a      	subs	r2, r3, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e9a:	6039      	str	r1, [r7, #0]
	pxEnd->xBlockSize = 0;
 8005e9c:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e9e:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 8005ea0:	6033      	str	r3, [r6, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ea2:	462e      	mov	r6, r5
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ea4:	f8c8 2000 	str.w	r2, [r8]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ea8:	f8cc 2000 	str.w	r2, [ip]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005eac:	f8ce 5000 	str.w	r5, [lr]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005eb0:	604a      	str	r2, [r1, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005eb2:	600b      	str	r3, [r1, #0]
 8005eb4:	e77b      	b.n	8005dae <pvPortMalloc+0x16>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005eb6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005eba:	e7de      	b.n	8005e7a <pvPortMalloc+0xe2>
 8005ebc:	200006cc 	.word	0x200006cc
 8005ec0:	200042d0 	.word	0x200042d0
 8005ec4:	200042dc 	.word	0x200042dc
 8005ec8:	200042d8 	.word	0x200042d8
 8005ecc:	200006d0 	.word	0x200006d0
 8005ed0:	200042d4 	.word	0x200042d4

08005ed4 <vPortFree>:
	if( pv != NULL )
 8005ed4:	b1f0      	cbz	r0, 8005f14 <vPortFree+0x40>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ed6:	4a1b      	ldr	r2, [pc, #108]	; (8005f44 <vPortFree+0x70>)
 8005ed8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005edc:	6812      	ldr	r2, [r2, #0]
 8005ede:	4213      	tst	r3, r2
 8005ee0:	d10a      	bne.n	8005ef8 <vPortFree+0x24>
 8005ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee6:	b672      	cpsid	i
 8005ee8:	f383 8811 	msr	BASEPRI, r3
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	b662      	cpsie	i
 8005ef6:	e7fe      	b.n	8005ef6 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ef8:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005efc:	b159      	cbz	r1, 8005f16 <vPortFree+0x42>
 8005efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f02:	b672      	cpsid	i
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	b662      	cpsie	i
 8005f12:	e7fe      	b.n	8005f12 <vPortFree+0x3e>
 8005f14:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f16:	ea23 0302 	bic.w	r3, r3, r2
{
 8005f1a:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f1c:	f840 3c04 	str.w	r3, [r0, #-4]
 8005f20:	4604      	mov	r4, r0
				vTaskSuspendAll();
 8005f22:	f000 f9d3 	bl	80062cc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f26:	4a08      	ldr	r2, [pc, #32]	; (8005f48 <vPortFree+0x74>)
 8005f28:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f2c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f30:	6811      	ldr	r1, [r2, #0]
 8005f32:	440b      	add	r3, r1
 8005f34:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f36:	f7ff ff07 	bl	8005d48 <prvInsertBlockIntoFreeList>
}
 8005f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8005f3e:	f000 ba7d 	b.w	800643c <xTaskResumeAll>
 8005f42:	bf00      	nop
 8005f44:	200042d0 	.word	0x200042d0
 8005f48:	200042d4 	.word	0x200042d4

08005f4c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f4e:	4b1b      	ldr	r3, [pc, #108]	; (8005fbc <prvAddCurrentTaskToDelayedList+0x70>)
{
 8005f50:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f52:	4d1b      	ldr	r5, [pc, #108]	; (8005fc0 <prvAddCurrentTaskToDelayedList+0x74>)
{
 8005f54:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8005f56:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f58:	6828      	ldr	r0, [r5, #0]
 8005f5a:	3004      	adds	r0, #4
 8005f5c:	f7ff fd88 	bl	8005a70 <uxListRemove>
 8005f60:	b940      	cbnz	r0, 8005f74 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005f62:	682b      	ldr	r3, [r5, #0]
 8005f64:	2201      	movs	r2, #1
 8005f66:	4917      	ldr	r1, [pc, #92]	; (8005fc4 <prvAddCurrentTaskToDelayedList+0x78>)
 8005f68:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005f6a:	680b      	ldr	r3, [r1, #0]
 8005f6c:	4082      	lsls	r2, r0
 8005f6e:	ea23 0302 	bic.w	r3, r3, r2
 8005f72:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f74:	1c63      	adds	r3, r4, #1
 8005f76:	d100      	bne.n	8005f7a <prvAddCurrentTaskToDelayedList+0x2e>
 8005f78:	b9c7      	cbnz	r7, 8005fac <prvAddCurrentTaskToDelayedList+0x60>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f7a:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f7c:	682b      	ldr	r3, [r5, #0]

			if( xTimeToWake < xConstTickCount )
 8005f7e:	42a6      	cmp	r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f80:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f82:	d80b      	bhi.n	8005f9c <prvAddCurrentTaskToDelayedList+0x50>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f84:	4b10      	ldr	r3, [pc, #64]	; (8005fc8 <prvAddCurrentTaskToDelayedList+0x7c>)
 8005f86:	6818      	ldr	r0, [r3, #0]
 8005f88:	6829      	ldr	r1, [r5, #0]
 8005f8a:	3104      	adds	r1, #4
 8005f8c:	f7ff fd56 	bl	8005a3c <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f90:	4b0e      	ldr	r3, [pc, #56]	; (8005fcc <prvAddCurrentTaskToDelayedList+0x80>)
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	4294      	cmp	r4, r2
 8005f96:	d200      	bcs.n	8005f9a <prvAddCurrentTaskToDelayedList+0x4e>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8005f98:	601c      	str	r4, [r3, #0]
 8005f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f9c:	4b0c      	ldr	r3, [pc, #48]	; (8005fd0 <prvAddCurrentTaskToDelayedList+0x84>)
 8005f9e:	6818      	ldr	r0, [r3, #0]
 8005fa0:	6829      	ldr	r1, [r5, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005fa2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fa6:	3104      	adds	r1, #4
 8005fa8:	f7ff bd48 	b.w	8005a3c <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fac:	6829      	ldr	r1, [r5, #0]
 8005fae:	4809      	ldr	r0, [pc, #36]	; (8005fd4 <prvAddCurrentTaskToDelayedList+0x88>)
 8005fb0:	3104      	adds	r1, #4
}
 8005fb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fb6:	f7ff bd31 	b.w	8005a1c <vListInsertEnd>
 8005fba:	bf00      	nop
 8005fbc:	2000440c 	.word	0x2000440c
 8005fc0:	200042e4 	.word	0x200042e4
 8005fc4:	20004394 	.word	0x20004394
 8005fc8:	200042e8 	.word	0x200042e8
 8005fcc:	200043c4 	.word	0x200043c4
 8005fd0:	200042ec 	.word	0x200042ec
 8005fd4:	200043e4 	.word	0x200043e4

08005fd8 <xTaskCreate>:
	{
 8005fd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fdc:	0096      	lsls	r6, r2, #2
	{
 8005fde:	4680      	mov	r8, r0
 8005fe0:	460d      	mov	r5, r1
 8005fe2:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fe4:	4630      	mov	r0, r6
	{
 8005fe6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fe8:	f7ff fed6 	bl	8005d98 <pvPortMalloc>
			if( pxStack != NULL )
 8005fec:	2800      	cmp	r0, #0
 8005fee:	f000 80d6 	beq.w	800619e <xTaskCreate+0x1c6>
 8005ff2:	4682      	mov	sl, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005ff4:	2064      	movs	r0, #100	; 0x64
 8005ff6:	f7ff fecf 	bl	8005d98 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8005ffa:	4604      	mov	r4, r0
 8005ffc:	2800      	cmp	r0, #0
 8005ffe:	f000 80db 	beq.w	80061b8 <xTaskCreate+0x1e0>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006002:	4632      	mov	r2, r6
					pxNewTCB->pxStack = pxStack;
 8006004:	f8c0 a030 	str.w	sl, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006008:	21a5      	movs	r1, #165	; 0xa5
 800600a:	4650      	mov	r0, sl
 800600c:	f001 ff7f 	bl	8007f0e <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006010:	3e04      	subs	r6, #4
 8006012:	6b23      	ldr	r3, [r4, #48]	; 0x30
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006014:	782a      	ldrb	r2, [r5, #0]
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006016:	441e      	add	r6, r3
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006018:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 800601c:	782b      	ldrb	r3, [r5, #0]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800601e:	f026 0607 	bic.w	r6, r6, #7
		if( pcName[ x ] == 0x00 )
 8006022:	2b00      	cmp	r3, #0
 8006024:	d047      	beq.n	80060b6 <xTaskCreate+0xde>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006026:	786b      	ldrb	r3, [r5, #1]
 8006028:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		if( pcName[ x ] == 0x00 )
 800602c:	786b      	ldrb	r3, [r5, #1]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d041      	beq.n	80060b6 <xTaskCreate+0xde>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006032:	78ab      	ldrb	r3, [r5, #2]
 8006034:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
		if( pcName[ x ] == 0x00 )
 8006038:	78ab      	ldrb	r3, [r5, #2]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d03b      	beq.n	80060b6 <xTaskCreate+0xde>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800603e:	78eb      	ldrb	r3, [r5, #3]
 8006040:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
		if( pcName[ x ] == 0x00 )
 8006044:	78eb      	ldrb	r3, [r5, #3]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d035      	beq.n	80060b6 <xTaskCreate+0xde>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800604a:	792b      	ldrb	r3, [r5, #4]
 800604c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if( pcName[ x ] == 0x00 )
 8006050:	792b      	ldrb	r3, [r5, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d02f      	beq.n	80060b6 <xTaskCreate+0xde>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006056:	796b      	ldrb	r3, [r5, #5]
 8006058:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		if( pcName[ x ] == 0x00 )
 800605c:	796b      	ldrb	r3, [r5, #5]
 800605e:	b353      	cbz	r3, 80060b6 <xTaskCreate+0xde>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006060:	79ab      	ldrb	r3, [r5, #6]
 8006062:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
		if( pcName[ x ] == 0x00 )
 8006066:	79ab      	ldrb	r3, [r5, #6]
 8006068:	b32b      	cbz	r3, 80060b6 <xTaskCreate+0xde>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800606a:	79eb      	ldrb	r3, [r5, #7]
 800606c:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		if( pcName[ x ] == 0x00 )
 8006070:	79eb      	ldrb	r3, [r5, #7]
 8006072:	b303      	cbz	r3, 80060b6 <xTaskCreate+0xde>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006074:	7a2b      	ldrb	r3, [r5, #8]
 8006076:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if( pcName[ x ] == 0x00 )
 800607a:	7a2b      	ldrb	r3, [r5, #8]
 800607c:	b1db      	cbz	r3, 80060b6 <xTaskCreate+0xde>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800607e:	7a6b      	ldrb	r3, [r5, #9]
 8006080:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		if( pcName[ x ] == 0x00 )
 8006084:	7a6b      	ldrb	r3, [r5, #9]
 8006086:	b1b3      	cbz	r3, 80060b6 <xTaskCreate+0xde>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006088:	7aab      	ldrb	r3, [r5, #10]
 800608a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		if( pcName[ x ] == 0x00 )
 800608e:	7aab      	ldrb	r3, [r5, #10]
 8006090:	b18b      	cbz	r3, 80060b6 <xTaskCreate+0xde>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006092:	7aeb      	ldrb	r3, [r5, #11]
 8006094:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
		if( pcName[ x ] == 0x00 )
 8006098:	7aeb      	ldrb	r3, [r5, #11]
 800609a:	b163      	cbz	r3, 80060b6 <xTaskCreate+0xde>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800609c:	7b2b      	ldrb	r3, [r5, #12]
 800609e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
		if( pcName[ x ] == 0x00 )
 80060a2:	7b2b      	ldrb	r3, [r5, #12]
 80060a4:	b13b      	cbz	r3, 80060b6 <xTaskCreate+0xde>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80060a6:	7b6b      	ldrb	r3, [r5, #13]
 80060a8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		if( pcName[ x ] == 0x00 )
 80060ac:	7b6b      	ldrb	r3, [r5, #13]
 80060ae:	b113      	cbz	r3, 80060b6 <xTaskCreate+0xde>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80060b0:	7bab      	ldrb	r3, [r5, #14]
 80060b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060b6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80060b8:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060bc:	f104 0a04 	add.w	sl, r4, #4
 80060c0:	2d06      	cmp	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80060c2:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060c6:	4650      	mov	r0, sl
		pxNewTCB->uxMutexesHeld = 0;
 80060c8:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
 80060cc:	bf28      	it	cs
 80060ce:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 80060d0:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80060d2:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060d4:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060d8:	f7ff fc9c 	bl	8005a14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060dc:	f104 0018 	add.w	r0, r4, #24
 80060e0:	f7ff fc98 	bl	8005a14 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80060e4:	f8c4 b05c 	str.w	fp, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80060e8:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060ea:	61a5      	str	r5, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80060ec:	4641      	mov	r1, r8
		pxNewTCB->pxTaskTag = NULL;
 80060ee:	f8c4 b054 	str.w	fp, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80060f2:	4630      	mov	r0, r6
		pxNewTCB->ulRunTimeCounter = 0UL;
 80060f4:	f8c4 b058 	str.w	fp, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80060f8:	f884 b060 	strb.w	fp, [r4, #96]	; 0x60
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80060fc:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80060fe:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006100:	f7ff fd00 	bl	8005b04 <pxPortInitialiseStack>
 8006104:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8006106:	b107      	cbz	r7, 800610a <xTaskCreate+0x132>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006108:	603c      	str	r4, [r7, #0]
	taskENTER_CRITICAL();
 800610a:	f7ff fd2b 	bl	8005b64 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800610e:	4a40      	ldr	r2, [pc, #256]	; (8006210 <xTaskCreate+0x238>)
		if( pxCurrentTCB == NULL )
 8006110:	4e40      	ldr	r6, [pc, #256]	; (8006214 <xTaskCreate+0x23c>)
		uxCurrentNumberOfTasks++;
 8006112:	6813      	ldr	r3, [r2, #0]
 8006114:	3301      	adds	r3, #1
 8006116:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006118:	6833      	ldr	r3, [r6, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d043      	beq.n	80061a6 <xTaskCreate+0x1ce>
			if( xSchedulerRunning == pdFALSE )
 800611e:	4f3e      	ldr	r7, [pc, #248]	; (8006218 <xTaskCreate+0x240>)
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	b383      	cbz	r3, 8006186 <xTaskCreate+0x1ae>
 8006124:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006126:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8006238 <xTaskCreate+0x260>
		uxTaskNumber++;
 800612a:	f8df c110 	ldr.w	ip, [pc, #272]	; 800623c <xTaskCreate+0x264>
		prvAddTaskToReadyList( pxNewTCB );
 800612e:	2501      	movs	r5, #1
 8006130:	f8df e10c 	ldr.w	lr, [pc, #268]	; 8006240 <xTaskCreate+0x268>
 8006134:	4651      	mov	r1, sl
		uxTaskNumber++;
 8006136:	f8dc 2000 	ldr.w	r2, [ip]
		prvAddTaskToReadyList( pxNewTCB );
 800613a:	fa05 f903 	lsl.w	r9, r5, r3
 800613e:	f8de 0000 	ldr.w	r0, [lr]
 8006142:	eb03 0383 	add.w	r3, r3, r3, lsl #2
		uxTaskNumber++;
 8006146:	442a      	add	r2, r5
		prvAddTaskToReadyList( pxNewTCB );
 8006148:	ea49 0900 	orr.w	r9, r9, r0
 800614c:	eb08 0083 	add.w	r0, r8, r3, lsl #2
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006150:	6462      	str	r2, [r4, #68]	; 0x44
		uxTaskNumber++;
 8006152:	f8cc 2000 	str.w	r2, [ip]
		prvAddTaskToReadyList( pxNewTCB );
 8006156:	f8ce 9000 	str.w	r9, [lr]
 800615a:	f7ff fc5f 	bl	8005a1c <vListInsertEnd>
	taskEXIT_CRITICAL();
 800615e:	f7ff fd27 	bl	8005bb0 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	b1c3      	cbz	r3, 8006198 <xTaskCreate+0x1c0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006166:	6832      	ldr	r2, [r6, #0]
 8006168:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800616a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800616c:	429a      	cmp	r2, r3
 800616e:	d213      	bcs.n	8006198 <xTaskCreate+0x1c0>
			taskYIELD_IF_USING_PREEMPTION();
 8006170:	4b2a      	ldr	r3, [pc, #168]	; (800621c <xTaskCreate+0x244>)
 8006172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 8006180:	4628      	mov	r0, r5
 8006182:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006186:	6832      	ldr	r2, [r6, #0]
 8006188:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800618a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800618c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8006238 <xTaskCreate+0x260>
 8006190:	429a      	cmp	r2, r3
 8006192:	d8ca      	bhi.n	800612a <xTaskCreate+0x152>
					pxCurrentTCB = pxNewTCB;
 8006194:	6034      	str	r4, [r6, #0]
 8006196:	e7c8      	b.n	800612a <xTaskCreate+0x152>
			xReturn = pdPASS;
 8006198:	4628      	mov	r0, r5
	}
 800619a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800619e:	f04f 30ff 	mov.w	r0, #4294967295
 80061a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pxCurrentTCB = pxNewTCB;
 80061a6:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80061a8:	6813      	ldr	r3, [r2, #0]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d00b      	beq.n	80061c6 <xTaskCreate+0x1ee>
 80061ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80061b0:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8006238 <xTaskCreate+0x260>
 80061b4:	4f18      	ldr	r7, [pc, #96]	; (8006218 <xTaskCreate+0x240>)
 80061b6:	e7b8      	b.n	800612a <xTaskCreate+0x152>
					vPortFree( pxStack );
 80061b8:	4650      	mov	r0, sl
 80061ba:	f7ff fe8b 	bl	8005ed4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061be:	f04f 30ff 	mov.w	r0, #4294967295
 80061c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c6:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8006238 <xTaskCreate+0x260>
 80061ca:	4645      	mov	r5, r8
 80061cc:	f108 078c 	add.w	r7, r8, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80061d0:	4628      	mov	r0, r5
 80061d2:	3514      	adds	r5, #20
 80061d4:	f7ff fc12 	bl	80059fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061d8:	42bd      	cmp	r5, r7
 80061da:	d1f9      	bne.n	80061d0 <xTaskCreate+0x1f8>
	vListInitialise( &xDelayedTaskList1 );
 80061dc:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8006244 <xTaskCreate+0x26c>
	vListInitialise( &xDelayedTaskList2 );
 80061e0:	4d0f      	ldr	r5, [pc, #60]	; (8006220 <xTaskCreate+0x248>)
	vListInitialise( &xDelayedTaskList1 );
 80061e2:	4648      	mov	r0, r9
 80061e4:	4f0c      	ldr	r7, [pc, #48]	; (8006218 <xTaskCreate+0x240>)
 80061e6:	f7ff fc09 	bl	80059fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80061ea:	4628      	mov	r0, r5
 80061ec:	f7ff fc06 	bl	80059fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80061f0:	480c      	ldr	r0, [pc, #48]	; (8006224 <xTaskCreate+0x24c>)
 80061f2:	f7ff fc03 	bl	80059fc <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80061f6:	480c      	ldr	r0, [pc, #48]	; (8006228 <xTaskCreate+0x250>)
 80061f8:	f7ff fc00 	bl	80059fc <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80061fc:	480b      	ldr	r0, [pc, #44]	; (800622c <xTaskCreate+0x254>)
 80061fe:	f7ff fbfd 	bl	80059fc <vListInitialise>
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006202:	4b0b      	ldr	r3, [pc, #44]	; (8006230 <xTaskCreate+0x258>)
	pxDelayedTaskList = &xDelayedTaskList1;
 8006204:	4a0b      	ldr	r2, [pc, #44]	; (8006234 <xTaskCreate+0x25c>)
 8006206:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800620a:	601d      	str	r5, [r3, #0]
 800620c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800620e:	e78c      	b.n	800612a <xTaskCreate+0x152>
 8006210:	20004380 	.word	0x20004380
 8006214:	200042e4 	.word	0x200042e4
 8006218:	200043e0 	.word	0x200043e0
 800621c:	e000ed04 	.word	0xe000ed04
 8006220:	200043ac 	.word	0x200043ac
 8006224:	200043cc 	.word	0x200043cc
 8006228:	200043f8 	.word	0x200043f8
 800622c:	200043e4 	.word	0x200043e4
 8006230:	200042ec 	.word	0x200042ec
 8006234:	200042e8 	.word	0x200042e8
 8006238:	200042f0 	.word	0x200042f0
 800623c:	20004390 	.word	0x20004390
 8006240:	20004394 	.word	0x20004394
 8006244:	20004398 	.word	0x20004398

08006248 <vTaskStartScheduler>:
{
 8006248:	b530      	push	{r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800624a:	4b1a      	ldr	r3, [pc, #104]	; (80062b4 <vTaskStartScheduler+0x6c>)
{
 800624c:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 800624e:	2400      	movs	r4, #0
 8006250:	2280      	movs	r2, #128	; 0x80
 8006252:	9301      	str	r3, [sp, #4]
 8006254:	4918      	ldr	r1, [pc, #96]	; (80062b8 <vTaskStartScheduler+0x70>)
 8006256:	4623      	mov	r3, r4
 8006258:	9400      	str	r4, [sp, #0]
 800625a:	4818      	ldr	r0, [pc, #96]	; (80062bc <vTaskStartScheduler+0x74>)
 800625c:	f7ff febc 	bl	8005fd8 <xTaskCreate>
	if( xReturn == pdPASS )
 8006260:	2801      	cmp	r0, #1
 8006262:	d00e      	beq.n	8006282 <vTaskStartScheduler+0x3a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006264:	3001      	adds	r0, #1
 8006266:	d001      	beq.n	800626c <vTaskStartScheduler+0x24>
}
 8006268:	b003      	add	sp, #12
 800626a:	bd30      	pop	{r4, r5, pc}
 800626c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006270:	b672      	cpsid	i
 8006272:	f383 8811 	msr	BASEPRI, r3
 8006276:	f3bf 8f6f 	isb	sy
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	b662      	cpsie	i
 8006280:	e7fe      	b.n	8006280 <vTaskStartScheduler+0x38>
 8006282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006286:	b672      	cpsid	i
 8006288:	f383 8811 	msr	BASEPRI, r3
 800628c:	f3bf 8f6f 	isb	sy
 8006290:	f3bf 8f4f 	dsb	sy
 8006294:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8006296:	490a      	ldr	r1, [pc, #40]	; (80062c0 <vTaskStartScheduler+0x78>)
 8006298:	f04f 35ff 	mov.w	r5, #4294967295
		xSchedulerRunning = pdTRUE;
 800629c:	4a09      	ldr	r2, [pc, #36]	; (80062c4 <vTaskStartScheduler+0x7c>)
		xTickCount = ( TickType_t ) 0U;
 800629e:	4b0a      	ldr	r3, [pc, #40]	; (80062c8 <vTaskStartScheduler+0x80>)
		xNextTaskUnblockTime = portMAX_DELAY;
 80062a0:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 80062a2:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) 0U;
 80062a4:	601c      	str	r4, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80062a6:	f000 fafb 	bl	80068a0 <configureTimerForRunTimeStats>
}
 80062aa:	b003      	add	sp, #12
 80062ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 80062b0:	f7ff bcf6 	b.w	8005ca0 <xPortStartScheduler>
 80062b4:	200043c0 	.word	0x200043c0
 80062b8:	0800842c 	.word	0x0800842c
 80062bc:	080065ad 	.word	0x080065ad
 80062c0:	200043c4 	.word	0x200043c4
 80062c4:	200043e0 	.word	0x200043e0
 80062c8:	2000440c 	.word	0x2000440c

080062cc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80062cc:	4a02      	ldr	r2, [pc, #8]	; (80062d8 <vTaskSuspendAll+0xc>)
 80062ce:	6813      	ldr	r3, [r2, #0]
 80062d0:	3301      	adds	r3, #1
 80062d2:	6013      	str	r3, [r2, #0]
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	2000438c 	.word	0x2000438c

080062dc <xTaskIncrementTick>:
{
 80062dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062e0:	4b4b      	ldr	r3, [pc, #300]	; (8006410 <xTaskIncrementTick+0x134>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d153      	bne.n	8006390 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 80062e8:	4b4a      	ldr	r3, [pc, #296]	; (8006414 <xTaskIncrementTick+0x138>)
 80062ea:	681e      	ldr	r6, [r3, #0]
 80062ec:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 80062ee:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 80062f0:	2e00      	cmp	r6, #0
 80062f2:	d05a      	beq.n	80063aa <xTaskIncrementTick+0xce>
 80062f4:	f8df b13c 	ldr.w	fp, [pc, #316]	; 8006434 <xTaskIncrementTick+0x158>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80062f8:	f8db 2000 	ldr.w	r2, [fp]
 80062fc:	2400      	movs	r4, #0
 80062fe:	4296      	cmp	r6, r2
 8006300:	d362      	bcc.n	80063c8 <xTaskIncrementTick+0xec>
 8006302:	4d45      	ldr	r5, [pc, #276]	; (8006418 <xTaskIncrementTick+0x13c>)
 8006304:	4f45      	ldr	r7, [pc, #276]	; (800641c <xTaskIncrementTick+0x140>)
 8006306:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8006438 <xTaskIncrementTick+0x15c>
 800630a:	e02e      	b.n	800636a <xTaskIncrementTick+0x8e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800630c:	682a      	ldr	r2, [r5, #0]
 800630e:	68d2      	ldr	r2, [r2, #12]
 8006310:	f8d2 900c 	ldr.w	r9, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006314:	f8d9 1004 	ldr.w	r1, [r9, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006318:	f109 0a04 	add.w	sl, r9, #4
					if( xConstTickCount < xItemValue )
 800631c:	428e      	cmp	r6, r1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800631e:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 8006320:	d36b      	bcc.n	80063fa <xTaskIncrementTick+0x11e>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006322:	f7ff fba5 	bl	8005a70 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006326:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800632a:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800632e:	b109      	cbz	r1, 8006334 <xTaskIncrementTick+0x58>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006330:	f7ff fb9e 	bl	8005a70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006334:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8006338:	2201      	movs	r2, #1
 800633a:	4b39      	ldr	r3, [pc, #228]	; (8006420 <xTaskIncrementTick+0x144>)
 800633c:	4651      	mov	r1, sl
 800633e:	fa02 fe00 	lsl.w	lr, r2, r0
 8006342:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800634c:	ea4e 0e03 	orr.w	lr, lr, r3
 8006350:	4b33      	ldr	r3, [pc, #204]	; (8006420 <xTaskIncrementTick+0x144>)
 8006352:	f8c3 e000 	str.w	lr, [r3]
 8006356:	f7ff fb61 	bl	8005a1c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800635a:	f8d8 0000 	ldr.w	r0, [r8]
 800635e:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 8006362:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8006364:	4291      	cmp	r1, r2
 8006366:	bf28      	it	cs
 8006368:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800636a:	682a      	ldr	r2, [r5, #0]
 800636c:	6812      	ldr	r2, [r2, #0]
 800636e:	2a00      	cmp	r2, #0
 8006370:	d1cc      	bne.n	800630c <xTaskIncrementTick+0x30>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006372:	f04f 32ff 	mov.w	r2, #4294967295
 8006376:	f8cb 2000 	str.w	r2, [fp]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800637a:	f8d8 3000 	ldr.w	r3, [r8]
 800637e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006380:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006384:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
				xSwitchRequired = pdTRUE;
 8006388:	2b02      	cmp	r3, #2
 800638a:	bf28      	it	cs
 800638c:	2401      	movcs	r4, #1
 800638e:	e004      	b.n	800639a <xTaskIncrementTick+0xbe>
		++uxPendedTicks;
 8006390:	4a24      	ldr	r2, [pc, #144]	; (8006424 <xTaskIncrementTick+0x148>)
BaseType_t xSwitchRequired = pdFALSE;
 8006392:	2400      	movs	r4, #0
		++uxPendedTicks;
 8006394:	6813      	ldr	r3, [r2, #0]
 8006396:	3301      	adds	r3, #1
 8006398:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 800639a:	4b23      	ldr	r3, [pc, #140]	; (8006428 <xTaskIncrementTick+0x14c>)
 800639c:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 800639e:	2b00      	cmp	r3, #0
 80063a0:	bf18      	it	ne
 80063a2:	2401      	movne	r4, #1
}
 80063a4:	4620      	mov	r0, r4
 80063a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 80063aa:	4d1b      	ldr	r5, [pc, #108]	; (8006418 <xTaskIncrementTick+0x13c>)
 80063ac:	682b      	ldr	r3, [r5, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	b173      	cbz	r3, 80063d0 <xTaskIncrementTick+0xf4>
 80063b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b6:	b672      	cpsid	i
 80063b8:	f383 8811 	msr	BASEPRI, r3
 80063bc:	f3bf 8f6f 	isb	sy
 80063c0:	f3bf 8f4f 	dsb	sy
 80063c4:	b662      	cpsie	i
 80063c6:	e7fe      	b.n	80063c6 <xTaskIncrementTick+0xea>
 80063c8:	4f14      	ldr	r7, [pc, #80]	; (800641c <xTaskIncrementTick+0x140>)
 80063ca:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8006438 <xTaskIncrementTick+0x15c>
 80063ce:	e7d4      	b.n	800637a <xTaskIncrementTick+0x9e>
 80063d0:	4b16      	ldr	r3, [pc, #88]	; (800642c <xTaskIncrementTick+0x150>)
 80063d2:	6829      	ldr	r1, [r5, #0]
 80063d4:	4a16      	ldr	r2, [pc, #88]	; (8006430 <xTaskIncrementTick+0x154>)
 80063d6:	6818      	ldr	r0, [r3, #0]
 80063d8:	6028      	str	r0, [r5, #0]
 80063da:	6019      	str	r1, [r3, #0]
 80063dc:	6813      	ldr	r3, [r2, #0]
 80063de:	3301      	adds	r3, #1
 80063e0:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063e2:	682b      	ldr	r3, [r5, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	b15b      	cbz	r3, 8006400 <xTaskIncrementTick+0x124>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80063e8:	682a      	ldr	r2, [r5, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80063ea:	f8df b048 	ldr.w	fp, [pc, #72]	; 8006434 <xTaskIncrementTick+0x158>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80063ee:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80063f0:	68d2      	ldr	r2, [r2, #12]
 80063f2:	6852      	ldr	r2, [r2, #4]
 80063f4:	f8cb 2000 	str.w	r2, [fp]
 80063f8:	e77e      	b.n	80062f8 <xTaskIncrementTick+0x1c>
						xNextTaskUnblockTime = xItemValue;
 80063fa:	f8cb 1000 	str.w	r1, [fp]
						break;
 80063fe:	e7bc      	b.n	800637a <xTaskIncrementTick+0x9e>
		xNextTaskUnblockTime = portMAX_DELAY;
 8006400:	f8df b030 	ldr.w	fp, [pc, #48]	; 8006434 <xTaskIncrementTick+0x158>
 8006404:	f04f 32ff 	mov.w	r2, #4294967295
 8006408:	f8cb 2000 	str.w	r2, [fp]
 800640c:	e774      	b.n	80062f8 <xTaskIncrementTick+0x1c>
 800640e:	bf00      	nop
 8006410:	2000438c 	.word	0x2000438c
 8006414:	2000440c 	.word	0x2000440c
 8006418:	200042e8 	.word	0x200042e8
 800641c:	200042f0 	.word	0x200042f0
 8006420:	20004394 	.word	0x20004394
 8006424:	20004388 	.word	0x20004388
 8006428:	20004410 	.word	0x20004410
 800642c:	200042ec 	.word	0x200042ec
 8006430:	200043c8 	.word	0x200043c8
 8006434:	200043c4 	.word	0x200043c4
 8006438:	200042e4 	.word	0x200042e4

0800643c <xTaskResumeAll>:
{
 800643c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 8006440:	4c3b      	ldr	r4, [pc, #236]	; (8006530 <xTaskResumeAll+0xf4>)
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	b953      	cbnz	r3, 800645c <xTaskResumeAll+0x20>
 8006446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644a:	b672      	cpsid	i
 800644c:	f383 8811 	msr	BASEPRI, r3
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	b662      	cpsie	i
 800645a:	e7fe      	b.n	800645a <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 800645c:	f7ff fb82 	bl	8005b64 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006460:	6823      	ldr	r3, [r4, #0]
 8006462:	3b01      	subs	r3, #1
 8006464:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006466:	6824      	ldr	r4, [r4, #0]
 8006468:	2c00      	cmp	r4, #0
 800646a:	d153      	bne.n	8006514 <xTaskResumeAll+0xd8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800646c:	4b31      	ldr	r3, [pc, #196]	; (8006534 <xTaskResumeAll+0xf8>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d04f      	beq.n	8006514 <xTaskResumeAll+0xd8>
 8006474:	4d30      	ldr	r5, [pc, #192]	; (8006538 <xTaskResumeAll+0xfc>)
 8006476:	4f31      	ldr	r7, [pc, #196]	; (800653c <xTaskResumeAll+0x100>)
					prvAddTaskToReadyList( pxTCB );
 8006478:	4e31      	ldr	r6, [pc, #196]	; (8006540 <xTaskResumeAll+0x104>)
 800647a:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8006554 <xTaskResumeAll+0x118>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800647e:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 8006558 <xTaskResumeAll+0x11c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006482:	683b      	ldr	r3, [r7, #0]
					prvAddTaskToReadyList( pxTCB );
 8006484:	f04f 0801 	mov.w	r8, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006488:	b323      	cbz	r3, 80064d4 <xTaskResumeAll+0x98>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800648e:	f104 0a04 	add.w	sl, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006492:	f104 0018 	add.w	r0, r4, #24
 8006496:	f7ff faeb 	bl	8005a70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800649a:	4650      	mov	r0, sl
 800649c:	f7ff fae8 	bl	8005a70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064a0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80064a2:	6832      	ldr	r2, [r6, #0]
 80064a4:	4651      	mov	r1, sl
 80064a6:	fa08 f300 	lsl.w	r3, r8, r0
 80064aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80064ae:	4313      	orrs	r3, r2
 80064b0:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80064b4:	6033      	str	r3, [r6, #0]
 80064b6:	f7ff fab1 	bl	8005a1c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064ba:	f8db 3000 	ldr.w	r3, [fp]
 80064be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80064c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d3dd      	bcc.n	8006482 <xTaskResumeAll+0x46>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064c6:	683b      	ldr	r3, [r7, #0]
						xYieldPending = pdTRUE;
 80064c8:	f8c5 8000 	str.w	r8, [r5]
					prvAddTaskToReadyList( pxTCB );
 80064cc:	f04f 0801 	mov.w	r8, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1da      	bne.n	800648a <xTaskResumeAll+0x4e>
				if( pxTCB != NULL )
 80064d4:	b13c      	cbz	r4, 80064e6 <xTaskResumeAll+0xaa>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064d6:	4b1b      	ldr	r3, [pc, #108]	; (8006544 <xTaskResumeAll+0x108>)
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	6812      	ldr	r2, [r2, #0]
 80064dc:	bb02      	cbnz	r2, 8006520 <xTaskResumeAll+0xe4>
		xNextTaskUnblockTime = portMAX_DELAY;
 80064de:	4b1a      	ldr	r3, [pc, #104]	; (8006548 <xTaskResumeAll+0x10c>)
 80064e0:	f04f 32ff 	mov.w	r2, #4294967295
 80064e4:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80064e6:	4e19      	ldr	r6, [pc, #100]	; (800654c <xTaskResumeAll+0x110>)
 80064e8:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80064ea:	b13c      	cbz	r4, 80064fc <xTaskResumeAll+0xc0>
								xYieldPending = pdTRUE;
 80064ec:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80064ee:	f7ff fef5 	bl	80062dc <xTaskIncrementTick>
 80064f2:	b100      	cbz	r0, 80064f6 <xTaskResumeAll+0xba>
								xYieldPending = pdTRUE;
 80064f4:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80064f6:	3c01      	subs	r4, #1
 80064f8:	d1f9      	bne.n	80064ee <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
 80064fa:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 80064fc:	682b      	ldr	r3, [r5, #0]
 80064fe:	b14b      	cbz	r3, 8006514 <xTaskResumeAll+0xd8>
					taskYIELD_IF_USING_PREEMPTION();
 8006500:	4b13      	ldr	r3, [pc, #76]	; (8006550 <xTaskResumeAll+0x114>)
 8006502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006506:	601a      	str	r2, [r3, #0]
 8006508:	f3bf 8f4f 	dsb	sy
 800650c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006510:	2401      	movs	r4, #1
 8006512:	e000      	b.n	8006516 <xTaskResumeAll+0xda>
BaseType_t xAlreadyYielded = pdFALSE;
 8006514:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006516:	f7ff fb4b 	bl	8005bb0 <vPortExitCritical>
}
 800651a:	4620      	mov	r0, r4
 800651c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006520:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006522:	4b09      	ldr	r3, [pc, #36]	; (8006548 <xTaskResumeAll+0x10c>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006524:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006526:	68d2      	ldr	r2, [r2, #12]
 8006528:	6852      	ldr	r2, [r2, #4]
 800652a:	601a      	str	r2, [r3, #0]
 800652c:	e7db      	b.n	80064e6 <xTaskResumeAll+0xaa>
 800652e:	bf00      	nop
 8006530:	2000438c 	.word	0x2000438c
 8006534:	20004380 	.word	0x20004380
 8006538:	20004410 	.word	0x20004410
 800653c:	200043cc 	.word	0x200043cc
 8006540:	20004394 	.word	0x20004394
 8006544:	200042e8 	.word	0x200042e8
 8006548:	200043c4 	.word	0x200043c4
 800654c:	20004388 	.word	0x20004388
 8006550:	e000ed04 	.word	0xe000ed04
 8006554:	200042f0 	.word	0x200042f0
 8006558:	200042e4 	.word	0x200042e4

0800655c <vTaskDelay>:
	{
 800655c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800655e:	b168      	cbz	r0, 800657c <vTaskDelay+0x20>
			configASSERT( uxSchedulerSuspended == 0 );
 8006560:	4b10      	ldr	r3, [pc, #64]	; (80065a4 <vTaskDelay+0x48>)
 8006562:	6819      	ldr	r1, [r3, #0]
 8006564:	b199      	cbz	r1, 800658e <vTaskDelay+0x32>
 8006566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656a:	b672      	cpsid	i
 800656c:	f383 8811 	msr	BASEPRI, r3
 8006570:	f3bf 8f6f 	isb	sy
 8006574:	f3bf 8f4f 	dsb	sy
 8006578:	b662      	cpsie	i
 800657a:	e7fe      	b.n	800657a <vTaskDelay+0x1e>
			portYIELD_WITHIN_API();
 800657c:	4b0a      	ldr	r3, [pc, #40]	; (80065a8 <vTaskDelay+0x4c>)
 800657e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006582:	601a      	str	r2, [r3, #0]
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	bd08      	pop	{r3, pc}
	++uxSchedulerSuspended;
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	3201      	adds	r2, #1
 8006592:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006594:	f7ff fcda 	bl	8005f4c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8006598:	f7ff ff50 	bl	800643c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800659c:	2800      	cmp	r0, #0
 800659e:	d0ed      	beq.n	800657c <vTaskDelay+0x20>
 80065a0:	bd08      	pop	{r3, pc}
 80065a2:	bf00      	nop
 80065a4:	2000438c 	.word	0x2000438c
 80065a8:	e000ed04 	.word	0xe000ed04

080065ac <prvIdleTask>:
{
 80065ac:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
 80065b0:	4c1c      	ldr	r4, [pc, #112]	; (8006624 <prvIdleTask+0x78>)
				taskYIELD();
 80065b2:	f04f 5a80 	mov.w	sl, #268435456	; 0x10000000
 80065b6:	4e1c      	ldr	r6, [pc, #112]	; (8006628 <prvIdleTask+0x7c>)
 80065b8:	4d1c      	ldr	r5, [pc, #112]	; (800662c <prvIdleTask+0x80>)
 80065ba:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8006634 <prvIdleTask+0x88>
 80065be:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8006638 <prvIdleTask+0x8c>
 80065c2:	e006      	b.n	80065d2 <prvIdleTask+0x26>
	++uxSchedulerSuspended;
 80065c4:	6823      	ldr	r3, [r4, #0]
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80065c6:	6837      	ldr	r7, [r6, #0]
	++uxSchedulerSuspended;
 80065c8:	3301      	adds	r3, #1
 80065ca:	6023      	str	r3, [r4, #0]
			( void ) xTaskResumeAll();
 80065cc:	f7ff ff36 	bl	800643c <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 80065d0:	b96f      	cbnz	r7, 80065ee <prvIdleTask+0x42>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065d2:	682b      	ldr	r3, [r5, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1f5      	bne.n	80065c4 <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80065d8:	f8d8 3000 	ldr.w	r3, [r8]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d9f8      	bls.n	80065d2 <prvIdleTask+0x26>
				taskYIELD();
 80065e0:	f8c9 a000 	str.w	sl, [r9]
 80065e4:	f3bf 8f4f 	dsb	sy
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	e7f1      	b.n	80065d2 <prvIdleTask+0x26>
				taskENTER_CRITICAL();
 80065ee:	f7ff fab9 	bl	8005b64 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80065f2:	68f3      	ldr	r3, [r6, #12]
 80065f4:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065f8:	f10b 0004 	add.w	r0, fp, #4
 80065fc:	f7ff fa38 	bl	8005a70 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8006600:	4b0b      	ldr	r3, [pc, #44]	; (8006630 <prvIdleTask+0x84>)
 8006602:	4a0b      	ldr	r2, [pc, #44]	; (8006630 <prvIdleTask+0x84>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	3b01      	subs	r3, #1
 8006608:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800660a:	682b      	ldr	r3, [r5, #0]
 800660c:	3b01      	subs	r3, #1
 800660e:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
 8006610:	f7ff face 	bl	8005bb0 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8006614:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
 8006618:	f7ff fc5c 	bl	8005ed4 <vPortFree>
			vPortFree( pxTCB );
 800661c:	4658      	mov	r0, fp
 800661e:	f7ff fc59 	bl	8005ed4 <vPortFree>
 8006622:	e7d6      	b.n	80065d2 <prvIdleTask+0x26>
 8006624:	2000438c 	.word	0x2000438c
 8006628:	200043f8 	.word	0x200043f8
 800662c:	20004384 	.word	0x20004384
 8006630:	20004380 	.word	0x20004380
 8006634:	200042f0 	.word	0x200042f0
 8006638:	e000ed04 	.word	0xe000ed04

0800663c <vTaskSwitchContext>:
{
 800663c:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800663e:	4b1f      	ldr	r3, [pc, #124]	; (80066bc <vTaskSwitchContext+0x80>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	b11b      	cbz	r3, 800664c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8006644:	4b1e      	ldr	r3, [pc, #120]	; (80066c0 <vTaskSwitchContext+0x84>)
 8006646:	2201      	movs	r2, #1
 8006648:	601a      	str	r2, [r3, #0]
 800664a:	bd38      	pop	{r3, r4, r5, pc}
		xYieldPending = pdFALSE;
 800664c:	4a1c      	ldr	r2, [pc, #112]	; (80066c0 <vTaskSwitchContext+0x84>)
 800664e:	6013      	str	r3, [r2, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8006650:	f000 f928 	bl	80068a4 <getRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8006654:	4a1b      	ldr	r2, [pc, #108]	; (80066c4 <vTaskSwitchContext+0x88>)
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8006656:	491c      	ldr	r1, [pc, #112]	; (80066c8 <vTaskSwitchContext+0x8c>)
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8006658:	6815      	ldr	r5, [r2, #0]
 800665a:	42a8      	cmp	r0, r5
 800665c:	d904      	bls.n	8006668 <vTaskSwitchContext+0x2c>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800665e:	680c      	ldr	r4, [r1, #0]
 8006660:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006662:	1b5b      	subs	r3, r3, r5
 8006664:	4403      	add	r3, r0
 8006666:	65a3      	str	r3, [r4, #88]	; 0x58
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006668:	4b18      	ldr	r3, [pc, #96]	; (80066cc <vTaskSwitchContext+0x90>)
				ulTaskSwitchedInTime = ulTotalRunTime;
 800666a:	6010      	str	r0, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800666c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800666e:	fab3 f383 	clz	r3, r3
 8006672:	b2db      	uxtb	r3, r3
 8006674:	4a16      	ldr	r2, [pc, #88]	; (80066d0 <vTaskSwitchContext+0x94>)
 8006676:	f1c3 031f 	rsb	r3, r3, #31
 800667a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	58d4      	ldr	r4, [r2, r3]
 8006682:	18d0      	adds	r0, r2, r3
 8006684:	b14c      	cbz	r4, 800669a <vTaskSwitchContext+0x5e>
 8006686:	3308      	adds	r3, #8
 8006688:	6844      	ldr	r4, [r0, #4]
 800668a:	441a      	add	r2, r3
 800668c:	6863      	ldr	r3, [r4, #4]
 800668e:	4293      	cmp	r3, r2
 8006690:	6043      	str	r3, [r0, #4]
 8006692:	d00d      	beq.n	80066b0 <vTaskSwitchContext+0x74>
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	600b      	str	r3, [r1, #0]
 8006698:	bd38      	pop	{r3, r4, r5, pc}
	__asm volatile
 800669a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669e:	b672      	cpsid	i
 80066a0:	f383 8811 	msr	BASEPRI, r3
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	b662      	cpsie	i
 80066ae:	e7fe      	b.n	80066ae <vTaskSwitchContext+0x72>
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	6043      	str	r3, [r0, #4]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	600b      	str	r3, [r1, #0]
 80066b8:	bd38      	pop	{r3, r4, r5, pc}
 80066ba:	bf00      	nop
 80066bc:	2000438c 	.word	0x2000438c
 80066c0:	20004410 	.word	0x20004410
 80066c4:	2000437c 	.word	0x2000437c
 80066c8:	200042e4 	.word	0x200042e4
 80066cc:	20004394 	.word	0x20004394
 80066d0:	200042f0 	.word	0x200042f0

080066d4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80066d4:	4b05      	ldr	r3, [pc, #20]	; (80066ec <xTaskGetSchedulerState+0x18>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	b133      	cbz	r3, 80066e8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066da:	4b05      	ldr	r3, [pc, #20]	; (80066f0 <xTaskGetSchedulerState+0x1c>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80066e0:	bf0c      	ite	eq
 80066e2:	2002      	moveq	r0, #2
 80066e4:	2000      	movne	r0, #0
 80066e6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80066e8:	2001      	movs	r0, #1
	}
 80066ea:	4770      	bx	lr
 80066ec:	200043e0 	.word	0x200043e0
 80066f0:	2000438c 	.word	0x2000438c

080066f4 <_ZN9TestClassD1Ev>:
};
TestClass::TestClass():nic(5){};
void TestClass::init(void){
	cos+=nic;
}
TestClass::~TestClass(){};
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop

080066f8 <_Z17StartLightingTaskPKv>:

TestClass testclass;

void StartLightingTask(void const * argument) {
 80066f8:	b510      	push	{r4, lr}
 80066fa:	4c06      	ldr	r4, [pc, #24]	; (8006714 <_Z17StartLightingTaskPKv+0x1c>)
	cos+=nic;
 80066fc:	edd4 7a01 	vldr	s15, [r4, #4]
	for (;;) {
		testclass.init();
		osDelay(1);
 8006700:	2001      	movs	r0, #1
	cos+=nic;
 8006702:	ed94 7a00 	vldr	s14, [r4]
 8006706:	ee77 7a87 	vadd.f32	s15, s15, s14
 800670a:	edc4 7a01 	vstr	s15, [r4, #4]
		osDelay(1);
 800670e:	f7ff f963 	bl	80059d8 <osDelay>
 8006712:	e7f3      	b.n	80066fc <_Z17StartLightingTaskPKv+0x4>
 8006714:	20000698 	.word	0x20000698

08006718 <_Z13StartGyroTaskPKv>:
	}

}
void StartGyroTask(void const * argument) {
 8006718:	b510      	push	{r4, lr}
 800671a:	ed2d 8b02 	vpush	{d8}
	for (;;) {
		testclass.cos -= 3.f;
 800671e:	eeb0 8a08 	vmov.f32	s16, #8	; 0x40400000  3.0
 8006722:	4c05      	ldr	r4, [pc, #20]	; (8006738 <_Z13StartGyroTaskPKv+0x20>)
 8006724:	edd4 7a01 	vldr	s15, [r4, #4]
		osDelay(1);
 8006728:	2001      	movs	r0, #1
		testclass.cos -= 3.f;
 800672a:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800672e:	edc4 7a01 	vstr	s15, [r4, #4]
		osDelay(1);
 8006732:	f7ff f951 	bl	80059d8 <osDelay>
 8006736:	e7f5      	b.n	8006724 <_Z13StartGyroTaskPKv+0xc>
 8006738:	20000698 	.word	0x20000698

0800673c <_Z19StartBatteryManagerPKv>:
 800673c:	b508      	push	{r3, lr}
 800673e:	2001      	movs	r0, #1
 8006740:	f7ff f94a 	bl	80059d8 <osDelay>
 8006744:	e7fb      	b.n	800673e <_Z19StartBatteryManagerPKv+0x2>
 8006746:	bf00      	nop

08006748 <_Z17StartSteeringTaskPKv>:
 8006748:	b508      	push	{r3, lr}
 800674a:	2001      	movs	r0, #1
 800674c:	f7ff f944 	bl	80059d8 <osDelay>
 8006750:	e7fb      	b.n	800674a <_Z17StartSteeringTaskPKv+0x2>
 8006752:	bf00      	nop

08006754 <_Z11StartBTTaskPKv>:
 8006754:	b508      	push	{r3, lr}
 8006756:	2001      	movs	r0, #1
 8006758:	f7ff f93e 	bl	80059d8 <osDelay>
 800675c:	e7fb      	b.n	8006756 <_Z11StartBTTaskPKv+0x2>
 800675e:	bf00      	nop

08006760 <_Z17StartCzujnikiTaskPKv>:
 8006760:	b508      	push	{r3, lr}
 8006762:	2001      	movs	r0, #1
 8006764:	f7ff f938 	bl	80059d8 <osDelay>
 8006768:	e7fb      	b.n	8006762 <_Z17StartCzujnikiTaskPKv+0x2>
 800676a:	bf00      	nop

0800676c <_Z15StartFutabaTaskPKv>:
 800676c:	b508      	push	{r3, lr}
 800676e:	2001      	movs	r0, #1
 8006770:	f7ff f932 	bl	80059d8 <osDelay>
 8006774:	e7fb      	b.n	800676e <_Z15StartFutabaTaskPKv+0x2>
 8006776:	bf00      	nop

08006778 <_Z17StartGovernorTaskPKv>:
	for (;;) {
		osDelay(1);
	}

}
void StartGovernorTask(void const * argument) {
 8006778:	b508      	push	{r3, lr}
	for (;;) {
		osDelay(1);
 800677a:	2001      	movs	r0, #1
 800677c:	f7ff f92c 	bl	80059d8 <osDelay>
 8006780:	e7fb      	b.n	800677a <_Z17StartGovernorTaskPKv+0x2>
 8006782:	bf00      	nop

08006784 <_GLOBAL__sub_I__ZN9TestClassC2Ev>:
	}

}
 8006784:	b410      	push	{r4}
TestClass::TestClass():nic(5){};
 8006786:	4b05      	ldr	r3, [pc, #20]	; (800679c <_GLOBAL__sub_I__ZN9TestClassC2Ev+0x18>)
 8006788:	4c05      	ldr	r4, [pc, #20]	; (80067a0 <_GLOBAL__sub_I__ZN9TestClassC2Ev+0x1c>)
TestClass testclass;
 800678a:	4a06      	ldr	r2, [pc, #24]	; (80067a4 <_GLOBAL__sub_I__ZN9TestClassC2Ev+0x20>)
 800678c:	4618      	mov	r0, r3
TestClass::TestClass():nic(5){};
 800678e:	601c      	str	r4, [r3, #0]
 8006790:	605c      	str	r4, [r3, #4]
TestClass testclass;
 8006792:	4905      	ldr	r1, [pc, #20]	; (80067a8 <_GLOBAL__sub_I__ZN9TestClassC2Ev+0x24>)
}
 8006794:	f85d 4b04 	ldr.w	r4, [sp], #4
TestClass testclass;
 8006798:	f001 b960 	b.w	8007a5c <__aeabi_atexit>
 800679c:	20000698 	.word	0x20000698
 80067a0:	40a00000 	.word	0x40a00000
 80067a4:	20000000 	.word	0x20000000
 80067a8:	080066f5 	.word	0x080066f5

080067ac <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80067ac:	4b37      	ldr	r3, [pc, #220]	; (800688c <MX_DMA_Init+0xe0>)
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80067ae:	2200      	movs	r2, #0
 80067b0:	2105      	movs	r1, #5
 80067b2:	200c      	movs	r0, #12
{
 80067b4:	b510      	push	{r4, lr}
  __HAL_RCC_DMA2_CLK_ENABLE();
 80067b6:	6b1c      	ldr	r4, [r3, #48]	; 0x30
{
 80067b8:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 80067ba:	f444 0480 	orr.w	r4, r4, #4194304	; 0x400000
 80067be:	631c      	str	r4, [r3, #48]	; 0x30
 80067c0:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80067c2:	f404 0480 	and.w	r4, r4, #4194304	; 0x400000
 80067c6:	9400      	str	r4, [sp, #0]
 80067c8:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80067ca:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80067cc:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
 80067d0:	631c      	str	r4, [r3, #48]	; 0x30
 80067d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067d8:	9301      	str	r3, [sp, #4]
 80067da:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80067dc:	f7fa ff00 	bl	80015e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80067e0:	200c      	movs	r0, #12
 80067e2:	f7fa ff37 	bl	8001654 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80067e6:	2200      	movs	r2, #0
 80067e8:	2105      	movs	r1, #5
 80067ea:	200d      	movs	r0, #13
 80067ec:	f7fa fef8 	bl	80015e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80067f0:	200d      	movs	r0, #13
 80067f2:	f7fa ff2f 	bl	8001654 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80067f6:	2200      	movs	r2, #0
 80067f8:	2105      	movs	r1, #5
 80067fa:	200e      	movs	r0, #14
 80067fc:	f7fa fef0 	bl	80015e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8006800:	200e      	movs	r0, #14
 8006802:	f7fa ff27 	bl	8001654 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8006806:	2200      	movs	r2, #0
 8006808:	2105      	movs	r1, #5
 800680a:	200f      	movs	r0, #15
 800680c:	f7fa fee8 	bl	80015e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8006810:	200f      	movs	r0, #15
 8006812:	f7fa ff1f 	bl	8001654 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8006816:	2200      	movs	r2, #0
 8006818:	2105      	movs	r1, #5
 800681a:	202f      	movs	r0, #47	; 0x2f
 800681c:	f7fa fee0 	bl	80015e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8006820:	202f      	movs	r0, #47	; 0x2f
 8006822:	f7fa ff17 	bl	8001654 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8006826:	2200      	movs	r2, #0
 8006828:	2105      	movs	r1, #5
 800682a:	2038      	movs	r0, #56	; 0x38
 800682c:	f7fa fed8 	bl	80015e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8006830:	2038      	movs	r0, #56	; 0x38
 8006832:	f7fa ff0f 	bl	8001654 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8006836:	2200      	movs	r2, #0
 8006838:	2105      	movs	r1, #5
 800683a:	2039      	movs	r0, #57	; 0x39
 800683c:	f7fa fed0 	bl	80015e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8006840:	2039      	movs	r0, #57	; 0x39
 8006842:	f7fa ff07 	bl	8001654 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8006846:	2200      	movs	r2, #0
 8006848:	2105      	movs	r1, #5
 800684a:	203a      	movs	r0, #58	; 0x3a
 800684c:	f7fa fec8 	bl	80015e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006850:	203a      	movs	r0, #58	; 0x3a
 8006852:	f7fa feff 	bl	8001654 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8006856:	2200      	movs	r2, #0
 8006858:	2105      	movs	r1, #5
 800685a:	203b      	movs	r0, #59	; 0x3b
 800685c:	f7fa fec0 	bl	80015e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006860:	203b      	movs	r0, #59	; 0x3b
 8006862:	f7fa fef7 	bl	8001654 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8006866:	2200      	movs	r2, #0
 8006868:	2105      	movs	r1, #5
 800686a:	203c      	movs	r0, #60	; 0x3c
 800686c:	f7fa feb8 	bl	80015e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8006870:	203c      	movs	r0, #60	; 0x3c
 8006872:	f7fa feef 	bl	8001654 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8006876:	2200      	movs	r2, #0
 8006878:	2105      	movs	r1, #5
 800687a:	2046      	movs	r0, #70	; 0x46
 800687c:	f7fa feb0 	bl	80015e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8006880:	2046      	movs	r0, #70	; 0x46
 8006882:	f7fa fee7 	bl	8001654 <HAL_NVIC_EnableIRQ>

}
 8006886:	b002      	add	sp, #8
 8006888:	bd10      	pop	{r4, pc}
 800688a:	bf00      	nop
 800688c:	40023800 	.word	0x40023800

08006890 <StartDefaultTask>:
  /* USER CODE END RTOS_QUEUES */
}

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8006890:	b508      	push	{r3, lr}
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8006892:	f000 fe95 	bl	80075c0 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8006896:	2001      	movs	r0, #1
 8006898:	f7ff f89e 	bl	80059d8 <osDelay>
 800689c:	e7fb      	b.n	8006896 <StartDefaultTask+0x6>
 800689e:	bf00      	nop

080068a0 <configureTimerForRunTimeStats>:
{
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop

080068a4 <getRunTimeCounterValue>:
}
 80068a4:	2000      	movs	r0, #0
 80068a6:	4770      	bx	lr

080068a8 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80068a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  osThreadDef(defaultTask, StartDefaultTask, osPriorityBelowNormal, 0, 128);
 80068aa:	4c37      	ldr	r4, [pc, #220]	; (8006988 <MX_FREERTOS_Init+0xe0>)
void MX_FREERTOS_Init(void) {
 80068ac:	b0af      	sub	sp, #188	; 0xbc
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80068ae:	4d37      	ldr	r5, [pc, #220]	; (800698c <MX_FREERTOS_Init+0xe4>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityBelowNormal, 0, 128);
 80068b0:	4627      	mov	r7, r4
 80068b2:	ae01      	add	r6, sp, #4
 80068b4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80068b6:	683f      	ldr	r7, [r7, #0]
 80068b8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80068ba:	6037      	str	r7, [r6, #0]
  osThreadDef(LightingTask, StartLightingTask, osPriorityBelowNormal, 0, 128);
 80068bc:	f104 0714 	add.w	r7, r4, #20
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80068c0:	2100      	movs	r1, #0
 80068c2:	a801      	add	r0, sp, #4
 80068c4:	f7ff f870 	bl	80059a8 <osThreadCreate>
 80068c8:	6028      	str	r0, [r5, #0]
  osThreadDef(LightingTask, StartLightingTask, osPriorityBelowNormal, 0, 128);
 80068ca:	ae06      	add	r6, sp, #24
 80068cc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80068ce:	683f      	ldr	r7, [r7, #0]
 80068d0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80068d2:	6037      	str	r7, [r6, #0]
  osThreadDef(GyroTask, StartGyroTask, osPriorityHigh, 0, 128);
 80068d4:	f104 0728 	add.w	r7, r4, #40	; 0x28
  LightingTaskHandle = osThreadCreate(osThread(LightingTask), NULL);
 80068d8:	2100      	movs	r1, #0
 80068da:	a806      	add	r0, sp, #24
 80068dc:	f7ff f864 	bl	80059a8 <osThreadCreate>
 80068e0:	6068      	str	r0, [r5, #4]
  osThreadDef(GyroTask, StartGyroTask, osPriorityHigh, 0, 128);
 80068e2:	ae0b      	add	r6, sp, #44	; 0x2c
 80068e4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80068e6:	683f      	ldr	r7, [r7, #0]
 80068e8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80068ea:	6037      	str	r7, [r6, #0]
  osThreadDef(BatteryManager, StartBatteryManager, osPriorityLow, 0, 128);
 80068ec:	f104 073c 	add.w	r7, r4, #60	; 0x3c
  GyroTaskHandle = osThreadCreate(osThread(GyroTask), NULL);
 80068f0:	2100      	movs	r1, #0
 80068f2:	a80b      	add	r0, sp, #44	; 0x2c
 80068f4:	f7ff f858 	bl	80059a8 <osThreadCreate>
 80068f8:	60a8      	str	r0, [r5, #8]
  osThreadDef(BatteryManager, StartBatteryManager, osPriorityLow, 0, 128);
 80068fa:	ae10      	add	r6, sp, #64	; 0x40
 80068fc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80068fe:	683f      	ldr	r7, [r7, #0]
 8006900:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006902:	6037      	str	r7, [r6, #0]
  osThreadDef(SteeringTask, StartSteeringTask, osPriorityHigh, 0, 128);
 8006904:	f104 0750 	add.w	r7, r4, #80	; 0x50
  BatteryManagerHandle = osThreadCreate(osThread(BatteryManager), NULL);
 8006908:	2100      	movs	r1, #0
 800690a:	a810      	add	r0, sp, #64	; 0x40
 800690c:	f7ff f84c 	bl	80059a8 <osThreadCreate>
 8006910:	60e8      	str	r0, [r5, #12]
  osThreadDef(SteeringTask, StartSteeringTask, osPriorityHigh, 0, 128);
 8006912:	ae15      	add	r6, sp, #84	; 0x54
 8006914:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8006916:	683f      	ldr	r7, [r7, #0]
 8006918:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800691a:	6037      	str	r7, [r6, #0]
  osThreadDef(CzujnikiTask, StartCzujnikiTask, osPriorityNormal, 0, 128);
 800691c:	f104 0764 	add.w	r7, r4, #100	; 0x64
  SteeringTaskHandle = osThreadCreate(osThread(SteeringTask), NULL);
 8006920:	2100      	movs	r1, #0
 8006922:	a815      	add	r0, sp, #84	; 0x54
 8006924:	f7ff f840 	bl	80059a8 <osThreadCreate>
 8006928:	6128      	str	r0, [r5, #16]
  osThreadDef(CzujnikiTask, StartCzujnikiTask, osPriorityNormal, 0, 128);
 800692a:	ae1a      	add	r6, sp, #104	; 0x68
 800692c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800692e:	683f      	ldr	r7, [r7, #0]
 8006930:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006932:	6037      	str	r7, [r6, #0]
  osThreadDef(BTTask, StartBTTask, osPriorityBelowNormal, 0, 128);
 8006934:	f104 0778 	add.w	r7, r4, #120	; 0x78
  CzujnikiTaskHandle = osThreadCreate(osThread(CzujnikiTask), NULL);
 8006938:	2100      	movs	r1, #0
 800693a:	a81a      	add	r0, sp, #104	; 0x68
 800693c:	f7ff f834 	bl	80059a8 <osThreadCreate>
 8006940:	6168      	str	r0, [r5, #20]
  osThreadDef(BTTask, StartBTTask, osPriorityBelowNormal, 0, 128);
 8006942:	ae1f      	add	r6, sp, #124	; 0x7c
 8006944:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8006946:	683f      	ldr	r7, [r7, #0]
 8006948:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800694a:	6037      	str	r7, [r6, #0]
  osThreadDef(FutabaTask, StartFutabaTask, osPriorityHigh, 0, 128);
 800694c:	f104 078c 	add.w	r7, r4, #140	; 0x8c
  BTTaskHandle = osThreadCreate(osThread(BTTask), NULL);
 8006950:	2100      	movs	r1, #0
 8006952:	a81f      	add	r0, sp, #124	; 0x7c
 8006954:	f7ff f828 	bl	80059a8 <osThreadCreate>
 8006958:	61a8      	str	r0, [r5, #24]
  osThreadDef(FutabaTask, StartFutabaTask, osPriorityHigh, 0, 128);
 800695a:	ae24      	add	r6, sp, #144	; 0x90
  osThreadDef(GovernorTask, StartGovernorTask, osPriorityHigh, 0, 256);
 800695c:	34a0      	adds	r4, #160	; 0xa0
  osThreadDef(FutabaTask, StartFutabaTask, osPriorityHigh, 0, 128);
 800695e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8006960:	683f      	ldr	r7, [r7, #0]
 8006962:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  FutabaTaskHandle = osThreadCreate(osThread(FutabaTask), NULL);
 8006964:	2100      	movs	r1, #0
 8006966:	a824      	add	r0, sp, #144	; 0x90
  osThreadDef(FutabaTask, StartFutabaTask, osPriorityHigh, 0, 128);
 8006968:	6037      	str	r7, [r6, #0]
  FutabaTaskHandle = osThreadCreate(osThread(FutabaTask), NULL);
 800696a:	f7ff f81d 	bl	80059a8 <osThreadCreate>
  osThreadDef(GovernorTask, StartGovernorTask, osPriorityHigh, 0, 256);
 800696e:	ae29      	add	r6, sp, #164	; 0xa4
  FutabaTaskHandle = osThreadCreate(osThread(FutabaTask), NULL);
 8006970:	61e8      	str	r0, [r5, #28]
  osThreadDef(GovernorTask, StartGovernorTask, osPriorityHigh, 0, 256);
 8006972:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006974:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006976:	6824      	ldr	r4, [r4, #0]
  GovernorTaskHandle = osThreadCreate(osThread(GovernorTask), NULL);
 8006978:	2100      	movs	r1, #0
 800697a:	a829      	add	r0, sp, #164	; 0xa4
  osThreadDef(GovernorTask, StartGovernorTask, osPriorityHigh, 0, 256);
 800697c:	6034      	str	r4, [r6, #0]
  GovernorTaskHandle = osThreadCreate(osThread(GovernorTask), NULL);
 800697e:	f7ff f813 	bl	80059a8 <osThreadCreate>
 8006982:	6228      	str	r0, [r5, #32]
}
 8006984:	b02f      	add	sp, #188	; 0xbc
 8006986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006988:	0800835c 	.word	0x0800835c
 800698c:	200006a0 	.word	0x200006a0

08006990 <MX_GPIO_Init>:

/** Configure pins
     PE6   ------> S_TIM9_CH2
*/
void MX_GPIO_Init(void)
{
 8006990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006994:	4f5a      	ldr	r7, [pc, #360]	; (8006b00 <MX_GPIO_Init+0x170>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MPU_CS_GPIO_Port, MPU_CS_Pin, GPIO_PIN_SET);
 8006996:	2110      	movs	r1, #16
{
 8006998:	b08d      	sub	sp, #52	; 0x34
  HAL_GPIO_WritePin(MPU_CS_GPIO_Port, MPU_CS_Pin, GPIO_PIN_SET);
 800699a:	2201      	movs	r2, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800699c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O5_GPIO_Port, O5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800699e:	f04f 0902 	mov.w	r9, #2
  HAL_GPIO_WritePin(MPU_CS_GPIO_Port, MPU_CS_Pin, GPIO_PIN_SET);
 80069a2:	f8df b16c 	ldr.w	fp, [pc, #364]	; 8006b10 <MX_GPIO_Init+0x180>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80069a6:	2503      	movs	r5, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80069a8:	430c      	orrs	r4, r1
  HAL_GPIO_WritePin(GPIOC, Vision_Reset_Pin|Change_Lane_Pin|Cross_Obstacles_Pin, GPIO_PIN_RESET);
 80069aa:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8006b14 <MX_GPIO_Init+0x184>
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_SET);
 80069ae:	4e55      	ldr	r6, [pc, #340]	; (8006b04 <MX_GPIO_Init+0x174>)
  HAL_GPIO_WritePin(MPU_CS_GPIO_Port, MPU_CS_Pin, GPIO_PIN_SET);
 80069b0:	4658      	mov	r0, fp
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80069b2:	633c      	str	r4, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069b4:	2400      	movs	r4, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80069b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(O3_GPIO_Port, &GPIO_InitStruct);
 80069b8:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8006b18 <MX_GPIO_Init+0x188>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80069bc:	400b      	ands	r3, r1
 80069be:	9301      	str	r3, [sp, #4]
 80069c0:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80069c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069c8:	633b      	str	r3, [r7, #48]	; 0x30
 80069ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069d0:	9302      	str	r3, [sp, #8]
 80069d2:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80069d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d6:	f043 0304 	orr.w	r3, r3, #4
 80069da:	633b      	str	r3, [r7, #48]	; 0x30
 80069dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069de:	f003 0304 	and.w	r3, r3, #4
 80069e2:	9303      	str	r3, [sp, #12]
 80069e4:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80069e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e8:	4313      	orrs	r3, r2
 80069ea:	633b      	str	r3, [r7, #48]	; 0x30
 80069ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ee:	4013      	ands	r3, r2
 80069f0:	9304      	str	r3, [sp, #16]
 80069f2:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80069f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f6:	ea43 0309 	orr.w	r3, r3, r9
 80069fa:	633b      	str	r3, [r7, #48]	; 0x30
 80069fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fe:	ea03 0309 	and.w	r3, r3, r9
 8006a02:	9305      	str	r3, [sp, #20]
 8006a04:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a08:	f043 0308 	orr.w	r3, r3, #8
 8006a0c:	633b      	str	r3, [r7, #48]	; 0x30
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a10:	4617      	mov	r7, r2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a12:	f003 0308 	and.w	r3, r3, #8
 8006a16:	9306      	str	r3, [sp, #24]
 8006a18:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(MPU_CS_GPIO_Port, MPU_CS_Pin, GPIO_PIN_SET);
 8006a1a:	f7fb f8f7 	bl	8001c0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, Vision_Reset_Pin|Change_Lane_Pin|Cross_Obstacles_Pin, GPIO_PIN_RESET);
 8006a1e:	4640      	mov	r0, r8
 8006a20:	4622      	mov	r2, r4
 8006a22:	f44f 7150 	mov.w	r1, #832	; 0x340
 8006a26:	f7fb f8f1 	bl	8001c0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_SET);
 8006a2a:	4630      	mov	r0, r6
 8006a2c:	463a      	mov	r2, r7
 8006a2e:	21c0      	movs	r1, #192	; 0xc0
 8006a30:	f7fb f8ec 	bl	8001c0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(O5_GPIO_Port, O5_Pin, GPIO_PIN_RESET);
 8006a34:	4630      	mov	r0, r6
 8006a36:	4622      	mov	r2, r4
 8006a38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a3c:	f7fb f8e6 	bl	8001c0c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = O3_Pin;
 8006a40:	2240      	movs	r2, #64	; 0x40
  HAL_GPIO_Init(O3_GPIO_Port, &GPIO_InitStruct);
 8006a42:	a907      	add	r1, sp, #28
 8006a44:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = O3_Pin;
 8006a46:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a48:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a4c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a4e:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8006a50:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(O3_GPIO_Port, &GPIO_InitStruct);
 8006a52:	f7fa ffb1 	bl	80019b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MPU_CS_Pin;
 8006a56:	2310      	movs	r3, #16
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(MPU_CS_GPIO_Port, &GPIO_InitStruct);
 8006a58:	a907      	add	r1, sp, #28
 8006a5a:	4658      	mov	r0, fp
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006a5c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = MPU_CS_Pin;
 8006a60:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a62:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a64:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(MPU_CS_GPIO_Port, &GPIO_InitStruct);
 8006a66:	f7fa ffa7 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU_DRDY_Pin;
 8006a6a:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006a6c:	4a26      	ldr	r2, [pc, #152]	; (8006b08 <MX_GPIO_Init+0x178>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MPU_DRDY_GPIO_Port, &GPIO_InitStruct);
 8006a6e:	a907      	add	r1, sp, #28
 8006a70:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = MPU_DRDY_Pin;
 8006a72:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006a74:	9208      	str	r2, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a76:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(MPU_DRDY_GPIO_Port, &GPIO_InitStruct);
 8006a78:	f7fa ff9e 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Parking_Button_Pin|Obstacle_Button_Pin;
 8006a7c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a80:	a907      	add	r1, sp, #28
 8006a82:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006a84:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = Parking_Button_Pin|Obstacle_Button_Pin;
 8006a88:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a8a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a8c:	f7fa ff94 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Vision_Reset_Pin|Change_Lane_Pin|Cross_Obstacles_Pin;
 8006a90:	f44f 7250 	mov.w	r2, #832	; 0x340
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a94:	4640      	mov	r0, r8
 8006a96:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a98:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pin = Vision_Reset_Pin|Change_Lane_Pin|Cross_Obstacles_Pin;
 8006a9a:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a9c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a9e:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006aa0:	f7fa ff8a 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_SENS_Pin;
 8006aa4:	f44f 7280 	mov.w	r2, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(VBUS_SENS_GPIO_Port, &GPIO_InitStruct);
 8006aa8:	4658      	mov	r0, fp
 8006aaa:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006aac:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = VBUS_SENS_Pin;
 8006aae:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ab0:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(VBUS_SENS_GPIO_Port, &GPIO_InitStruct);
 8006ab2:	f7fa ff81 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8006ab6:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8006ab8:	a907      	add	r1, sp, #28
 8006aba:	4814      	ldr	r0, [pc, #80]	; (8006b0c <MX_GPIO_Init+0x17c>)
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8006abc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006abe:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ac0:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8006ac2:	f7fa ff79 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_BLUE_Pin|O5_Pin;
 8006ac6:	f44f 7330 	mov.w	r3, #704	; 0x2c0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006aca:	4630      	mov	r0, r6
 8006acc:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ace:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_BLUE_Pin|O5_Pin;
 8006ad0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ad2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ad4:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ad6:	f7fa ff6f 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = CzujnikPrawy_Pin|CzujnikLewy_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006ada:	a907      	add	r1, sp, #28
 8006adc:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = CzujnikPrawy_Pin|CzujnikLewy_Pin;
 8006ade:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ae0:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ae2:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006ae4:	f7fa ff68 	bl	80019b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8006ae8:	4622      	mov	r2, r4
 8006aea:	2105      	movs	r1, #5
 8006aec:	200a      	movs	r0, #10
 8006aee:	f7fa fd77 	bl	80015e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8006af2:	200a      	movs	r0, #10
 8006af4:	f7fa fdae 	bl	8001654 <HAL_NVIC_EnableIRQ>

}
 8006af8:	b00d      	add	sp, #52	; 0x34
 8006afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006afe:	bf00      	nop
 8006b00:	40023800 	.word	0x40023800
 8006b04:	40020400 	.word	0x40020400
 8006b08:	10110000 	.word	0x10110000
 8006b0c:	40020c00 	.word	0x40020c00
 8006b10:	40020000 	.word	0x40020000
 8006b14:	40020800 	.word	0x40020800
 8006b18:	40021000 	.word	0x40021000

08006b1c <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b1c:	4a34      	ldr	r2, [pc, #208]	; (8006bf0 <SystemClock_Config+0xd4>)

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006b1e:	2001      	movs	r0, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006b20:	4b34      	ldr	r3, [pc, #208]	; (8006bf4 <SystemClock_Config+0xd8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b22:	6c11      	ldr	r1, [r2, #64]	; 0x40
{
 8006b24:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b26:	f041 5e80 	orr.w	lr, r1, #268435456	; 0x10000000
{
 8006b2a:	b0b5      	sub	sp, #212	; 0xd4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006b2c:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006b2e:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b32:	f8c2 e040 	str.w	lr, [r2, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006b36:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b3a:	6c12      	ldr	r2, [r2, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006b3c:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLN = 216;
 8006b3e:	21d8      	movs	r1, #216	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8006b40:	f04f 0e09 	mov.w	lr, #9
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b44:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8006b48:	9200      	str	r2, [sp, #0]
 8006b4a:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006b56:	9007      	str	r0, [sp, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006b58:	a807      	add	r0, sp, #28
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006b5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006b5e:	9708      	str	r7, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006b60:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006b62:	9301      	str	r3, [sp, #4]
 8006b64:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006b66:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006b68:	960e      	str	r6, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006b6a:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8006b6c:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8006b6e:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006b72:	f7fb ffa9 	bl	8002ac8 <HAL_RCC_OscConfig>
 8006b76:	b100      	cbz	r0, 8006b7a <SystemClock_Config+0x5e>
 8006b78:	e7fe      	b.n	8006b78 <SystemClock_Config+0x5c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8006b7a:	f7fb ff69 	bl	8002a50 <HAL_PWREx_EnableOverDrive>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	b100      	cbz	r0, 8006b84 <SystemClock_Config+0x68>
 8006b82:	e7fe      	b.n	8006b82 <SystemClock_Config+0x66>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006b84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006b88:	260f      	movs	r6, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006b8a:	f44f 57a0 	mov.w	r7, #5120	; 0x1400

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8006b8e:	2107      	movs	r1, #7
 8006b90:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006b92:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006b94:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006b96:	9602      	str	r6, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006b98:	9705      	str	r7, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006b9a:	9206      	str	r2, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8006b9c:	f7fc f96a 	bl	8002e74 <HAL_RCC_ClockConfig>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	b100      	cbz	r0, 8006ba6 <SystemClock_Config+0x8a>
 8006ba4:	e7fe      	b.n	8006ba4 <SystemClock_Config+0x88>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8006ba6:	4a14      	ldr	r2, [pc, #80]	; (8006bf8 <SystemClock_Config+0xdc>)
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006ba8:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006baa:	9324      	str	r3, [sp, #144]	; 0x90
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006bac:	9325      	str	r3, [sp, #148]	; 0x94
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8006bae:	9326      	str	r3, [sp, #152]	; 0x98
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8006bb0:	9327      	str	r3, [sp, #156]	; 0x9c
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8006bb2:	9328      	str	r3, [sp, #160]	; 0xa0
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8006bb4:	932a      	str	r3, [sp, #168]	; 0xa8
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8006bb6:	932d      	str	r3, [sp, #180]	; 0xb4
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8006bb8:	932f      	str	r3, [sp, #188]	; 0xbc
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8006bba:	9332      	str	r3, [sp, #200]	; 0xc8
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8006bbc:	9213      	str	r2, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006bbe:	f7fc fa9f 	bl	8003100 <HAL_RCCEx_PeriphCLKConfig>
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	b100      	cbz	r0, 8006bc8 <SystemClock_Config+0xac>
 8006bc6:	e7fe      	b.n	8006bc6 <SystemClock_Config+0xaa>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8006bc8:	f7fc fa52 	bl	8003070 <HAL_RCC_GetHCLKFreq>
 8006bcc:	4b0b      	ldr	r3, [pc, #44]	; (8006bfc <SystemClock_Config+0xe0>)
 8006bce:	fba3 3000 	umull	r3, r0, r3, r0
 8006bd2:	0980      	lsrs	r0, r0, #6
 8006bd4:	f7fa fd4a 	bl	800166c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8006bd8:	4628      	mov	r0, r5
 8006bda:	f7fa fd5f 	bl	800169c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8006bde:	4622      	mov	r2, r4
 8006be0:	4631      	mov	r1, r6
 8006be2:	f04f 30ff 	mov.w	r0, #4294967295
 8006be6:	f7fa fcfb 	bl	80015e0 <HAL_NVIC_SetPriority>
}
 8006bea:	b035      	add	sp, #212	; 0xd4
 8006bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	40023800 	.word	0x40023800
 8006bf4:	40007000 	.word	0x40007000
 8006bf8:	002297c0 	.word	0x002297c0
 8006bfc:	10624dd3 	.word	0x10624dd3

08006c00 <main>:
{
 8006c00:	b508      	push	{r3, lr}
  HAL_Init();
 8006c02:	f7fa fc09 	bl	8001418 <HAL_Init>
  SystemClock_Config();
 8006c06:	f7ff ff89 	bl	8006b1c <SystemClock_Config>
  MX_GPIO_Init();
 8006c0a:	f7ff fec1 	bl	8006990 <MX_GPIO_Init>
  MX_DMA_Init();
 8006c0e:	f7ff fdcd 	bl	80067ac <MX_DMA_Init>
  MX_UART4_Init();
 8006c12:	f000 facf 	bl	80071b4 <MX_UART4_Init>
  MX_TIM2_Init();
 8006c16:	f000 f943 	bl	8006ea0 <MX_TIM2_Init>
  MX_TIM10_Init();
 8006c1a:	f000 f9cb 	bl	8006fb4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8006c1e:	f000 f9e9 	bl	8006ff4 <MX_TIM11_Init>
  MX_FREERTOS_Init();
 8006c22:	f7ff fe41 	bl	80068a8 <MX_FREERTOS_Init>
  osKernelStart();
 8006c26:	f7fe feb9 	bl	800599c <osKernelStart>
 8006c2a:	e7fe      	b.n	8006c2a <main+0x2a>

08006c2c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8006c2c:	6802      	ldr	r2, [r0, #0]
 8006c2e:	4b03      	ldr	r3, [pc, #12]	; (8006c3c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d000      	beq.n	8006c36 <HAL_TIM_PeriodElapsedCallback+0xa>
 8006c34:	4770      	bx	lr
    HAL_IncTick();
 8006c36:	f7fa bbfb 	b.w	8001430 <HAL_IncTick>
 8006c3a:	bf00      	nop
 8006c3c:	40010000 	.word	0x40010000

08006c40 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8006c40:	e7fe      	b.n	8006c40 <_Error_Handler>
 8006c42:	bf00      	nop

08006c44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006c44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006c46:	2003      	movs	r0, #3
 8006c48:	f7fa fcb6 	bl	80015b8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f06f 000b 	mvn.w	r0, #11
 8006c52:	4611      	mov	r1, r2
 8006c54:	f7fa fcc4 	bl	80015e0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f06f 000a 	mvn.w	r0, #10
 8006c5e:	4611      	mov	r1, r2
 8006c60:	f7fa fcbe 	bl	80015e0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8006c64:	2200      	movs	r2, #0
 8006c66:	f06f 0009 	mvn.w	r0, #9
 8006c6a:	4611      	mov	r1, r2
 8006c6c:	f7fa fcb8 	bl	80015e0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8006c70:	2200      	movs	r2, #0
 8006c72:	f06f 0004 	mvn.w	r0, #4
 8006c76:	4611      	mov	r1, r2
 8006c78:	f7fa fcb2 	bl	80015e0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f06f 0003 	mvn.w	r0, #3
 8006c82:	4611      	mov	r1, r2
 8006c84:	f7fa fcac 	bl	80015e0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006c88:	2200      	movs	r2, #0
 8006c8a:	210f      	movs	r1, #15
 8006c8c:	f06f 0001 	mvn.w	r0, #1
 8006c90:	f7fa fca6 	bl	80015e0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8006c94:	2200      	movs	r2, #0
 8006c96:	210f      	movs	r1, #15
 8006c98:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006c9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8006ca0:	f7fa bc9e 	b.w	80015e0 <HAL_NVIC_SetPriority>

08006ca4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ca4:	b570      	push	{r4, r5, r6, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8006ca6:	4601      	mov	r1, r0
{
 8006ca8:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8006caa:	2200      	movs	r2, #0
 8006cac:	2019      	movs	r0, #25
 8006cae:	f7fa fc97 	bl	80015e0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8006cb2:	2019      	movs	r0, #25
 8006cb4:	f7fa fcce 	bl	8001654 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8006cb8:	4b15      	ldr	r3, [pc, #84]	; (8006d10 <HAL_InitTick+0x6c>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006cba:	a901      	add	r1, sp, #4
 8006cbc:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8006cbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8006cc0:	4e14      	ldr	r6, [pc, #80]	; (8006d14 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8006cc2:	f042 0201 	orr.w	r2, r2, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8006cc6:	4c14      	ldr	r4, [pc, #80]	; (8006d18 <HAL_InitTick+0x74>)
 8006cc8:	4d14      	ldr	r5, [pc, #80]	; (8006d1c <HAL_InitTick+0x78>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8006cca:	645a      	str	r2, [r3, #68]	; 0x44
 8006ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	9302      	str	r3, [sp, #8]
 8006cd4:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006cd6:	f7fc f9f1 	bl	80030bc <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8006cda:	f7fc f9df 	bl	800309c <HAL_RCC_GetPCLK2Freq>
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8006cde:	2200      	movs	r2, #0
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8006ce0:	0043      	lsls	r3, r0, #1
  htim1.Init.Period = (1000000 / 1000) - 1;
 8006ce2:	f240 31e7 	movw	r1, #999	; 0x3e7
  htim1.Instance = TIM1;
 8006ce6:	6025      	str	r5, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8006ce8:	fba6 0303 	umull	r0, r3, r6, r3
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8006cec:	4620      	mov	r0, r4
  htim1.Init.Period = (1000000 / 1000) - 1;
 8006cee:	60e1      	str	r1, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8006cf0:	0c9b      	lsrs	r3, r3, #18
  htim1.Init.ClockDivision = 0;
 8006cf2:	6122      	str	r2, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006cf4:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8006cf6:	3b01      	subs	r3, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8006cf8:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8006cfa:	f7fc fcfd 	bl	80036f8 <HAL_TIM_Base_Init>
 8006cfe:	b110      	cbz	r0, 8006d06 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8006d00:	2001      	movs	r0, #1
}
 8006d02:	b008      	add	sp, #32
 8006d04:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 8006d06:	4620      	mov	r0, r4
 8006d08:	f7fc fd9c 	bl	8003844 <HAL_TIM_Base_Start_IT>
}
 8006d0c:	b008      	add	sp, #32
 8006d0e:	bd70      	pop	{r4, r5, r6, pc}
 8006d10:	40023800 	.word	0x40023800
 8006d14:	431bde83 	.word	0x431bde83
 8006d18:	20004880 	.word	0x20004880
 8006d1c:	40010000 	.word	0x40010000

08006d20 <NMI_Handler>:
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop

08006d24 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8006d24:	e7fe      	b.n	8006d24 <HardFault_Handler>
 8006d26:	bf00      	nop

08006d28 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8006d28:	e7fe      	b.n	8006d28 <MemManage_Handler>
 8006d2a:	bf00      	nop

08006d2c <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8006d2c:	e7fe      	b.n	8006d2c <BusFault_Handler>
 8006d2e:	bf00      	nop

08006d30 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8006d30:	e7fe      	b.n	8006d30 <UsageFault_Handler>
 8006d32:	bf00      	nop

08006d34 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop

08006d38 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8006d38:	f7fe be56 	b.w	80059e8 <osSystickHandler>

08006d3c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8006d3c:	2010      	movs	r0, #16
 8006d3e:	f7fa bf6b 	b.w	8001c18 <HAL_GPIO_EXTI_IRQHandler>
 8006d42:	bf00      	nop

08006d44 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8006d44:	4801      	ldr	r0, [pc, #4]	; (8006d4c <DMA1_Stream1_IRQHandler+0x8>)
 8006d46:	f7fa bd67 	b.w	8001818 <HAL_DMA_IRQHandler>
 8006d4a:	bf00      	nop
 8006d4c:	20004bf0 	.word	0x20004bf0

08006d50 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8006d50:	4801      	ldr	r0, [pc, #4]	; (8006d58 <DMA1_Stream2_IRQHandler+0x8>)
 8006d52:	f7fa bd61 	b.w	8001818 <HAL_DMA_IRQHandler>
 8006d56:	bf00      	nop
 8006d58:	20004b20 	.word	0x20004b20

08006d5c <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8006d5c:	4801      	ldr	r0, [pc, #4]	; (8006d64 <DMA1_Stream3_IRQHandler+0x8>)
 8006d5e:	f7fa bd5b 	b.w	8001818 <HAL_DMA_IRQHandler>
 8006d62:	bf00      	nop
 8006d64:	20004cc0 	.word	0x20004cc0

08006d68 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8006d68:	4801      	ldr	r0, [pc, #4]	; (8006d70 <DMA1_Stream4_IRQHandler+0x8>)
 8006d6a:	f7fa bd55 	b.w	8001818 <HAL_DMA_IRQHandler>
 8006d6e:	bf00      	nop
 8006d70:	20004fa0 	.word	0x20004fa0

08006d74 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006d74:	4801      	ldr	r0, [pc, #4]	; (8006d7c <ADC_IRQHandler+0x8>)
 8006d76:	f7fa bb85 	b.w	8001484 <HAL_ADC_IRQHandler>
 8006d7a:	bf00      	nop
 8006d7c:	20004558 	.word	0x20004558

08006d80 <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006d80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006d82:	4804      	ldr	r0, [pc, #16]	; (8006d94 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8006d84:	f7fc fee0 	bl	8003b48 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8006d88:	4803      	ldr	r0, [pc, #12]	; (8006d98 <TIM1_UP_TIM10_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006d8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim10);
 8006d8e:	f7fc bedb 	b.w	8003b48 <HAL_TIM_IRQHandler>
 8006d92:	bf00      	nop
 8006d94:	20004880 	.word	0x20004880
 8006d98:	20004900 	.word	0x20004900

08006d9c <TIM1_TRG_COM_TIM11_IRQHandler>:
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8006d9c:	4801      	ldr	r0, [pc, #4]	; (8006da4 <TIM1_TRG_COM_TIM11_IRQHandler+0x8>)
 8006d9e:	f7fc bed3 	b.w	8003b48 <HAL_TIM_IRQHandler>
 8006da2:	bf00      	nop
 8006da4:	200049c0 	.word	0x200049c0

08006da8 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8006da8:	4801      	ldr	r0, [pc, #4]	; (8006db0 <I2C2_EV_IRQHandler+0x8>)
 8006daa:	f7fa bf41 	b.w	8001c30 <HAL_I2C_EV_IRQHandler>
 8006dae:	bf00      	nop
 8006db0:	2000464c 	.word	0x2000464c

08006db4 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8006db4:	4801      	ldr	r0, [pc, #4]	; (8006dbc <SPI1_IRQHandler+0x8>)
 8006db6:	f7fc bc21 	b.w	80035fc <HAL_SPI_IRQHandler>
 8006dba:	bf00      	nop
 8006dbc:	2000475c 	.word	0x2000475c

08006dc0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006dc0:	4801      	ldr	r0, [pc, #4]	; (8006dc8 <USART1_IRQHandler+0x8>)
 8006dc2:	f7fd b953 	b.w	800406c <HAL_UART_IRQHandler>
 8006dc6:	bf00      	nop
 8006dc8:	20004e50 	.word	0x20004e50

08006dcc <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006dcc:	4801      	ldr	r0, [pc, #4]	; (8006dd4 <USART3_IRQHandler+0x8>)
 8006dce:	f7fd b94d 	b.w	800406c <HAL_UART_IRQHandler>
 8006dd2:	bf00      	nop
 8006dd4:	20004c50 	.word	0x20004c50

08006dd8 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8006dd8:	4801      	ldr	r0, [pc, #4]	; (8006de0 <DMA1_Stream7_IRQHandler+0x8>)
 8006dda:	f7fa bd1d 	b.w	8001818 <HAL_DMA_IRQHandler>
 8006dde:	bf00      	nop
 8006de0:	20004a00 	.word	0x20004a00

08006de4 <UART4_IRQHandler>:
void UART4_IRQHandler(void)
{
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8006de4:	4801      	ldr	r0, [pc, #4]	; (8006dec <UART4_IRQHandler+0x8>)
 8006de6:	f7fd b941 	b.w	800406c <HAL_UART_IRQHandler>
 8006dea:	bf00      	nop
 8006dec:	20004ec0 	.word	0x20004ec0

08006df0 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006df0:	4801      	ldr	r0, [pc, #4]	; (8006df8 <TIM7_IRQHandler+0x8>)
 8006df2:	f7fc bea9 	b.w	8003b48 <HAL_TIM_IRQHandler>
 8006df6:	bf00      	nop
 8006df8:	20004ae0 	.word	0x20004ae0

08006dfc <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8006dfc:	4801      	ldr	r0, [pc, #4]	; (8006e04 <DMA2_Stream0_IRQHandler+0x8>)
 8006dfe:	f7fa bd0b 	b.w	8001818 <HAL_DMA_IRQHandler>
 8006e02:	bf00      	nop
 8006e04:	200047c0 	.word	0x200047c0

08006e08 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8006e08:	4801      	ldr	r0, [pc, #4]	; (8006e10 <DMA2_Stream1_IRQHandler+0x8>)
 8006e0a:	f7fa bd05 	b.w	8001818 <HAL_DMA_IRQHandler>
 8006e0e:	bf00      	nop
 8006e10:	20004698 	.word	0x20004698

08006e14 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006e14:	4801      	ldr	r0, [pc, #4]	; (8006e1c <DMA2_Stream2_IRQHandler+0x8>)
 8006e16:	f7fa bcff 	b.w	8001818 <HAL_DMA_IRQHandler>
 8006e1a:	bf00      	nop
 8006e1c:	20004df0 	.word	0x20004df0

08006e20 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8006e20:	4801      	ldr	r0, [pc, #4]	; (8006e28 <DMA2_Stream3_IRQHandler+0x8>)
 8006e22:	f7fa bcf9 	b.w	8001818 <HAL_DMA_IRQHandler>
 8006e26:	bf00      	nop
 8006e28:	20004820 	.word	0x20004820

08006e2c <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006e2c:	4801      	ldr	r0, [pc, #4]	; (8006e34 <DMA2_Stream4_IRQHandler+0x8>)
 8006e2e:	f7fa bcf3 	b.w	8001818 <HAL_DMA_IRQHandler>
 8006e32:	bf00      	nop
 8006e34:	200045a0 	.word	0x200045a0

08006e38 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8006e38:	4801      	ldr	r0, [pc, #4]	; (8006e40 <OTG_FS_IRQHandler+0x8>)
 8006e3a:	f7fb b939 	b.w	80020b0 <HAL_PCD_IRQHandler>
 8006e3e:	bf00      	nop
 8006e40:	20006224 	.word	0x20006224

08006e44 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8006e44:	4801      	ldr	r0, [pc, #4]	; (8006e4c <DMA2_Stream7_IRQHandler+0x8>)
 8006e46:	f7fa bce7 	b.w	8001818 <HAL_DMA_IRQHandler>
 8006e4a:	bf00      	nop
 8006e4c:	20004d20 	.word	0x20004d20

08006e50 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006e50:	4a0f      	ldr	r2, [pc, #60]	; (8006e90 <SystemInit+0x40>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006e52:	4b10      	ldr	r3, [pc, #64]	; (8006e94 <SystemInit+0x44>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006e54:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006e58:	490f      	ldr	r1, [pc, #60]	; (8006e98 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006e5a:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
{
 8006e5e:	b470      	push	{r4, r5, r6}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006e60:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
  RCC->CFGR = 0x00000000;
 8006e64:	2400      	movs	r4, #0
  RCC->CR |= (uint32_t)0x00000001;
 8006e66:	6818      	ldr	r0, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006e68:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  RCC->PLLCFGR = 0x24003010;
 8006e6c:	4e0b      	ldr	r6, [pc, #44]	; (8006e9c <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 8006e6e:	f040 0001 	orr.w	r0, r0, #1
 8006e72:	6018      	str	r0, [r3, #0]
  RCC->CFGR = 0x00000000;
 8006e74:	609c      	str	r4, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006e76:	6818      	ldr	r0, [r3, #0]
 8006e78:	4001      	ands	r1, r0
 8006e7a:	6019      	str	r1, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8006e7c:	605e      	str	r6, [r3, #4]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006e7e:	6819      	ldr	r1, [r3, #0]
 8006e80:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8006e84:	6019      	str	r1, [r3, #0]
  RCC->CIR = 0x00000000;
 8006e86:	60dc      	str	r4, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006e88:	6095      	str	r5, [r2, #8]
#endif
}
 8006e8a:	bc70      	pop	{r4, r5, r6}
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	e000ed00 	.word	0xe000ed00
 8006e94:	40023800 	.word	0x40023800
 8006e98:	fef6ffff 	.word	0xfef6ffff
 8006e9c:	24003010 	.word	0x24003010

08006ea0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim14;
DMA_HandleTypeDef hdma_tim4_ch3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006ea0:	b530      	push	{r4, r5, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 8006ea2:	4c3f      	ldr	r4, [pc, #252]	; (8006fa0 <MX_TIM2_Init+0x100>)
  htim2.Init.Prescaler = 107;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ea4:	2300      	movs	r3, #0
  htim2.Instance = TIM2;
 8006ea6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 107;
 8006eaa:	216b      	movs	r1, #107	; 0x6b
  htim2.Init.Period = 19999;
 8006eac:	f644 621f 	movw	r2, #19999	; 0x4e1f
{
 8006eb0:	b095      	sub	sp, #84	; 0x54
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006eb2:	4620      	mov	r0, r4
  htim2.Instance = TIM2;
 8006eb4:	6025      	str	r5, [r4, #0]
  htim2.Init.Prescaler = 107;
 8006eb6:	6061      	str	r1, [r4, #4]
  htim2.Init.Period = 19999;
 8006eb8:	60e2      	str	r2, [r4, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006eba:	60a3      	str	r3, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006ebc:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ebe:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006ec0:	f7fc fc1a 	bl	80036f8 <HAL_TIM_Base_Init>
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	d149      	bne.n	8006f5c <MX_TIM2_Init+0xbc>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ecc:	a914      	add	r1, sp, #80	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006ece:	4834      	ldr	r0, [pc, #208]	; (8006fa0 <MX_TIM2_Init+0x100>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006ed0:	f841 3d40 	str.w	r3, [r1, #-64]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006ed4:	f7fc fd68 	bl	80039a8 <HAL_TIM_ConfigClockSource>
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	d13a      	bne.n	8006f52 <MX_TIM2_Init+0xb2>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8006edc:	4830      	ldr	r0, [pc, #192]	; (8006fa0 <MX_TIM2_Init+0x100>)
 8006ede:	f7fc fcbd 	bl	800385c <HAL_TIM_PWM_Init>
 8006ee2:	2800      	cmp	r0, #0
 8006ee4:	d130      	bne.n	8006f48 <MX_TIM2_Init+0xa8>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006ee6:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006ee8:	a901      	add	r1, sp, #4
 8006eea:	482d      	ldr	r0, [pc, #180]	; (8006fa0 <MX_TIM2_Init+0x100>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006eec:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006eee:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006ef0:	f7fc ffa8 	bl	8003e44 <HAL_TIMEx_MasterConfigSynchronization>
 8006ef4:	bb18      	cbnz	r0, 8006f3e <MX_TIM2_Init+0x9e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
 8006ef6:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006ef8:	2560      	movs	r5, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006efa:	2208      	movs	r2, #8
 8006efc:	a90d      	add	r1, sp, #52	; 0x34
 8006efe:	4828      	ldr	r0, [pc, #160]	; (8006fa0 <MX_TIM2_Init+0x100>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006f00:	950d      	str	r5, [sp, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8006f02:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006f04:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006f06:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006f08:	f7fc ffcc 	bl	8003ea4 <HAL_TIM_PWM_ConfigChannel>
 8006f0c:	b990      	cbnz	r0, 8006f34 <MX_TIM2_Init+0x94>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006f0e:	a90d      	add	r1, sp, #52	; 0x34
 8006f10:	220c      	movs	r2, #12
 8006f12:	4823      	ldr	r0, [pc, #140]	; (8006fa0 <MX_TIM2_Init+0x100>)
 8006f14:	f7fc ffc6 	bl	8003ea4 <HAL_TIM_PWM_ConfigChannel>
 8006f18:	b118      	cbz	r0, 8006f22 <MX_TIM2_Init+0x82>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006f1a:	2175      	movs	r1, #117	; 0x75
 8006f1c:	4821      	ldr	r0, [pc, #132]	; (8006fa4 <MX_TIM2_Init+0x104>)
 8006f1e:	f7ff fe8f 	bl	8006c40 <_Error_Handler>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM2)
 8006f22:	6823      	ldr	r3, [r4, #0]
 8006f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f28:	d02c      	beq.n	8006f84 <MX_TIM2_Init+0xe4>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM4)
 8006f2a:	4a1f      	ldr	r2, [pc, #124]	; (8006fa8 <MX_TIM2_Init+0x108>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d01a      	beq.n	8006f66 <MX_TIM2_Init+0xc6>
}
 8006f30:	b015      	add	sp, #84	; 0x54
 8006f32:	bd30      	pop	{r4, r5, pc}
    _Error_Handler(__FILE__, __LINE__);
 8006f34:	2170      	movs	r1, #112	; 0x70
 8006f36:	481b      	ldr	r0, [pc, #108]	; (8006fa4 <MX_TIM2_Init+0x104>)
 8006f38:	f7ff fe82 	bl	8006c40 <_Error_Handler>
 8006f3c:	e7e7      	b.n	8006f0e <MX_TIM2_Init+0x6e>
    _Error_Handler(__FILE__, __LINE__);
 8006f3e:	2167      	movs	r1, #103	; 0x67
 8006f40:	4818      	ldr	r0, [pc, #96]	; (8006fa4 <MX_TIM2_Init+0x104>)
 8006f42:	f7ff fe7d 	bl	8006c40 <_Error_Handler>
 8006f46:	e7d6      	b.n	8006ef6 <MX_TIM2_Init+0x56>
    _Error_Handler(__FILE__, __LINE__);
 8006f48:	2160      	movs	r1, #96	; 0x60
 8006f4a:	4816      	ldr	r0, [pc, #88]	; (8006fa4 <MX_TIM2_Init+0x104>)
 8006f4c:	f7ff fe78 	bl	8006c40 <_Error_Handler>
 8006f50:	e7c9      	b.n	8006ee6 <MX_TIM2_Init+0x46>
    _Error_Handler(__FILE__, __LINE__);
 8006f52:	215b      	movs	r1, #91	; 0x5b
 8006f54:	4813      	ldr	r0, [pc, #76]	; (8006fa4 <MX_TIM2_Init+0x104>)
 8006f56:	f7ff fe73 	bl	8006c40 <_Error_Handler>
 8006f5a:	e7bf      	b.n	8006edc <MX_TIM2_Init+0x3c>
    _Error_Handler(__FILE__, __LINE__);
 8006f5c:	2155      	movs	r1, #85	; 0x55
 8006f5e:	4811      	ldr	r0, [pc, #68]	; (8006fa4 <MX_TIM2_Init+0x104>)
 8006f60:	f7ff fe6e 	bl	8006c40 <_Error_Handler>
 8006f64:	e7b0      	b.n	8006ec8 <MX_TIM2_Init+0x28>
  
    /**TIM4 GPIO Configuration    
    PB8     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = O10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f66:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = O10_Pin;
 8006f68:	f44f 7580 	mov.w	r5, #256	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f6c:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f6e:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(O10_GPIO_Port, &GPIO_InitStruct);
 8006f70:	a908      	add	r1, sp, #32
 8006f72:	480e      	ldr	r0, [pc, #56]	; (8006fac <MX_TIM2_Init+0x10c>)
    GPIO_InitStruct.Pin = O10_Pin;
 8006f74:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f76:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006f78:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f7a:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f7c:	920b      	str	r2, [sp, #44]	; 0x2c
    HAL_GPIO_Init(O10_GPIO_Port, &GPIO_InitStruct);
 8006f7e:	f7fa fd1b 	bl	80019b8 <HAL_GPIO_Init>
}
 8006f82:	e7d5      	b.n	8006f30 <MX_TIM2_Init+0x90>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f84:	2300      	movs	r3, #0
    GPIO_InitStruct.Pin = O6_Pin|O1_Pin;
 8006f86:	250c      	movs	r5, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f88:	2402      	movs	r4, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006f8a:	2201      	movs	r2, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f8c:	a908      	add	r1, sp, #32
 8006f8e:	4808      	ldr	r0, [pc, #32]	; (8006fb0 <MX_TIM2_Init+0x110>)
    GPIO_InitStruct.Pin = O6_Pin|O1_Pin;
 8006f90:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f92:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f94:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f96:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006f98:	920c      	str	r2, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f9a:	f7fa fd0d 	bl	80019b8 <HAL_GPIO_Init>
 8006f9e:	e7c7      	b.n	8006f30 <MX_TIM2_Init+0x90>
 8006fa0:	20004a60 	.word	0x20004a60
 8006fa4:	080084c8 	.word	0x080084c8
 8006fa8:	40000800 	.word	0x40000800
 8006fac:	40020400 	.word	0x40020400
 8006fb0:	40020000 	.word	0x40020000

08006fb4 <MX_TIM10_Init>:
{
 8006fb4:	b538      	push	{r3, r4, r5, lr}
  htim10.Instance = TIM10;
 8006fb6:	4b0c      	ldr	r3, [pc, #48]	; (8006fe8 <MX_TIM10_Init+0x34>)
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006fb8:	2200      	movs	r2, #0
  htim10.Init.Prescaler = 21599;
 8006fba:	f245 445f 	movw	r4, #21599	; 0x545f
  htim10.Instance = TIM10;
 8006fbe:	4d0b      	ldr	r5, [pc, #44]	; (8006fec <MX_TIM10_Init+0x38>)
  htim10.Init.Period = 9999;
 8006fc0:	f242 710f 	movw	r1, #9999	; 0x270f
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006fc4:	4618      	mov	r0, r3
  htim10.Instance = TIM10;
 8006fc6:	601d      	str	r5, [r3, #0]
  htim10.Init.Prescaler = 21599;
 8006fc8:	605c      	str	r4, [r3, #4]
  htim10.Init.Period = 9999;
 8006fca:	60d9      	str	r1, [r3, #12]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006fcc:	609a      	str	r2, [r3, #8]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006fce:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006fd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006fd2:	f7fc fb91 	bl	80036f8 <HAL_TIM_Base_Init>
 8006fd6:	b900      	cbnz	r0, 8006fda <MX_TIM10_Init+0x26>
 8006fd8:	bd38      	pop	{r3, r4, r5, pc}
    _Error_Handler(__FILE__, __LINE__);
 8006fda:	f44f 7183 	mov.w	r1, #262	; 0x106
 8006fde:	4804      	ldr	r0, [pc, #16]	; (8006ff0 <MX_TIM10_Init+0x3c>)
}
 8006fe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _Error_Handler(__FILE__, __LINE__);
 8006fe4:	f7ff be2c 	b.w	8006c40 <_Error_Handler>
 8006fe8:	20004900 	.word	0x20004900
 8006fec:	40014400 	.word	0x40014400
 8006ff0:	080084c8 	.word	0x080084c8

08006ff4 <MX_TIM11_Init>:
{
 8006ff4:	b538      	push	{r3, r4, r5, lr}
  htim11.Instance = TIM11;
 8006ff6:	4b0c      	ldr	r3, [pc, #48]	; (8007028 <MX_TIM11_Init+0x34>)
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ff8:	2200      	movs	r2, #0
  htim11.Init.Prescaler = 21599;
 8006ffa:	f245 445f 	movw	r4, #21599	; 0x545f
  htim11.Instance = TIM11;
 8006ffe:	4d0b      	ldr	r5, [pc, #44]	; (800702c <MX_TIM11_Init+0x38>)
  htim11.Init.Period = 9999;
 8007000:	f242 710f 	movw	r1, #9999	; 0x270f
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8007004:	4618      	mov	r0, r3
  htim11.Instance = TIM11;
 8007006:	601d      	str	r5, [r3, #0]
  htim11.Init.Prescaler = 21599;
 8007008:	605c      	str	r4, [r3, #4]
  htim11.Init.Period = 9999;
 800700a:	60d9      	str	r1, [r3, #12]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800700c:	609a      	str	r2, [r3, #8]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800700e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007010:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8007012:	f7fc fb71 	bl	80036f8 <HAL_TIM_Base_Init>
 8007016:	b900      	cbnz	r0, 800701a <MX_TIM11_Init+0x26>
 8007018:	bd38      	pop	{r3, r4, r5, pc}
    _Error_Handler(__FILE__, __LINE__);
 800701a:	f44f 718b 	mov.w	r1, #278	; 0x116
 800701e:	4804      	ldr	r0, [pc, #16]	; (8007030 <MX_TIM11_Init+0x3c>)
}
 8007020:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _Error_Handler(__FILE__, __LINE__);
 8007024:	f7ff be0c 	b.w	8006c40 <_Error_Handler>
 8007028:	200049c0 	.word	0x200049c0
 800702c:	40014800 	.word	0x40014800
 8007030:	080084c8 	.word	0x080084c8

08007034 <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM2)
 8007034:	6803      	ldr	r3, [r0, #0]
 8007036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 800703a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800703c:	b08b      	sub	sp, #44	; 0x2c
  if(tim_baseHandle->Instance==TIM2)
 800703e:	d019      	beq.n	8007074 <HAL_TIM_Base_MspInit+0x40>
  else if(tim_baseHandle->Instance==TIM7)
 8007040:	4a34      	ldr	r2, [pc, #208]	; (8007114 <HAL_TIM_Base_MspInit+0xe0>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d02d      	beq.n	80070a2 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM10)
 8007046:	4a34      	ldr	r2, [pc, #208]	; (8007118 <HAL_TIM_Base_MspInit+0xe4>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d03d      	beq.n	80070c8 <HAL_TIM_Base_MspInit+0x94>
  else if(tim_baseHandle->Instance==TIM11)
 800704c:	4a33      	ldr	r2, [pc, #204]	; (800711c <HAL_TIM_Base_MspInit+0xe8>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d04d      	beq.n	80070ee <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM14)
 8007052:	4a33      	ldr	r2, [pc, #204]	; (8007120 <HAL_TIM_Base_MspInit+0xec>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d001      	beq.n	800705c <HAL_TIM_Base_MspInit+0x28>
}
 8007058:	b00b      	add	sp, #44	; 0x2c
 800705a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM14_CLK_ENABLE();
 800705c:	4b31      	ldr	r3, [pc, #196]	; (8007124 <HAL_TIM_Base_MspInit+0xf0>)
 800705e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007060:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007064:	641a      	str	r2, [r3, #64]	; 0x40
 8007066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800706c:	9305      	str	r3, [sp, #20]
 800706e:	9b05      	ldr	r3, [sp, #20]
}
 8007070:	b00b      	add	sp, #44	; 0x2c
 8007072:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007074:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007078:	2501      	movs	r5, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800707a:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = O8_Pin;
 800707c:	2708      	movs	r7, #8
    __HAL_RCC_TIM2_CLK_ENABLE();
 800707e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007080:	2602      	movs	r6, #2
    HAL_GPIO_Init(O8_GPIO_Port, &GPIO_InitStruct);
 8007082:	a905      	add	r1, sp, #20
 8007084:	4828      	ldr	r0, [pc, #160]	; (8007128 <HAL_TIM_Base_MspInit+0xf4>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007086:	432a      	orrs	r2, r5
 8007088:	641a      	str	r2, [r3, #64]	; 0x40
 800708a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = O8_Pin;
 800708c:	9705      	str	r7, [sp, #20]
    __HAL_RCC_TIM2_CLK_ENABLE();
 800708e:	402b      	ands	r3, r5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007090:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007092:	9407      	str	r4, [sp, #28]
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007094:	9301      	str	r3, [sp, #4]
 8007096:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007098:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800709a:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(O8_GPIO_Port, &GPIO_InitStruct);
 800709c:	f7fa fc8c 	bl	80019b8 <HAL_GPIO_Init>
 80070a0:	e7da      	b.n	8007058 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80070a2:	4b20      	ldr	r3, [pc, #128]	; (8007124 <HAL_TIM_Base_MspInit+0xf0>)
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80070a4:	2200      	movs	r2, #0
 80070a6:	2105      	movs	r1, #5
 80070a8:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 80070aa:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80070ac:	f044 0420 	orr.w	r4, r4, #32
 80070b0:	641c      	str	r4, [r3, #64]	; 0x40
 80070b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b4:	f003 0320 	and.w	r3, r3, #32
 80070b8:	9302      	str	r3, [sp, #8]
 80070ba:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80070bc:	f7fa fa90 	bl	80015e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80070c0:	2037      	movs	r0, #55	; 0x37
 80070c2:	f7fa fac7 	bl	8001654 <HAL_NVIC_EnableIRQ>
 80070c6:	e7c7      	b.n	8007058 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80070c8:	4b16      	ldr	r3, [pc, #88]	; (8007124 <HAL_TIM_Base_MspInit+0xf0>)
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80070ca:	2200      	movs	r2, #0
 80070cc:	2019      	movs	r0, #25
    __HAL_RCC_TIM10_CLK_ENABLE();
 80070ce:	6c5c      	ldr	r4, [r3, #68]	; 0x44
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80070d0:	4611      	mov	r1, r2
    __HAL_RCC_TIM10_CLK_ENABLE();
 80070d2:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 80070d6:	645c      	str	r4, [r3, #68]	; 0x44
 80070d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070de:	9303      	str	r3, [sp, #12]
 80070e0:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80070e2:	f7fa fa7d 	bl	80015e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80070e6:	2019      	movs	r0, #25
 80070e8:	f7fa fab4 	bl	8001654 <HAL_NVIC_EnableIRQ>
 80070ec:	e7b4      	b.n	8007058 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80070ee:	4b0d      	ldr	r3, [pc, #52]	; (8007124 <HAL_TIM_Base_MspInit+0xf0>)
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80070f0:	2200      	movs	r2, #0
 80070f2:	2105      	movs	r1, #5
 80070f4:	201a      	movs	r0, #26
    __HAL_RCC_TIM11_CLK_ENABLE();
 80070f6:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80070f8:	f444 2480 	orr.w	r4, r4, #262144	; 0x40000
 80070fc:	645c      	str	r4, [r3, #68]	; 0x44
 80070fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007100:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007104:	9304      	str	r3, [sp, #16]
 8007106:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8007108:	f7fa fa6a 	bl	80015e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800710c:	201a      	movs	r0, #26
 800710e:	f7fa faa1 	bl	8001654 <HAL_NVIC_EnableIRQ>
 8007112:	e7a1      	b.n	8007058 <HAL_TIM_Base_MspInit+0x24>
 8007114:	40001400 	.word	0x40001400
 8007118:	40014400 	.word	0x40014400
 800711c:	40014800 	.word	0x40014800
 8007120:	40002000 	.word	0x40002000
 8007124:	40023800 	.word	0x40023800
 8007128:	40020400 	.word	0x40020400

0800712c <HAL_TIM_PWM_MspInit>:
  if(tim_pwmHandle->Instance==TIM4)
 800712c:	4b1d      	ldr	r3, [pc, #116]	; (80071a4 <HAL_TIM_PWM_MspInit+0x78>)
 800712e:	6802      	ldr	r2, [r0, #0]
 8007130:	429a      	cmp	r2, r3
 8007132:	d000      	beq.n	8007136 <HAL_TIM_PWM_MspInit+0xa>
 8007134:	4770      	bx	lr
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007136:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800713a:	2140      	movs	r1, #64	; 0x40
    __HAL_RCC_TIM4_CLK_ENABLE();
 800713c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800713e:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007140:	f042 0204 	orr.w	r2, r2, #4
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8007144:	4d18      	ldr	r5, [pc, #96]	; (80071a8 <HAL_TIM_PWM_MspInit+0x7c>)
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 8007146:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
{
 800714a:	b083      	sub	sp, #12
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800714c:	60a9      	str	r1, [r5, #8]
 800714e:	4604      	mov	r4, r0
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 8007150:	606e      	str	r6, [r5, #4]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8007152:	f44f 6080 	mov.w	r0, #1024	; 0x400
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007156:	641a      	str	r2, [r3, #64]	; 0x40
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007158:	f44f 6700 	mov.w	r7, #2048	; 0x800
    __HAL_RCC_TIM4_CLK_ENABLE();
 800715c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800715e:	f44f 5600 	mov.w	r6, #8192	; 0x2000
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8007162:	2300      	movs	r3, #0
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8007164:	f8df e048 	ldr.w	lr, [pc, #72]	; 80071b0 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007168:	f002 0204 	and.w	r2, r2, #4
    hdma_tim4_ch3.Init.Mode = DMA_CIRCULAR;
 800716c:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8007170:	6128      	str	r0, [r5, #16]
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8007172:	4628      	mov	r0, r5
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007174:	9201      	str	r2, [sp, #4]
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8007176:	f8c5 e000 	str.w	lr, [r5]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800717a:	616f      	str	r7, [r5, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
 800717c:	9a01      	ldr	r2, [sp, #4]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800717e:	61ae      	str	r6, [r5, #24]
    hdma_tim4_ch3.Init.Mode = DMA_CIRCULAR;
 8007180:	61e9      	str	r1, [r5, #28]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8007182:	60eb      	str	r3, [r5, #12]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8007184:	622b      	str	r3, [r5, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007186:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8007188:	f7fa fa94 	bl	80016b4 <HAL_DMA_Init>
 800718c:	b918      	cbnz	r0, 8007196 <HAL_TIM_PWM_MspInit+0x6a>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 800718e:	62e5      	str	r5, [r4, #44]	; 0x2c
 8007190:	63ac      	str	r4, [r5, #56]	; 0x38
}
 8007192:	b003      	add	sp, #12
 8007194:	bdf0      	pop	{r4, r5, r6, r7, pc}
      _Error_Handler(__FILE__, __LINE__);
 8007196:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 800719a:	4804      	ldr	r0, [pc, #16]	; (80071ac <HAL_TIM_PWM_MspInit+0x80>)
 800719c:	f7ff fd50 	bl	8006c40 <_Error_Handler>
 80071a0:	e7f5      	b.n	800718e <HAL_TIM_PWM_MspInit+0x62>
 80071a2:	bf00      	nop
 80071a4:	40000800 	.word	0x40000800
 80071a8:	20004a00 	.word	0x20004a00
 80071ac:	080084c8 	.word	0x080084c8
 80071b0:	400260b8 	.word	0x400260b8

080071b4 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80071b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  huart4.Instance = UART4;
 80071b6:	4810      	ldr	r0, [pc, #64]	; (80071f8 <MX_UART4_Init+0x44>)
  huart4.Init.BaudRate = 115200;
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
  huart4.Init.StopBits = UART_STOPBITS_2;
  huart4.Init.Parity = UART_PARITY_EVEN;
  huart4.Init.Mode = UART_MODE_TX_RX;
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80071b8:	2200      	movs	r2, #0
  huart4.Instance = UART4;
 80071ba:	4b10      	ldr	r3, [pc, #64]	; (80071fc <MX_UART4_Init+0x48>)
  huart4.Init.BaudRate = 115200;
 80071bc:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 80071c0:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  huart4.Init.StopBits = UART_STOPBITS_2;
 80071c4:	f44f 5500 	mov.w	r5, #8192	; 0x2000
  huart4.Init.Parity = UART_PARITY_EVEN;
 80071c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  huart4.Init.Mode = UART_MODE_TX_RX;
 80071cc:	210c      	movs	r1, #12
  huart4.Instance = UART4;
 80071ce:	6018      	str	r0, [r3, #0]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80071d0:	4618      	mov	r0, r3
  huart4.Init.BaudRate = 115200;
 80071d2:	605f      	str	r7, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 80071d4:	609e      	str	r6, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_2;
 80071d6:	60dd      	str	r5, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 80071d8:	611c      	str	r4, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80071da:	6159      	str	r1, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80071dc:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80071de:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80071e0:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80071e2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80071e4:	f7fd f8ec 	bl	80043c0 <HAL_UART_Init>
 80071e8:	b900      	cbnz	r0, 80071ec <MX_UART4_Init+0x38>
 80071ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 80071ec:	2159      	movs	r1, #89	; 0x59
 80071ee:	4804      	ldr	r0, [pc, #16]	; (8007200 <MX_UART4_Init+0x4c>)
  }

}
 80071f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _Error_Handler(__FILE__, __LINE__);
 80071f4:	f7ff bd24 	b.w	8006c40 <_Error_Handler>
 80071f8:	40004c00 	.word	0x40004c00
 80071fc:	20004ec0 	.word	0x20004ec0
 8007200:	080084d8 	.word	0x080084d8

08007204 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART4)
 8007204:	4a9f      	ldr	r2, [pc, #636]	; (8007484 <HAL_UART_MspInit+0x280>)
 8007206:	6803      	ldr	r3, [r0, #0]
 8007208:	4293      	cmp	r3, r2
{
 800720a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800720c:	4604      	mov	r4, r0
 800720e:	b08d      	sub	sp, #52	; 0x34
  if(uartHandle->Instance==UART4)
 8007210:	d06f      	beq.n	80072f2 <HAL_UART_MspInit+0xee>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(uartHandle->Instance==UART5)
 8007212:	4a9d      	ldr	r2, [pc, #628]	; (8007488 <HAL_UART_MspInit+0x284>)
 8007214:	4293      	cmp	r3, r2
 8007216:	f000 8161 	beq.w	80074dc <HAL_UART_MspInit+0x2d8>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(uartHandle->Instance==UART7)
 800721a:	4a9c      	ldr	r2, [pc, #624]	; (800748c <HAL_UART_MspInit+0x288>)
 800721c:	4293      	cmp	r3, r2
 800721e:	f000 8184 	beq.w	800752a <HAL_UART_MspInit+0x326>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 8007222:	4a9b      	ldr	r2, [pc, #620]	; (8007490 <HAL_UART_MspInit+0x28c>)
 8007224:	4293      	cmp	r3, r2
 8007226:	f000 80be 	beq.w	80073a6 <HAL_UART_MspInit+0x1a2>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 800722a:	4a9a      	ldr	r2, [pc, #616]	; (8007494 <HAL_UART_MspInit+0x290>)
 800722c:	4293      	cmp	r3, r2
 800722e:	f000 8197 	beq.w	8007560 <HAL_UART_MspInit+0x35c>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8007232:	4a99      	ldr	r2, [pc, #612]	; (8007498 <HAL_UART_MspInit+0x294>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d001      	beq.n	800723c <HAL_UART_MspInit+0x38>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8007238:	b00d      	add	sp, #52	; 0x34
 800723a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 800723c:	4b97      	ldr	r3, [pc, #604]	; (800749c <HAL_UART_MspInit+0x298>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800723e:	f44f 7040 	mov.w	r0, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007242:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007244:	2500      	movs	r5, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8007246:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007248:	f04f 0e03 	mov.w	lr, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800724c:	2707      	movs	r7, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800724e:	a907      	add	r1, sp, #28
    __HAL_RCC_USART3_CLK_ENABLE();
 8007250:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007254:	641a      	str	r2, [r3, #64]	; 0x40
 8007256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007258:	9007      	str	r0, [sp, #28]
    __HAL_RCC_USART3_CLK_ENABLE();
 800725a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800725e:	4890      	ldr	r0, [pc, #576]	; (80074a0 <HAL_UART_MspInit+0x29c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007260:	9608      	str	r6, [sp, #32]
    __HAL_RCC_USART3_CLK_ENABLE();
 8007262:	9306      	str	r3, [sp, #24]
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8007264:	4e8f      	ldr	r6, [pc, #572]	; (80074a4 <HAL_UART_MspInit+0x2a0>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8007266:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007268:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800726a:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800726c:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007270:	f7fa fba2 	bl	80019b8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8007274:	4f8c      	ldr	r7, [pc, #560]	; (80074a8 <HAL_UART_MspInit+0x2a4>)
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8007276:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800727a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800727e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8007282:	4630      	mov	r0, r6
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007284:	60b5      	str	r5, [r6, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007286:	60f5      	str	r5, [r6, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007288:	6175      	str	r5, [r6, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800728a:	61b5      	str	r5, [r6, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800728c:	61f5      	str	r5, [r6, #28]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800728e:	6275      	str	r5, [r6, #36]	; 0x24
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8007290:	6037      	str	r7, [r6, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8007292:	6071      	str	r1, [r6, #4]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007294:	6132      	str	r2, [r6, #16]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007296:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8007298:	f7fa fa0c 	bl	80016b4 <HAL_DMA_Init>
 800729c:	2800      	cmp	r0, #0
 800729e:	f040 8180 	bne.w	80075a2 <HAL_UART_MspInit+0x39e>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80072a2:	4d82      	ldr	r5, [pc, #520]	; (80074ac <HAL_UART_MspInit+0x2a8>)
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80072a4:	2300      	movs	r3, #0
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80072a6:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80072aa:	f8df c224 	ldr.w	ip, [pc, #548]	; 80074d0 <HAL_UART_MspInit+0x2cc>
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80072ae:	2740      	movs	r7, #64	; 0x40
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80072b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80072b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80072b8:	6666      	str	r6, [r4, #100]	; 0x64
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80072ba:	4628      	mov	r0, r5
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80072bc:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80072be:	60af      	str	r7, [r5, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80072c0:	6129      	str	r1, [r5, #16]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80072c2:	622a      	str	r2, [r5, #32]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80072c4:	60eb      	str	r3, [r5, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80072c6:	616b      	str	r3, [r5, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80072c8:	61ab      	str	r3, [r5, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80072ca:	61eb      	str	r3, [r5, #28]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80072cc:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80072ce:	e885 5000 	stmia.w	r5, {ip, lr}
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80072d2:	f7fa f9ef 	bl	80016b4 <HAL_DMA_Init>
 80072d6:	2800      	cmp	r0, #0
 80072d8:	f040 815d 	bne.w	8007596 <HAL_UART_MspInit+0x392>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80072dc:	6625      	str	r5, [r4, #96]	; 0x60
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80072de:	2200      	movs	r2, #0
 80072e0:	2105      	movs	r1, #5
 80072e2:	2027      	movs	r0, #39	; 0x27
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80072e4:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80072e6:	f7fa f97b 	bl	80015e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80072ea:	2027      	movs	r0, #39	; 0x27
 80072ec:	f7fa f9b2 	bl	8001654 <HAL_NVIC_EnableIRQ>
}
 80072f0:	e7a2      	b.n	8007238 <HAL_UART_MspInit+0x34>
    __HAL_RCC_UART4_CLK_ENABLE();
 80072f2:	4b6a      	ldr	r3, [pc, #424]	; (800749c <HAL_UART_MspInit+0x298>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80072f4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072f8:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072fa:	2500      	movs	r5, #0
    __HAL_RCC_UART4_CLK_ENABLE();
 80072fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072fe:	f04f 0e03 	mov.w	lr, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007302:	2708      	movs	r7, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007304:	a907      	add	r1, sp, #28
    __HAL_RCC_UART4_CLK_ENABLE();
 8007306:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800730a:	641a      	str	r2, [r3, #64]	; 0x40
 800730c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800730e:	9007      	str	r0, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007310:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    __HAL_RCC_UART4_CLK_ENABLE();
 8007314:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007318:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800731a:	f500 30fe 	add.w	r0, r0, #130048	; 0x1fc00
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800731e:	4e64      	ldr	r6, [pc, #400]	; (80074b0 <HAL_UART_MspInit+0x2ac>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8007320:	9301      	str	r3, [sp, #4]
 8007322:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007324:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007326:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800732a:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800732c:	f7fa fb44 	bl	80019b8 <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8007330:	4960      	ldr	r1, [pc, #384]	; (80074b4 <HAL_UART_MspInit+0x2b0>)
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8007332:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007336:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800733a:	4630      	mov	r0, r6
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800733c:	60b5      	str	r5, [r6, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800733e:	60f5      	str	r5, [r6, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007340:	6175      	str	r5, [r6, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007342:	61b5      	str	r5, [r6, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8007344:	61f5      	str	r5, [r6, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007346:	6235      	str	r5, [r6, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007348:	6275      	str	r5, [r6, #36]	; 0x24
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800734a:	6133      	str	r3, [r6, #16]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800734c:	e886 0006 	stmia.w	r6, {r1, r2}
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8007350:	f7fa f9b0 	bl	80016b4 <HAL_DMA_Init>
 8007354:	2800      	cmp	r0, #0
 8007356:	f040 8089 	bne.w	800746c <HAL_UART_MspInit+0x268>
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800735a:	4d57      	ldr	r5, [pc, #348]	; (80074b8 <HAL_UART_MspInit+0x2b4>)
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800735c:	2300      	movs	r3, #0
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800735e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8007362:	f8df e170 	ldr.w	lr, [pc, #368]	; 80074d4 <HAL_UART_MspInit+0x2d0>
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007366:	2140      	movs	r1, #64	; 0x40
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007368:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 800736c:	6666      	str	r6, [r4, #100]	; 0x64
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800736e:	4628      	mov	r0, r5
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8007370:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8007372:	f8c5 e000 	str.w	lr, [r5]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8007376:	606f      	str	r7, [r5, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007378:	60a9      	str	r1, [r5, #8]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800737a:	612a      	str	r2, [r5, #16]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800737c:	60eb      	str	r3, [r5, #12]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800737e:	616b      	str	r3, [r5, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007380:	61ab      	str	r3, [r5, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8007382:	61eb      	str	r3, [r5, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007384:	622b      	str	r3, [r5, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007386:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8007388:	f7fa f994 	bl	80016b4 <HAL_DMA_Init>
 800738c:	2800      	cmp	r0, #0
 800738e:	d162      	bne.n	8007456 <HAL_UART_MspInit+0x252>
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8007390:	2200      	movs	r2, #0
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8007392:	6625      	str	r5, [r4, #96]	; 0x60
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8007394:	2034      	movs	r0, #52	; 0x34
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8007396:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8007398:	4611      	mov	r1, r2
 800739a:	f7fa f921 	bl	80015e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800739e:	2034      	movs	r0, #52	; 0x34
 80073a0:	f7fa f958 	bl	8001654 <HAL_NVIC_EnableIRQ>
 80073a4:	e748      	b.n	8007238 <HAL_UART_MspInit+0x34>
    __HAL_RCC_USART1_CLK_ENABLE();
 80073a6:	4b3d      	ldr	r3, [pc, #244]	; (800749c <HAL_UART_MspInit+0x298>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80073a8:	f44f 60c0 	mov.w	r0, #1536	; 0x600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073ac:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073ae:	2500      	movs	r5, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 80073b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073b2:	f04f 0e03 	mov.w	lr, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80073b6:	2707      	movs	r7, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073b8:	a907      	add	r1, sp, #28
    __HAL_RCC_USART1_CLK_ENABLE();
 80073ba:	f042 0210 	orr.w	r2, r2, #16
 80073be:	645a      	str	r2, [r3, #68]	; 0x44
 80073c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80073c2:	9007      	str	r0, [sp, #28]
    __HAL_RCC_USART1_CLK_ENABLE();
 80073c4:	f003 0310 	and.w	r3, r3, #16
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073c8:	483c      	ldr	r0, [pc, #240]	; (80074bc <HAL_UART_MspInit+0x2b8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073ca:	9608      	str	r6, [sp, #32]
    __HAL_RCC_USART1_CLK_ENABLE();
 80073cc:	9304      	str	r3, [sp, #16]
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80073ce:	4e3c      	ldr	r6, [pc, #240]	; (80074c0 <HAL_UART_MspInit+0x2bc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80073d0:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80073d2:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073d4:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073d6:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073da:	f7fa faed 	bl	80019b8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80073de:	4f39      	ldr	r7, [pc, #228]	; (80074c4 <HAL_UART_MspInit+0x2c0>)
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80073e0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80073e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80073e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80073ec:	4630      	mov	r0, r6
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80073ee:	60b5      	str	r5, [r6, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80073f0:	60f5      	str	r5, [r6, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80073f2:	6175      	str	r5, [r6, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80073f4:	61b5      	str	r5, [r6, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80073f6:	61f5      	str	r5, [r6, #28]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80073f8:	6275      	str	r5, [r6, #36]	; 0x24
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80073fa:	6037      	str	r7, [r6, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80073fc:	6071      	str	r1, [r6, #4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80073fe:	6132      	str	r2, [r6, #16]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8007400:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007402:	f7fa f957 	bl	80016b4 <HAL_DMA_Init>
 8007406:	2800      	cmp	r0, #0
 8007408:	d135      	bne.n	8007476 <HAL_UART_MspInit+0x272>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800740a:	4d2f      	ldr	r5, [pc, #188]	; (80074c8 <HAL_UART_MspInit+0x2c4>)
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800740c:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800740e:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8007412:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 80074d8 <HAL_UART_MspInit+0x2d4>
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007416:	2740      	movs	r7, #64	; 0x40
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007418:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800741c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8007420:	6666      	str	r6, [r4, #100]	; 0x64
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007422:	4628      	mov	r0, r5
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8007424:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007426:	60af      	str	r7, [r5, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007428:	6129      	str	r1, [r5, #16]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800742a:	622a      	str	r2, [r5, #32]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800742c:	60eb      	str	r3, [r5, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800742e:	616b      	str	r3, [r5, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007430:	61ab      	str	r3, [r5, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8007432:	61eb      	str	r3, [r5, #28]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007434:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8007436:	e885 5000 	stmia.w	r5, {ip, lr}
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800743a:	f7fa f93b 	bl	80016b4 <HAL_DMA_Init>
 800743e:	b978      	cbnz	r0, 8007460 <HAL_UART_MspInit+0x25c>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8007440:	6625      	str	r5, [r4, #96]	; 0x60
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8007442:	2200      	movs	r2, #0
 8007444:	2105      	movs	r1, #5
 8007446:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8007448:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800744a:	f7fa f8c9 	bl	80015e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800744e:	2025      	movs	r0, #37	; 0x25
 8007450:	f7fa f900 	bl	8001654 <HAL_NVIC_EnableIRQ>
 8007454:	e6f0      	b.n	8007238 <HAL_UART_MspInit+0x34>
      _Error_Handler(__FILE__, __LINE__);
 8007456:	21fe      	movs	r1, #254	; 0xfe
 8007458:	481c      	ldr	r0, [pc, #112]	; (80074cc <HAL_UART_MspInit+0x2c8>)
 800745a:	f7ff fbf1 	bl	8006c40 <_Error_Handler>
 800745e:	e797      	b.n	8007390 <HAL_UART_MspInit+0x18c>
      _Error_Handler(__FILE__, __LINE__);
 8007460:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8007464:	4819      	ldr	r0, [pc, #100]	; (80074cc <HAL_UART_MspInit+0x2c8>)
 8007466:	f7ff fbeb 	bl	8006c40 <_Error_Handler>
 800746a:	e7e9      	b.n	8007440 <HAL_UART_MspInit+0x23c>
      _Error_Handler(__FILE__, __LINE__);
 800746c:	21ec      	movs	r1, #236	; 0xec
 800746e:	4817      	ldr	r0, [pc, #92]	; (80074cc <HAL_UART_MspInit+0x2c8>)
 8007470:	f7ff fbe6 	bl	8006c40 <_Error_Handler>
 8007474:	e771      	b.n	800735a <HAL_UART_MspInit+0x156>
      _Error_Handler(__FILE__, __LINE__);
 8007476:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800747a:	4814      	ldr	r0, [pc, #80]	; (80074cc <HAL_UART_MspInit+0x2c8>)
 800747c:	f7ff fbe0 	bl	8006c40 <_Error_Handler>
 8007480:	e7c3      	b.n	800740a <HAL_UART_MspInit+0x206>
 8007482:	bf00      	nop
 8007484:	40004c00 	.word	0x40004c00
 8007488:	40005000 	.word	0x40005000
 800748c:	40007800 	.word	0x40007800
 8007490:	40011000 	.word	0x40011000
 8007494:	40004400 	.word	0x40004400
 8007498:	40004800 	.word	0x40004800
 800749c:	40023800 	.word	0x40023800
 80074a0:	40020c00 	.word	0x40020c00
 80074a4:	20004bf0 	.word	0x20004bf0
 80074a8:	40026028 	.word	0x40026028
 80074ac:	20004cc0 	.word	0x20004cc0
 80074b0:	20004b20 	.word	0x20004b20
 80074b4:	40026040 	.word	0x40026040
 80074b8:	20004fa0 	.word	0x20004fa0
 80074bc:	40020000 	.word	0x40020000
 80074c0:	20004df0 	.word	0x20004df0
 80074c4:	40026440 	.word	0x40026440
 80074c8:	20004d20 	.word	0x20004d20
 80074cc:	080084d8 	.word	0x080084d8
 80074d0:	40026058 	.word	0x40026058
 80074d4:	40026070 	.word	0x40026070
 80074d8:	400264b8 	.word	0x400264b8
    __HAL_RCC_UART5_CLK_ENABLE();
 80074dc:	4b34      	ldr	r3, [pc, #208]	; (80075b0 <HAL_UART_MspInit+0x3ac>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80074de:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074e2:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074e4:	2600      	movs	r6, #0
    __HAL_RCC_UART5_CLK_ENABLE();
 80074e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074e8:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80074ea:	2408      	movs	r4, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80074ec:	a907      	add	r1, sp, #28
    __HAL_RCC_UART5_CLK_ENABLE();
 80074ee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80074f2:	641a      	str	r2, [r3, #64]	; 0x40
 80074f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80074f6:	9007      	str	r0, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80074f8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    __HAL_RCC_UART5_CLK_ENABLE();
 80074fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007500:	9708      	str	r7, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007502:	f500 30fc 	add.w	r0, r0, #129024	; 0x1f800
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007506:	9609      	str	r6, [sp, #36]	; 0x24
    __HAL_RCC_UART5_CLK_ENABLE();
 8007508:	9302      	str	r3, [sp, #8]
 800750a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800750c:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800750e:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007510:	f7fa fa52 	bl	80019b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007514:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007516:	a907      	add	r1, sp, #28
 8007518:	4826      	ldr	r0, [pc, #152]	; (80075b4 <HAL_UART_MspInit+0x3b0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800751a:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800751c:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800751e:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8007520:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007522:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007524:	f7fa fa48 	bl	80019b8 <HAL_GPIO_Init>
 8007528:	e686      	b.n	8007238 <HAL_UART_MspInit+0x34>
    __HAL_RCC_UART7_CLK_ENABLE();
 800752a:	4b21      	ldr	r3, [pc, #132]	; (80075b0 <HAL_UART_MspInit+0x3ac>)
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800752c:	f44f 7ec0 	mov.w	lr, #384	; 0x180
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007530:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007532:	2600      	movs	r6, #0
    __HAL_RCC_UART7_CLK_ENABLE();
 8007534:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007536:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8007538:	2408      	movs	r4, #8
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800753a:	a907      	add	r1, sp, #28
    __HAL_RCC_UART7_CLK_ENABLE();
 800753c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007540:	481d      	ldr	r0, [pc, #116]	; (80075b8 <HAL_UART_MspInit+0x3b4>)
    __HAL_RCC_UART7_CLK_ENABLE();
 8007542:	641a      	str	r2, [r3, #64]	; 0x40
 8007544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8007546:	f8cd e01c 	str.w	lr, [sp, #28]
    __HAL_RCC_UART7_CLK_ENABLE();
 800754a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800754e:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007550:	9609      	str	r6, [sp, #36]	; 0x24
    __HAL_RCC_UART7_CLK_ENABLE();
 8007552:	9303      	str	r3, [sp, #12]
 8007554:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007556:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8007558:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800755a:	f7fa fa2d 	bl	80019b8 <HAL_GPIO_Init>
 800755e:	e66b      	b.n	8007238 <HAL_UART_MspInit+0x34>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007560:	4b13      	ldr	r3, [pc, #76]	; (80075b0 <HAL_UART_MspInit+0x3ac>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007562:	f04f 0e60 	mov.w	lr, #96	; 0x60
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007566:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007568:	2600      	movs	r6, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 800756a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800756c:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800756e:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007570:	a907      	add	r1, sp, #28
    __HAL_RCC_USART2_CLK_ENABLE();
 8007572:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007576:	480f      	ldr	r0, [pc, #60]	; (80075b4 <HAL_UART_MspInit+0x3b0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8007578:	641a      	str	r2, [r3, #64]	; 0x40
 800757a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800757c:	f8cd e01c 	str.w	lr, [sp, #28]
    __HAL_RCC_USART2_CLK_ENABLE();
 8007580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007584:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007586:	9609      	str	r6, [sp, #36]	; 0x24
    __HAL_RCC_USART2_CLK_ENABLE();
 8007588:	9305      	str	r3, [sp, #20]
 800758a:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800758c:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800758e:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007590:	f7fa fa12 	bl	80019b8 <HAL_GPIO_Init>
 8007594:	e650      	b.n	8007238 <HAL_UART_MspInit+0x34>
      _Error_Handler(__FILE__, __LINE__);
 8007596:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 800759a:	4808      	ldr	r0, [pc, #32]	; (80075bc <HAL_UART_MspInit+0x3b8>)
 800759c:	f7ff fb50 	bl	8006c40 <_Error_Handler>
 80075a0:	e69c      	b.n	80072dc <HAL_UART_MspInit+0xd8>
      _Error_Handler(__FILE__, __LINE__);
 80075a2:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80075a6:	4805      	ldr	r0, [pc, #20]	; (80075bc <HAL_UART_MspInit+0x3b8>)
 80075a8:	f7ff fb4a 	bl	8006c40 <_Error_Handler>
 80075ac:	e679      	b.n	80072a2 <HAL_UART_MspInit+0x9e>
 80075ae:	bf00      	nop
 80075b0:	40023800 	.word	0x40023800
 80075b4:	40020c00 	.word	0x40020c00
 80075b8:	40021000 	.word	0x40021000
 80075bc:	080084d8 	.word	0x080084d8

080075c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80075c0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 80075c2:	4c09      	ldr	r4, [pc, #36]	; (80075e8 <MX_USB_DEVICE_Init+0x28>)
 80075c4:	2200      	movs	r2, #0
 80075c6:	4909      	ldr	r1, [pc, #36]	; (80075ec <MX_USB_DEVICE_Init+0x2c>)
 80075c8:	4620      	mov	r0, r4
 80075ca:	f7fd fe37 	bl	800523c <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 80075ce:	4620      	mov	r0, r4
 80075d0:	4907      	ldr	r1, [pc, #28]	; (80075f0 <MX_USB_DEVICE_Init+0x30>)
 80075d2:	f7fd fe49 	bl	8005268 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 80075d6:	4620      	mov	r0, r4
 80075d8:	4906      	ldr	r1, [pc, #24]	; (80075f4 <MX_USB_DEVICE_Init+0x34>)
 80075da:	f7fd fe01 	bl	80051e0 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 80075de:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80075e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 80075e4:	f7fd be48 	b.w	8005278 <USBD_Start>
 80075e8:	20005000 	.word	0x20005000
 80075ec:	20000130 	.word	0x20000130
 80075f0:	20000008 	.word	0x20000008
 80075f4:	20000120 	.word	0x20000120

080075f8 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80075f8:	2000      	movs	r0, #0
 80075fa:	4770      	bx	lr

080075fc <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80075fc:	2000      	movs	r0, #0
 80075fe:	4770      	bx	lr

08007600 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007600:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007602:	4c05      	ldr	r4, [pc, #20]	; (8007618 <CDC_Receive_FS+0x18>)
 8007604:	4601      	mov	r1, r0
 8007606:	4620      	mov	r0, r4
 8007608:	f7fd fdfa 	bl	8005200 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800760c:	4620      	mov	r0, r4
 800760e:	f7fd fdfd 	bl	800520c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8007612:	2000      	movs	r0, #0
 8007614:	bd10      	pop	{r4, pc}
 8007616:	bf00      	nop
 8007618:	20005000 	.word	0x20005000

0800761c <CDC_Init_FS>:
{
 800761c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800761e:	4c06      	ldr	r4, [pc, #24]	; (8007638 <CDC_Init_FS+0x1c>)
 8007620:	2200      	movs	r2, #0
 8007622:	4906      	ldr	r1, [pc, #24]	; (800763c <CDC_Init_FS+0x20>)
 8007624:	4620      	mov	r0, r4
 8007626:	f7fd fde3 	bl	80051f0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800762a:	4620      	mov	r0, r4
 800762c:	4904      	ldr	r1, [pc, #16]	; (8007640 <CDC_Init_FS+0x24>)
 800762e:	f7fd fde7 	bl	8005200 <USBD_CDC_SetRxBuffer>
}
 8007632:	2000      	movs	r0, #0
 8007634:	bd10      	pop	{r4, pc}
 8007636:	bf00      	nop
 8007638:	20005000 	.word	0x20005000
 800763c:	20005a24 	.word	0x20005a24
 8007640:	20005224 	.word	0x20005224

08007644 <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8007644:	6803      	ldr	r3, [r0, #0]
 8007646:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800764a:	d000      	beq.n	800764e <HAL_PCD_MspInit+0xa>
 800764c:	4770      	bx	lr
{
 800764e:	b570      	push	{r4, r5, r6, lr}
 8007650:	b088      	sub	sp, #32
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007652:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007654:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007656:	230a      	movs	r3, #10
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007658:	f44f 56c0 	mov.w	r6, #6144	; 0x1800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800765c:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800765e:	a903      	add	r1, sp, #12
 8007660:	4812      	ldr	r0, [pc, #72]	; (80076ac <HAL_PCD_MspInit+0x68>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007662:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007664:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007666:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007668:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800766a:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800766c:	f7fa f9a4 	bl	80019b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007670:	4b0f      	ldr	r3, [pc, #60]	; (80076b0 <HAL_PCD_MspInit+0x6c>)

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8007672:	4622      	mov	r2, r4
 8007674:	2105      	movs	r1, #5
 8007676:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007678:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800767a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800767e:	635c      	str	r4, [r3, #52]	; 0x34
 8007680:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8007682:	f004 0480 	and.w	r4, r4, #128	; 0x80
 8007686:	9401      	str	r4, [sp, #4]
 8007688:	9c01      	ldr	r4, [sp, #4]
 800768a:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800768c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8007690:	645c      	str	r4, [r3, #68]	; 0x44
 8007692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007698:	9302      	str	r3, [sp, #8]
 800769a:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800769c:	f7f9 ffa0 	bl	80015e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80076a0:	2043      	movs	r0, #67	; 0x43
 80076a2:	f7f9 ffd7 	bl	8001654 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80076a6:	b008      	add	sp, #32
 80076a8:	bd70      	pop	{r4, r5, r6, pc}
 80076aa:	bf00      	nop
 80076ac:	40020000 	.word	0x40020000
 80076b0:	40023800 	.word	0x40023800

080076b4 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80076b4:	f500 716f 	add.w	r1, r0, #956	; 0x3bc
 80076b8:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 80076bc:	f7fd bdf4 	b.w	80052a8 <USBD_LL_SetupStage>

080076c0 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80076c0:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80076c4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80076c8:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 80076cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076d0:	f7fd be1a 	b.w	8005308 <USBD_LL_DataOutStage>

080076d4 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80076d4:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80076d8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80076dc:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 80076e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076e2:	f7fd be45 	b.w	8005370 <USBD_LL_DataInStage>
 80076e6:	bf00      	nop

080076e8 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80076e8:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 80076ec:	f7fd bec6 	b.w	800547c <USBD_LL_SOF>

080076f0 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 80076f0:	68c1      	ldr	r1, [r0, #12]
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80076f2:	3100      	adds	r1, #0
{ 
 80076f4:	b510      	push	{r4, lr}
 80076f6:	4604      	mov	r4, r0
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80076f8:	bf18      	it	ne
 80076fa:	2101      	movne	r1, #1
 80076fc:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8007700:	f7fd fea6 	bl	8005450 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007704:	f8d4 03fc 	ldr.w	r0, [r4, #1020]	; 0x3fc
}
 8007708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800770c:	f7fd be80 	b.w	8005410 <USBD_LL_Reset>

08007710 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8007710:	b510      	push	{r4, lr}
 8007712:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007714:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8007718:	f7fd fe9e 	bl	8005458 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800771c:	6822      	ldr	r2, [r4, #0]
 800771e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8007722:	f043 0301 	orr.w	r3, r3, #1
 8007726:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800772a:	6a23      	ldr	r3, [r4, #32]
 800772c:	b123      	cbz	r3, 8007738 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800772e:	4a03      	ldr	r2, [pc, #12]	; (800773c <HAL_PCD_SuspendCallback+0x2c>)
 8007730:	6913      	ldr	r3, [r2, #16]
 8007732:	f043 0306 	orr.w	r3, r3, #6
 8007736:	6113      	str	r3, [r2, #16]
 8007738:	bd10      	pop	{r4, pc}
 800773a:	bf00      	nop
 800773c:	e000ed00 	.word	0xe000ed00

08007740 <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007740:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8007744:	f7fd be92 	b.w	800546c <USBD_LL_Resume>

08007748 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007748:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 800774c:	f7fd bea6 	b.w	800549c <USBD_LL_IsoOUTIncomplete>

08007750 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007750:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8007754:	f7fd bea0 	b.w	8005498 <USBD_LL_IsoINIncomplete>

08007758 <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007758:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 800775c:	f7fd bea0 	b.w	80054a0 <USBD_LL_DevConnected>

08007760 <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007760:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8007764:	f7fd be9e 	b.w	80054a4 <USBD_LL_DevDisconnected>

08007768 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007768:	7802      	ldrb	r2, [r0, #0]
 800776a:	b10a      	cbz	r2, 8007770 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 800776c:	2000      	movs	r0, #0
 800776e:	4770      	bx	lr
  hpcd_USB_OTG_FS.pData = pdev;
 8007770:	4b17      	ldr	r3, [pc, #92]	; (80077d0 <USBD_LL_Init+0x68>)
 8007772:	4601      	mov	r1, r0
{
 8007774:	b570      	push	{r4, r5, r6, lr}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007776:	2402      	movs	r4, #2
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007778:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800777c:	2506      	movs	r5, #6
  hpcd_USB_OTG_FS.pData = pdev;
 800777e:	f8c3 03fc 	str.w	r0, [r3, #1020]	; 0x3fc
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007782:	4618      	mov	r0, r3
  pdev->pData = &hpcd_USB_OTG_FS;
 8007784:	f8c1 3220 	str.w	r3, [r1, #544]	; 0x220
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007788:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 800778a:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800778c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800778e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007790:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007792:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007794:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007796:	601e      	str	r6, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007798:	605d      	str	r5, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800779a:	60dc      	str	r4, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800779c:	619c      	str	r4, [r3, #24]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800779e:	f7fa fa55 	bl	8001c4c <HAL_PCD_Init>
 80077a2:	b978      	cbnz	r0, 80077c4 <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80077a4:	2180      	movs	r1, #128	; 0x80
 80077a6:	480a      	ldr	r0, [pc, #40]	; (80077d0 <USBD_LL_Init+0x68>)
 80077a8:	f7fb f938 	bl	8002a1c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80077ac:	2240      	movs	r2, #64	; 0x40
 80077ae:	2100      	movs	r1, #0
 80077b0:	4807      	ldr	r0, [pc, #28]	; (80077d0 <USBD_LL_Init+0x68>)
 80077b2:	f7fb f90d 	bl	80029d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80077b6:	2280      	movs	r2, #128	; 0x80
 80077b8:	2101      	movs	r1, #1
 80077ba:	4805      	ldr	r0, [pc, #20]	; (80077d0 <USBD_LL_Init+0x68>)
 80077bc:	f7fb f908 	bl	80029d0 <HAL_PCDEx_SetTxFiFo>
}
 80077c0:	2000      	movs	r0, #0
 80077c2:	bd70      	pop	{r4, r5, r6, pc}
    _Error_Handler(__FILE__, __LINE__);
 80077c4:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80077c8:	4802      	ldr	r0, [pc, #8]	; (80077d4 <USBD_LL_Init+0x6c>)
 80077ca:	f7ff fa39 	bl	8006c40 <_Error_Handler>
 80077ce:	e7e9      	b.n	80077a4 <USBD_LL_Init+0x3c>
 80077d0:	20006224 	.word	0x20006224
 80077d4:	080084ec 	.word	0x080084ec

080077d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80077d8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80077da:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80077de:	f7fa fc51 	bl	8002084 <HAL_PCD_Start>
 80077e2:	2803      	cmp	r0, #3
 80077e4:	d802      	bhi.n	80077ec <USBD_LL_Start+0x14>
 80077e6:	4b02      	ldr	r3, [pc, #8]	; (80077f0 <USBD_LL_Start+0x18>)
 80077e8:	5c18      	ldrb	r0, [r3, r0]
 80077ea:	bd08      	pop	{r3, pc}
 80077ec:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80077ee:	bd08      	pop	{r3, pc}
 80077f0:	080084e8 	.word	0x080084e8

080077f4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80077f4:	b510      	push	{r4, lr}
 80077f6:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80077f8:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80077fc:	4613      	mov	r3, r2
 80077fe:	4622      	mov	r2, r4
 8007800:	f7fa ffc0 	bl	8002784 <HAL_PCD_EP_Open>
 8007804:	2803      	cmp	r0, #3
 8007806:	d802      	bhi.n	800780e <USBD_LL_OpenEP+0x1a>
 8007808:	4b02      	ldr	r3, [pc, #8]	; (8007814 <USBD_LL_OpenEP+0x20>)
 800780a:	5c18      	ldrb	r0, [r3, r0]
 800780c:	bd10      	pop	{r4, pc}
 800780e:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8007810:	bd10      	pop	{r4, pc}
 8007812:	bf00      	nop
 8007814:	080084e8 	.word	0x080084e8

08007818 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007818:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800781a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800781e:	f7fa fff7 	bl	8002810 <HAL_PCD_EP_Close>
 8007822:	2803      	cmp	r0, #3
 8007824:	d802      	bhi.n	800782c <USBD_LL_CloseEP+0x14>
 8007826:	4b02      	ldr	r3, [pc, #8]	; (8007830 <USBD_LL_CloseEP+0x18>)
 8007828:	5c18      	ldrb	r0, [r3, r0]
 800782a:	bd08      	pop	{r3, pc}
 800782c:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 800782e:	bd08      	pop	{r3, pc}
 8007830:	080084e8 	.word	0x080084e8

08007834 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007834:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007836:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800783a:	f7fb f865 	bl	8002908 <HAL_PCD_EP_SetStall>
 800783e:	2803      	cmp	r0, #3
 8007840:	d802      	bhi.n	8007848 <USBD_LL_StallEP+0x14>
 8007842:	4b02      	ldr	r3, [pc, #8]	; (800784c <USBD_LL_StallEP+0x18>)
 8007844:	5c18      	ldrb	r0, [r3, r0]
 8007846:	bd08      	pop	{r3, pc}
 8007848:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 800784a:	bd08      	pop	{r3, pc}
 800784c:	080084e8 	.word	0x080084e8

08007850 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007850:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8007852:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8007856:	f7fb f88d 	bl	8002974 <HAL_PCD_EP_ClrStall>
 800785a:	2803      	cmp	r0, #3
 800785c:	d802      	bhi.n	8007864 <USBD_LL_ClearStallEP+0x14>
 800785e:	4b02      	ldr	r3, [pc, #8]	; (8007868 <USBD_LL_ClearStallEP+0x18>)
 8007860:	5c18      	ldrb	r0, [r3, r0]
 8007862:	bd08      	pop	{r3, pc}
 8007864:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8007866:	bd08      	pop	{r3, pc}
 8007868:	080084e8 	.word	0x080084e8

0800786c <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 800786c:	060b      	lsls	r3, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800786e:	f8d0 2220 	ldr.w	r2, [r0, #544]	; 0x220
  if((ep_addr & 0x80) == 0x80)
 8007872:	d406      	bmi.n	8007882 <USBD_LL_IsStallEP+0x16>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007874:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007878:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800787c:	f891 01fa 	ldrb.w	r0, [r1, #506]	; 0x1fa
  }
}
 8007880:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007882:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8007886:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800788a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800788e:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
 8007892:	4770      	bx	lr

08007894 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007894:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007896:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800789a:	f7fa ff61 	bl	8002760 <HAL_PCD_SetAddress>
 800789e:	2803      	cmp	r0, #3
 80078a0:	d802      	bhi.n	80078a8 <USBD_LL_SetUSBAddress+0x14>
 80078a2:	4b02      	ldr	r3, [pc, #8]	; (80078ac <USBD_LL_SetUSBAddress+0x18>)
 80078a4:	5c18      	ldrb	r0, [r3, r0]
 80078a6:	bd08      	pop	{r3, pc}
 80078a8:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 80078aa:	bd08      	pop	{r3, pc}
 80078ac:	080084e8 	.word	0x080084e8

080078b0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80078b0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80078b2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80078b6:	f7fb f803 	bl	80028c0 <HAL_PCD_EP_Transmit>
 80078ba:	2803      	cmp	r0, #3
 80078bc:	d802      	bhi.n	80078c4 <USBD_LL_Transmit+0x14>
 80078be:	4b02      	ldr	r3, [pc, #8]	; (80078c8 <USBD_LL_Transmit+0x18>)
 80078c0:	5c18      	ldrb	r0, [r3, r0]
 80078c2:	bd08      	pop	{r3, pc}
 80078c4:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 80078c6:	bd08      	pop	{r3, pc}
 80078c8:	080084e8 	.word	0x080084e8

080078cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80078cc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80078ce:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80078d2:	f7fa ffc3 	bl	800285c <HAL_PCD_EP_Receive>
 80078d6:	2803      	cmp	r0, #3
 80078d8:	d802      	bhi.n	80078e0 <USBD_LL_PrepareReceive+0x14>
 80078da:	4b02      	ldr	r3, [pc, #8]	; (80078e4 <USBD_LL_PrepareReceive+0x18>)
 80078dc:	5c18      	ldrb	r0, [r3, r0]
 80078de:	bd08      	pop	{r3, pc}
 80078e0:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 80078e2:	bd08      	pop	{r3, pc}
 80078e4:	080084e8 	.word	0x080084e8

080078e8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078e8:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80078ea:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80078ee:	f7fa ffdd 	bl	80028ac <HAL_PCD_EP_GetRxCount>
}
 80078f2:	bd08      	pop	{r3, pc}

080078f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80078f4:	b510      	push	{r4, lr}
 80078f6:	4604      	mov	r4, r0
  switch (msg)
 80078f8:	b1a9      	cbz	r1, 8007926 <HAL_PCDEx_LPM_Callback+0x32>
 80078fa:	2901      	cmp	r1, #1
 80078fc:	d112      	bne.n	8007924 <HAL_PCDEx_LPM_Callback+0x30>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
    USBD_LL_Resume(hpcd->pData);
    break;
    
  case PCD_LPM_L1_ACTIVE:
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80078fe:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007900:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007904:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8007908:	f043 0301 	orr.w	r3, r3, #1
 800790c:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 8007910:	f7fd fda2 	bl	8005458 <USBD_LL_Suspend>
    
    /* Enter in STOP mode. */
    if (hpcd->Init.low_power_enable)
 8007914:	6a23      	ldr	r3, [r4, #32]
 8007916:	b123      	cbz	r3, 8007922 <HAL_PCDEx_LPM_Callback+0x2e>
    {   
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007918:	4a0e      	ldr	r2, [pc, #56]	; (8007954 <HAL_PCDEx_LPM_Callback+0x60>)
 800791a:	6913      	ldr	r3, [r2, #16]
 800791c:	f043 0306 	orr.w	r3, r3, #6
 8007920:	6113      	str	r3, [r2, #16]
 8007922:	bd10      	pop	{r4, pc}
 8007924:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8007926:	6a03      	ldr	r3, [r0, #32]
 8007928:	b133      	cbz	r3, 8007938 <HAL_PCDEx_LPM_Callback+0x44>
      SystemClock_Config();
 800792a:	f7ff f8f7 	bl	8006b1c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800792e:	4a09      	ldr	r2, [pc, #36]	; (8007954 <HAL_PCDEx_LPM_Callback+0x60>)
 8007930:	6913      	ldr	r3, [r2, #16]
 8007932:	f023 0306 	bic.w	r3, r3, #6
 8007936:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007938:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 800793a:	f8d4 03fc 	ldr.w	r0, [r4, #1020]	; 0x3fc
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800793e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8007942:	f023 0301 	bic.w	r3, r3, #1
    }
    break;   
  }
}
 8007946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800794a:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 800794e:	f7fd bd8d 	b.w	800546c <USBD_LL_Resume>
 8007952:	bf00      	nop
 8007954:	e000ed00 	.word	0xe000ed00

08007958 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8007958:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800795a:	4801      	ldr	r0, [pc, #4]	; (8007960 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800795c:	800b      	strh	r3, [r1, #0]
}
 800795e:	4770      	bx	lr
 8007960:	2000015c 	.word	0x2000015c

08007964 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8007964:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8007966:	4801      	ldr	r0, [pc, #4]	; (800796c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8007968:	800b      	strh	r3, [r1, #0]
}
 800796a:	4770      	bx	lr
 800796c:	20000170 	.word	0x20000170

08007970 <USBD_FS_USR_BOSDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_BOSDesc);
 8007970:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 8007972:	4801      	ldr	r0, [pc, #4]	; (8007978 <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 8007974:	800b      	strh	r3, [r1, #0]
}
 8007976:	4770      	bx	lr
 8007978:	20000150 	.word	0x20000150

0800797c <USBD_FS_ManufacturerStrDescriptor>:
{
 800797c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800797e:	4c04      	ldr	r4, [pc, #16]	; (8007990 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8007980:	460a      	mov	r2, r1
 8007982:	4804      	ldr	r0, [pc, #16]	; (8007994 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8007984:	4621      	mov	r1, r4
 8007986:	f7fd ff9d 	bl	80058c4 <USBD_GetString>
}
 800798a:	4620      	mov	r0, r4
 800798c:	bd10      	pop	{r4, pc}
 800798e:	bf00      	nop
 8007990:	20006624 	.word	0x20006624
 8007994:	0800851c 	.word	0x0800851c

08007998 <USBD_FS_ProductStrDescriptor>:
{
 8007998:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800799a:	4c04      	ldr	r4, [pc, #16]	; (80079ac <USBD_FS_ProductStrDescriptor+0x14>)
 800799c:	460a      	mov	r2, r1
 800799e:	4804      	ldr	r0, [pc, #16]	; (80079b0 <USBD_FS_ProductStrDescriptor+0x18>)
 80079a0:	4621      	mov	r1, r4
 80079a2:	f7fd ff8f 	bl	80058c4 <USBD_GetString>
}
 80079a6:	4620      	mov	r0, r4
 80079a8:	bd10      	pop	{r4, pc}
 80079aa:	bf00      	nop
 80079ac:	20006624 	.word	0x20006624
 80079b0:	08008520 	.word	0x08008520

080079b4 <USBD_FS_SerialStrDescriptor>:
{
 80079b4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 80079b6:	4c04      	ldr	r4, [pc, #16]	; (80079c8 <USBD_FS_SerialStrDescriptor+0x14>)
 80079b8:	460a      	mov	r2, r1
 80079ba:	4804      	ldr	r0, [pc, #16]	; (80079cc <USBD_FS_SerialStrDescriptor+0x18>)
 80079bc:	4621      	mov	r1, r4
 80079be:	f7fd ff81 	bl	80058c4 <USBD_GetString>
}
 80079c2:	4620      	mov	r0, r4
 80079c4:	bd10      	pop	{r4, pc}
 80079c6:	bf00      	nop
 80079c8:	20006624 	.word	0x20006624
 80079cc:	0800852c 	.word	0x0800852c

080079d0 <USBD_FS_ConfigStrDescriptor>:
{
 80079d0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80079d2:	4c04      	ldr	r4, [pc, #16]	; (80079e4 <USBD_FS_ConfigStrDescriptor+0x14>)
 80079d4:	460a      	mov	r2, r1
 80079d6:	4804      	ldr	r0, [pc, #16]	; (80079e8 <USBD_FS_ConfigStrDescriptor+0x18>)
 80079d8:	4621      	mov	r1, r4
 80079da:	f7fd ff73 	bl	80058c4 <USBD_GetString>
}
 80079de:	4620      	mov	r0, r4
 80079e0:	bd10      	pop	{r4, pc}
 80079e2:	bf00      	nop
 80079e4:	20006624 	.word	0x20006624
 80079e8:	08008500 	.word	0x08008500

080079ec <USBD_FS_InterfaceStrDescriptor>:
{
 80079ec:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079ee:	4c04      	ldr	r4, [pc, #16]	; (8007a00 <USBD_FS_InterfaceStrDescriptor+0x14>)
 80079f0:	460a      	mov	r2, r1
 80079f2:	4804      	ldr	r0, [pc, #16]	; (8007a04 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80079f4:	4621      	mov	r1, r4
 80079f6:	f7fd ff65 	bl	80058c4 <USBD_GetString>
}
 80079fa:	4620      	mov	r0, r4
 80079fc:	bd10      	pop	{r4, pc}
 80079fe:	bf00      	nop
 8007a00:	20006624 	.word	0x20006624
 8007a04:	0800850c 	.word	0x0800850c

08007a08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007a08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007a40 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007a0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007a0e:	e003      	b.n	8007a18 <LoopCopyDataInit>

08007a10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007a10:	4b0c      	ldr	r3, [pc, #48]	; (8007a44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007a12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007a14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007a16:	3104      	adds	r1, #4

08007a18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007a18:	480b      	ldr	r0, [pc, #44]	; (8007a48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007a1a:	4b0c      	ldr	r3, [pc, #48]	; (8007a4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007a1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007a1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007a20:	d3f6      	bcc.n	8007a10 <CopyDataInit>
  ldr  r2, =_sbss
 8007a22:	4a0b      	ldr	r2, [pc, #44]	; (8007a50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007a24:	e002      	b.n	8007a2c <LoopFillZerobss>

08007a26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007a26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007a28:	f842 3b04 	str.w	r3, [r2], #4

08007a2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007a2c:	4b09      	ldr	r3, [pc, #36]	; (8007a54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007a2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007a30:	d3f9      	bcc.n	8007a26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007a32:	f7ff fa0d 	bl	8006e50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007a36:	f000 f81d 	bl	8007a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007a3a:	f7ff f8e1 	bl	8006c00 <main>
  bx  lr    
 8007a3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007a40:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8007a44:	08008700 	.word	0x08008700
  ldr  r0, =_sdata
 8007a48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007a4c:	2000067c 	.word	0x2000067c
  ldr  r2, =_sbss
 8007a50:	2000067c 	.word	0x2000067c
  ldr  r3, = _ebss
 8007a54:	20006834 	.word	0x20006834

08007a58 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007a58:	e7fe      	b.n	8007a58 <CAN1_RX0_IRQHandler>
	...

08007a5c <__aeabi_atexit>:
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	4601      	mov	r1, r0
 8007a60:	4618      	mov	r0, r3
 8007a62:	f000 b801 	b.w	8007a68 <__cxa_atexit>
 8007a66:	bf00      	nop

08007a68 <__cxa_atexit>:
 8007a68:	4613      	mov	r3, r2
 8007a6a:	460a      	mov	r2, r1
 8007a6c:	4601      	mov	r1, r0
 8007a6e:	2002      	movs	r0, #2
 8007a70:	f000 ba72 	b.w	8007f58 <__register_exitproc>

08007a74 <__libc_init_array>:
 8007a74:	b570      	push	{r4, r5, r6, lr}
 8007a76:	4e0d      	ldr	r6, [pc, #52]	; (8007aac <__libc_init_array+0x38>)
 8007a78:	4c0d      	ldr	r4, [pc, #52]	; (8007ab0 <__libc_init_array+0x3c>)
 8007a7a:	1ba4      	subs	r4, r4, r6
 8007a7c:	10a4      	asrs	r4, r4, #2
 8007a7e:	2500      	movs	r5, #0
 8007a80:	42a5      	cmp	r5, r4
 8007a82:	d109      	bne.n	8007a98 <__libc_init_array+0x24>
 8007a84:	4e0b      	ldr	r6, [pc, #44]	; (8007ab4 <__libc_init_array+0x40>)
 8007a86:	4c0c      	ldr	r4, [pc, #48]	; (8007ab8 <__libc_init_array+0x44>)
 8007a88:	f000 fc5c 	bl	8008344 <_init>
 8007a8c:	1ba4      	subs	r4, r4, r6
 8007a8e:	10a4      	asrs	r4, r4, #2
 8007a90:	2500      	movs	r5, #0
 8007a92:	42a5      	cmp	r5, r4
 8007a94:	d105      	bne.n	8007aa2 <__libc_init_array+0x2e>
 8007a96:	bd70      	pop	{r4, r5, r6, pc}
 8007a98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a9c:	4798      	blx	r3
 8007a9e:	3501      	adds	r5, #1
 8007aa0:	e7ee      	b.n	8007a80 <__libc_init_array+0xc>
 8007aa2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007aa6:	4798      	blx	r3
 8007aa8:	3501      	adds	r5, #1
 8007aaa:	e7f2      	b.n	8007a92 <__libc_init_array+0x1e>
 8007aac:	080086f4 	.word	0x080086f4
 8007ab0:	080086f4 	.word	0x080086f4
 8007ab4:	080086f4 	.word	0x080086f4
 8007ab8:	080086fc 	.word	0x080086fc

08007abc <malloc>:
 8007abc:	4b02      	ldr	r3, [pc, #8]	; (8007ac8 <malloc+0xc>)
 8007abe:	4601      	mov	r1, r0
 8007ac0:	6818      	ldr	r0, [r3, #0]
 8007ac2:	f000 b80b 	b.w	8007adc <_malloc_r>
 8007ac6:	bf00      	nop
 8007ac8:	20000588 	.word	0x20000588

08007acc <free>:
 8007acc:	4b02      	ldr	r3, [pc, #8]	; (8007ad8 <free+0xc>)
 8007ace:	4601      	mov	r1, r0
 8007ad0:	6818      	ldr	r0, [r3, #0]
 8007ad2:	f000 bb0d 	b.w	80080f0 <_free_r>
 8007ad6:	bf00      	nop
 8007ad8:	20000588 	.word	0x20000588

08007adc <_malloc_r>:
 8007adc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae0:	f101 040b 	add.w	r4, r1, #11
 8007ae4:	2c16      	cmp	r4, #22
 8007ae6:	4681      	mov	r9, r0
 8007ae8:	d907      	bls.n	8007afa <_malloc_r+0x1e>
 8007aea:	f034 0407 	bics.w	r4, r4, #7
 8007aee:	d505      	bpl.n	8007afc <_malloc_r+0x20>
 8007af0:	230c      	movs	r3, #12
 8007af2:	f8c9 3000 	str.w	r3, [r9]
 8007af6:	2600      	movs	r6, #0
 8007af8:	e131      	b.n	8007d5e <_malloc_r+0x282>
 8007afa:	2410      	movs	r4, #16
 8007afc:	428c      	cmp	r4, r1
 8007afe:	d3f7      	bcc.n	8007af0 <_malloc_r+0x14>
 8007b00:	4648      	mov	r0, r9
 8007b02:	f000 fa0d 	bl	8007f20 <__malloc_lock>
 8007b06:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8007b0a:	4d9c      	ldr	r5, [pc, #624]	; (8007d7c <_malloc_r+0x2a0>)
 8007b0c:	d236      	bcs.n	8007b7c <_malloc_r+0xa0>
 8007b0e:	f104 0208 	add.w	r2, r4, #8
 8007b12:	442a      	add	r2, r5
 8007b14:	f1a2 0108 	sub.w	r1, r2, #8
 8007b18:	6856      	ldr	r6, [r2, #4]
 8007b1a:	428e      	cmp	r6, r1
 8007b1c:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8007b20:	d102      	bne.n	8007b28 <_malloc_r+0x4c>
 8007b22:	68d6      	ldr	r6, [r2, #12]
 8007b24:	42b2      	cmp	r2, r6
 8007b26:	d010      	beq.n	8007b4a <_malloc_r+0x6e>
 8007b28:	6873      	ldr	r3, [r6, #4]
 8007b2a:	68f2      	ldr	r2, [r6, #12]
 8007b2c:	68b1      	ldr	r1, [r6, #8]
 8007b2e:	f023 0303 	bic.w	r3, r3, #3
 8007b32:	60ca      	str	r2, [r1, #12]
 8007b34:	4433      	add	r3, r6
 8007b36:	6091      	str	r1, [r2, #8]
 8007b38:	685a      	ldr	r2, [r3, #4]
 8007b3a:	f042 0201 	orr.w	r2, r2, #1
 8007b3e:	605a      	str	r2, [r3, #4]
 8007b40:	4648      	mov	r0, r9
 8007b42:	f000 f9f3 	bl	8007f2c <__malloc_unlock>
 8007b46:	3608      	adds	r6, #8
 8007b48:	e109      	b.n	8007d5e <_malloc_r+0x282>
 8007b4a:	3302      	adds	r3, #2
 8007b4c:	4a8c      	ldr	r2, [pc, #560]	; (8007d80 <_malloc_r+0x2a4>)
 8007b4e:	692e      	ldr	r6, [r5, #16]
 8007b50:	4296      	cmp	r6, r2
 8007b52:	4611      	mov	r1, r2
 8007b54:	d06d      	beq.n	8007c32 <_malloc_r+0x156>
 8007b56:	6870      	ldr	r0, [r6, #4]
 8007b58:	f020 0003 	bic.w	r0, r0, #3
 8007b5c:	1b07      	subs	r7, r0, r4
 8007b5e:	2f0f      	cmp	r7, #15
 8007b60:	dd47      	ble.n	8007bf2 <_malloc_r+0x116>
 8007b62:	1933      	adds	r3, r6, r4
 8007b64:	f044 0401 	orr.w	r4, r4, #1
 8007b68:	6074      	str	r4, [r6, #4]
 8007b6a:	616b      	str	r3, [r5, #20]
 8007b6c:	612b      	str	r3, [r5, #16]
 8007b6e:	60da      	str	r2, [r3, #12]
 8007b70:	609a      	str	r2, [r3, #8]
 8007b72:	f047 0201 	orr.w	r2, r7, #1
 8007b76:	605a      	str	r2, [r3, #4]
 8007b78:	5037      	str	r7, [r6, r0]
 8007b7a:	e7e1      	b.n	8007b40 <_malloc_r+0x64>
 8007b7c:	0a63      	lsrs	r3, r4, #9
 8007b7e:	d02a      	beq.n	8007bd6 <_malloc_r+0xfa>
 8007b80:	2b04      	cmp	r3, #4
 8007b82:	d812      	bhi.n	8007baa <_malloc_r+0xce>
 8007b84:	09a3      	lsrs	r3, r4, #6
 8007b86:	3338      	adds	r3, #56	; 0x38
 8007b88:	1c5a      	adds	r2, r3, #1
 8007b8a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8007b8e:	f1a2 0008 	sub.w	r0, r2, #8
 8007b92:	6856      	ldr	r6, [r2, #4]
 8007b94:	4286      	cmp	r6, r0
 8007b96:	d006      	beq.n	8007ba6 <_malloc_r+0xca>
 8007b98:	6872      	ldr	r2, [r6, #4]
 8007b9a:	f022 0203 	bic.w	r2, r2, #3
 8007b9e:	1b11      	subs	r1, r2, r4
 8007ba0:	290f      	cmp	r1, #15
 8007ba2:	dd1c      	ble.n	8007bde <_malloc_r+0x102>
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	e7d0      	b.n	8007b4c <_malloc_r+0x70>
 8007baa:	2b14      	cmp	r3, #20
 8007bac:	d801      	bhi.n	8007bb2 <_malloc_r+0xd6>
 8007bae:	335b      	adds	r3, #91	; 0x5b
 8007bb0:	e7ea      	b.n	8007b88 <_malloc_r+0xac>
 8007bb2:	2b54      	cmp	r3, #84	; 0x54
 8007bb4:	d802      	bhi.n	8007bbc <_malloc_r+0xe0>
 8007bb6:	0b23      	lsrs	r3, r4, #12
 8007bb8:	336e      	adds	r3, #110	; 0x6e
 8007bba:	e7e5      	b.n	8007b88 <_malloc_r+0xac>
 8007bbc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007bc0:	d802      	bhi.n	8007bc8 <_malloc_r+0xec>
 8007bc2:	0be3      	lsrs	r3, r4, #15
 8007bc4:	3377      	adds	r3, #119	; 0x77
 8007bc6:	e7df      	b.n	8007b88 <_malloc_r+0xac>
 8007bc8:	f240 5254 	movw	r2, #1364	; 0x554
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d804      	bhi.n	8007bda <_malloc_r+0xfe>
 8007bd0:	0ca3      	lsrs	r3, r4, #18
 8007bd2:	337c      	adds	r3, #124	; 0x7c
 8007bd4:	e7d8      	b.n	8007b88 <_malloc_r+0xac>
 8007bd6:	233f      	movs	r3, #63	; 0x3f
 8007bd8:	e7d6      	b.n	8007b88 <_malloc_r+0xac>
 8007bda:	237e      	movs	r3, #126	; 0x7e
 8007bdc:	e7d4      	b.n	8007b88 <_malloc_r+0xac>
 8007bde:	2900      	cmp	r1, #0
 8007be0:	68f1      	ldr	r1, [r6, #12]
 8007be2:	db04      	blt.n	8007bee <_malloc_r+0x112>
 8007be4:	68b3      	ldr	r3, [r6, #8]
 8007be6:	60d9      	str	r1, [r3, #12]
 8007be8:	608b      	str	r3, [r1, #8]
 8007bea:	18b3      	adds	r3, r6, r2
 8007bec:	e7a4      	b.n	8007b38 <_malloc_r+0x5c>
 8007bee:	460e      	mov	r6, r1
 8007bf0:	e7d0      	b.n	8007b94 <_malloc_r+0xb8>
 8007bf2:	2f00      	cmp	r7, #0
 8007bf4:	616a      	str	r2, [r5, #20]
 8007bf6:	612a      	str	r2, [r5, #16]
 8007bf8:	db05      	blt.n	8007c06 <_malloc_r+0x12a>
 8007bfa:	4430      	add	r0, r6
 8007bfc:	6843      	ldr	r3, [r0, #4]
 8007bfe:	f043 0301 	orr.w	r3, r3, #1
 8007c02:	6043      	str	r3, [r0, #4]
 8007c04:	e79c      	b.n	8007b40 <_malloc_r+0x64>
 8007c06:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007c0a:	d244      	bcs.n	8007c96 <_malloc_r+0x1ba>
 8007c0c:	08c0      	lsrs	r0, r0, #3
 8007c0e:	1087      	asrs	r7, r0, #2
 8007c10:	2201      	movs	r2, #1
 8007c12:	fa02 f707 	lsl.w	r7, r2, r7
 8007c16:	686a      	ldr	r2, [r5, #4]
 8007c18:	3001      	adds	r0, #1
 8007c1a:	433a      	orrs	r2, r7
 8007c1c:	606a      	str	r2, [r5, #4]
 8007c1e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8007c22:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8007c26:	60b7      	str	r7, [r6, #8]
 8007c28:	3a08      	subs	r2, #8
 8007c2a:	60f2      	str	r2, [r6, #12]
 8007c2c:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8007c30:	60fe      	str	r6, [r7, #12]
 8007c32:	2001      	movs	r0, #1
 8007c34:	109a      	asrs	r2, r3, #2
 8007c36:	fa00 f202 	lsl.w	r2, r0, r2
 8007c3a:	6868      	ldr	r0, [r5, #4]
 8007c3c:	4282      	cmp	r2, r0
 8007c3e:	f200 80a1 	bhi.w	8007d84 <_malloc_r+0x2a8>
 8007c42:	4202      	tst	r2, r0
 8007c44:	d106      	bne.n	8007c54 <_malloc_r+0x178>
 8007c46:	f023 0303 	bic.w	r3, r3, #3
 8007c4a:	0052      	lsls	r2, r2, #1
 8007c4c:	4202      	tst	r2, r0
 8007c4e:	f103 0304 	add.w	r3, r3, #4
 8007c52:	d0fa      	beq.n	8007c4a <_malloc_r+0x16e>
 8007c54:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8007c58:	46e0      	mov	r8, ip
 8007c5a:	469e      	mov	lr, r3
 8007c5c:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8007c60:	4546      	cmp	r6, r8
 8007c62:	d153      	bne.n	8007d0c <_malloc_r+0x230>
 8007c64:	f10e 0e01 	add.w	lr, lr, #1
 8007c68:	f01e 0f03 	tst.w	lr, #3
 8007c6c:	f108 0808 	add.w	r8, r8, #8
 8007c70:	d1f4      	bne.n	8007c5c <_malloc_r+0x180>
 8007c72:	0798      	lsls	r0, r3, #30
 8007c74:	d179      	bne.n	8007d6a <_malloc_r+0x28e>
 8007c76:	686b      	ldr	r3, [r5, #4]
 8007c78:	ea23 0302 	bic.w	r3, r3, r2
 8007c7c:	606b      	str	r3, [r5, #4]
 8007c7e:	6868      	ldr	r0, [r5, #4]
 8007c80:	0052      	lsls	r2, r2, #1
 8007c82:	4282      	cmp	r2, r0
 8007c84:	d87e      	bhi.n	8007d84 <_malloc_r+0x2a8>
 8007c86:	2a00      	cmp	r2, #0
 8007c88:	d07c      	beq.n	8007d84 <_malloc_r+0x2a8>
 8007c8a:	4673      	mov	r3, lr
 8007c8c:	4202      	tst	r2, r0
 8007c8e:	d1e1      	bne.n	8007c54 <_malloc_r+0x178>
 8007c90:	3304      	adds	r3, #4
 8007c92:	0052      	lsls	r2, r2, #1
 8007c94:	e7fa      	b.n	8007c8c <_malloc_r+0x1b0>
 8007c96:	0a42      	lsrs	r2, r0, #9
 8007c98:	2a04      	cmp	r2, #4
 8007c9a:	d815      	bhi.n	8007cc8 <_malloc_r+0x1ec>
 8007c9c:	0982      	lsrs	r2, r0, #6
 8007c9e:	3238      	adds	r2, #56	; 0x38
 8007ca0:	1c57      	adds	r7, r2, #1
 8007ca2:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8007ca6:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8007caa:	45be      	cmp	lr, r7
 8007cac:	d126      	bne.n	8007cfc <_malloc_r+0x220>
 8007cae:	2001      	movs	r0, #1
 8007cb0:	1092      	asrs	r2, r2, #2
 8007cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8007cb6:	6868      	ldr	r0, [r5, #4]
 8007cb8:	4310      	orrs	r0, r2
 8007cba:	6068      	str	r0, [r5, #4]
 8007cbc:	f8c6 e00c 	str.w	lr, [r6, #12]
 8007cc0:	60b7      	str	r7, [r6, #8]
 8007cc2:	f8ce 6008 	str.w	r6, [lr, #8]
 8007cc6:	e7b3      	b.n	8007c30 <_malloc_r+0x154>
 8007cc8:	2a14      	cmp	r2, #20
 8007cca:	d801      	bhi.n	8007cd0 <_malloc_r+0x1f4>
 8007ccc:	325b      	adds	r2, #91	; 0x5b
 8007cce:	e7e7      	b.n	8007ca0 <_malloc_r+0x1c4>
 8007cd0:	2a54      	cmp	r2, #84	; 0x54
 8007cd2:	d802      	bhi.n	8007cda <_malloc_r+0x1fe>
 8007cd4:	0b02      	lsrs	r2, r0, #12
 8007cd6:	326e      	adds	r2, #110	; 0x6e
 8007cd8:	e7e2      	b.n	8007ca0 <_malloc_r+0x1c4>
 8007cda:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007cde:	d802      	bhi.n	8007ce6 <_malloc_r+0x20a>
 8007ce0:	0bc2      	lsrs	r2, r0, #15
 8007ce2:	3277      	adds	r2, #119	; 0x77
 8007ce4:	e7dc      	b.n	8007ca0 <_malloc_r+0x1c4>
 8007ce6:	f240 5754 	movw	r7, #1364	; 0x554
 8007cea:	42ba      	cmp	r2, r7
 8007cec:	bf9a      	itte	ls
 8007cee:	0c82      	lsrls	r2, r0, #18
 8007cf0:	327c      	addls	r2, #124	; 0x7c
 8007cf2:	227e      	movhi	r2, #126	; 0x7e
 8007cf4:	e7d4      	b.n	8007ca0 <_malloc_r+0x1c4>
 8007cf6:	68bf      	ldr	r7, [r7, #8]
 8007cf8:	45be      	cmp	lr, r7
 8007cfa:	d004      	beq.n	8007d06 <_malloc_r+0x22a>
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	f022 0203 	bic.w	r2, r2, #3
 8007d02:	4290      	cmp	r0, r2
 8007d04:	d3f7      	bcc.n	8007cf6 <_malloc_r+0x21a>
 8007d06:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8007d0a:	e7d7      	b.n	8007cbc <_malloc_r+0x1e0>
 8007d0c:	6870      	ldr	r0, [r6, #4]
 8007d0e:	68f7      	ldr	r7, [r6, #12]
 8007d10:	f020 0003 	bic.w	r0, r0, #3
 8007d14:	eba0 0a04 	sub.w	sl, r0, r4
 8007d18:	f1ba 0f0f 	cmp.w	sl, #15
 8007d1c:	dd10      	ble.n	8007d40 <_malloc_r+0x264>
 8007d1e:	68b2      	ldr	r2, [r6, #8]
 8007d20:	1933      	adds	r3, r6, r4
 8007d22:	f044 0401 	orr.w	r4, r4, #1
 8007d26:	6074      	str	r4, [r6, #4]
 8007d28:	60d7      	str	r7, [r2, #12]
 8007d2a:	60ba      	str	r2, [r7, #8]
 8007d2c:	f04a 0201 	orr.w	r2, sl, #1
 8007d30:	616b      	str	r3, [r5, #20]
 8007d32:	612b      	str	r3, [r5, #16]
 8007d34:	60d9      	str	r1, [r3, #12]
 8007d36:	6099      	str	r1, [r3, #8]
 8007d38:	605a      	str	r2, [r3, #4]
 8007d3a:	f846 a000 	str.w	sl, [r6, r0]
 8007d3e:	e6ff      	b.n	8007b40 <_malloc_r+0x64>
 8007d40:	f1ba 0f00 	cmp.w	sl, #0
 8007d44:	db0f      	blt.n	8007d66 <_malloc_r+0x28a>
 8007d46:	4430      	add	r0, r6
 8007d48:	6843      	ldr	r3, [r0, #4]
 8007d4a:	f043 0301 	orr.w	r3, r3, #1
 8007d4e:	6043      	str	r3, [r0, #4]
 8007d50:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8007d54:	4648      	mov	r0, r9
 8007d56:	60df      	str	r7, [r3, #12]
 8007d58:	60bb      	str	r3, [r7, #8]
 8007d5a:	f000 f8e7 	bl	8007f2c <__malloc_unlock>
 8007d5e:	4630      	mov	r0, r6
 8007d60:	b003      	add	sp, #12
 8007d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d66:	463e      	mov	r6, r7
 8007d68:	e77a      	b.n	8007c60 <_malloc_r+0x184>
 8007d6a:	f85c 0908 	ldr.w	r0, [ip], #-8
 8007d6e:	4584      	cmp	ip, r0
 8007d70:	f103 33ff 	add.w	r3, r3, #4294967295
 8007d74:	f43f af7d 	beq.w	8007c72 <_malloc_r+0x196>
 8007d78:	e781      	b.n	8007c7e <_malloc_r+0x1a2>
 8007d7a:	bf00      	nop
 8007d7c:	20000174 	.word	0x20000174
 8007d80:	2000017c 	.word	0x2000017c
 8007d84:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8007d88:	f8db 6004 	ldr.w	r6, [fp, #4]
 8007d8c:	f026 0603 	bic.w	r6, r6, #3
 8007d90:	42b4      	cmp	r4, r6
 8007d92:	d803      	bhi.n	8007d9c <_malloc_r+0x2c0>
 8007d94:	1b33      	subs	r3, r6, r4
 8007d96:	2b0f      	cmp	r3, #15
 8007d98:	f300 8096 	bgt.w	8007ec8 <_malloc_r+0x3ec>
 8007d9c:	4a4f      	ldr	r2, [pc, #316]	; (8007edc <_malloc_r+0x400>)
 8007d9e:	6817      	ldr	r7, [r2, #0]
 8007da0:	4a4f      	ldr	r2, [pc, #316]	; (8007ee0 <_malloc_r+0x404>)
 8007da2:	6811      	ldr	r1, [r2, #0]
 8007da4:	3710      	adds	r7, #16
 8007da6:	3101      	adds	r1, #1
 8007da8:	eb0b 0306 	add.w	r3, fp, r6
 8007dac:	4427      	add	r7, r4
 8007dae:	d005      	beq.n	8007dbc <_malloc_r+0x2e0>
 8007db0:	494c      	ldr	r1, [pc, #304]	; (8007ee4 <_malloc_r+0x408>)
 8007db2:	3901      	subs	r1, #1
 8007db4:	440f      	add	r7, r1
 8007db6:	3101      	adds	r1, #1
 8007db8:	4249      	negs	r1, r1
 8007dba:	400f      	ands	r7, r1
 8007dbc:	4639      	mov	r1, r7
 8007dbe:	4648      	mov	r0, r9
 8007dc0:	9201      	str	r2, [sp, #4]
 8007dc2:	9300      	str	r3, [sp, #0]
 8007dc4:	f000 f8b8 	bl	8007f38 <_sbrk_r>
 8007dc8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007dcc:	4680      	mov	r8, r0
 8007dce:	d056      	beq.n	8007e7e <_malloc_r+0x3a2>
 8007dd0:	9b00      	ldr	r3, [sp, #0]
 8007dd2:	9a01      	ldr	r2, [sp, #4]
 8007dd4:	4283      	cmp	r3, r0
 8007dd6:	d901      	bls.n	8007ddc <_malloc_r+0x300>
 8007dd8:	45ab      	cmp	fp, r5
 8007dda:	d150      	bne.n	8007e7e <_malloc_r+0x3a2>
 8007ddc:	4842      	ldr	r0, [pc, #264]	; (8007ee8 <_malloc_r+0x40c>)
 8007dde:	6801      	ldr	r1, [r0, #0]
 8007de0:	4543      	cmp	r3, r8
 8007de2:	eb07 0e01 	add.w	lr, r7, r1
 8007de6:	f8c0 e000 	str.w	lr, [r0]
 8007dea:	4940      	ldr	r1, [pc, #256]	; (8007eec <_malloc_r+0x410>)
 8007dec:	4682      	mov	sl, r0
 8007dee:	d113      	bne.n	8007e18 <_malloc_r+0x33c>
 8007df0:	420b      	tst	r3, r1
 8007df2:	d111      	bne.n	8007e18 <_malloc_r+0x33c>
 8007df4:	68ab      	ldr	r3, [r5, #8]
 8007df6:	443e      	add	r6, r7
 8007df8:	f046 0601 	orr.w	r6, r6, #1
 8007dfc:	605e      	str	r6, [r3, #4]
 8007dfe:	4a3c      	ldr	r2, [pc, #240]	; (8007ef0 <_malloc_r+0x414>)
 8007e00:	f8da 3000 	ldr.w	r3, [sl]
 8007e04:	6811      	ldr	r1, [r2, #0]
 8007e06:	428b      	cmp	r3, r1
 8007e08:	bf88      	it	hi
 8007e0a:	6013      	strhi	r3, [r2, #0]
 8007e0c:	4a39      	ldr	r2, [pc, #228]	; (8007ef4 <_malloc_r+0x418>)
 8007e0e:	6811      	ldr	r1, [r2, #0]
 8007e10:	428b      	cmp	r3, r1
 8007e12:	bf88      	it	hi
 8007e14:	6013      	strhi	r3, [r2, #0]
 8007e16:	e032      	b.n	8007e7e <_malloc_r+0x3a2>
 8007e18:	6810      	ldr	r0, [r2, #0]
 8007e1a:	3001      	adds	r0, #1
 8007e1c:	bf1b      	ittet	ne
 8007e1e:	eba8 0303 	subne.w	r3, r8, r3
 8007e22:	4473      	addne	r3, lr
 8007e24:	f8c2 8000 	streq.w	r8, [r2]
 8007e28:	f8ca 3000 	strne.w	r3, [sl]
 8007e2c:	f018 0007 	ands.w	r0, r8, #7
 8007e30:	bf1c      	itt	ne
 8007e32:	f1c0 0008 	rsbne	r0, r0, #8
 8007e36:	4480      	addne	r8, r0
 8007e38:	4b2a      	ldr	r3, [pc, #168]	; (8007ee4 <_malloc_r+0x408>)
 8007e3a:	4447      	add	r7, r8
 8007e3c:	4418      	add	r0, r3
 8007e3e:	400f      	ands	r7, r1
 8007e40:	1bc7      	subs	r7, r0, r7
 8007e42:	4639      	mov	r1, r7
 8007e44:	4648      	mov	r0, r9
 8007e46:	f000 f877 	bl	8007f38 <_sbrk_r>
 8007e4a:	1c43      	adds	r3, r0, #1
 8007e4c:	bf08      	it	eq
 8007e4e:	4640      	moveq	r0, r8
 8007e50:	f8da 3000 	ldr.w	r3, [sl]
 8007e54:	f8c5 8008 	str.w	r8, [r5, #8]
 8007e58:	bf08      	it	eq
 8007e5a:	2700      	moveq	r7, #0
 8007e5c:	eba0 0008 	sub.w	r0, r0, r8
 8007e60:	443b      	add	r3, r7
 8007e62:	4407      	add	r7, r0
 8007e64:	f047 0701 	orr.w	r7, r7, #1
 8007e68:	45ab      	cmp	fp, r5
 8007e6a:	f8ca 3000 	str.w	r3, [sl]
 8007e6e:	f8c8 7004 	str.w	r7, [r8, #4]
 8007e72:	d0c4      	beq.n	8007dfe <_malloc_r+0x322>
 8007e74:	2e0f      	cmp	r6, #15
 8007e76:	d810      	bhi.n	8007e9a <_malloc_r+0x3be>
 8007e78:	2301      	movs	r3, #1
 8007e7a:	f8c8 3004 	str.w	r3, [r8, #4]
 8007e7e:	68ab      	ldr	r3, [r5, #8]
 8007e80:	685a      	ldr	r2, [r3, #4]
 8007e82:	f022 0203 	bic.w	r2, r2, #3
 8007e86:	4294      	cmp	r4, r2
 8007e88:	eba2 0304 	sub.w	r3, r2, r4
 8007e8c:	d801      	bhi.n	8007e92 <_malloc_r+0x3b6>
 8007e8e:	2b0f      	cmp	r3, #15
 8007e90:	dc1a      	bgt.n	8007ec8 <_malloc_r+0x3ec>
 8007e92:	4648      	mov	r0, r9
 8007e94:	f000 f84a 	bl	8007f2c <__malloc_unlock>
 8007e98:	e62d      	b.n	8007af6 <_malloc_r+0x1a>
 8007e9a:	f8db 3004 	ldr.w	r3, [fp, #4]
 8007e9e:	3e0c      	subs	r6, #12
 8007ea0:	f026 0607 	bic.w	r6, r6, #7
 8007ea4:	f003 0301 	and.w	r3, r3, #1
 8007ea8:	4333      	orrs	r3, r6
 8007eaa:	f8cb 3004 	str.w	r3, [fp, #4]
 8007eae:	eb0b 0306 	add.w	r3, fp, r6
 8007eb2:	2205      	movs	r2, #5
 8007eb4:	2e0f      	cmp	r6, #15
 8007eb6:	605a      	str	r2, [r3, #4]
 8007eb8:	609a      	str	r2, [r3, #8]
 8007eba:	d9a0      	bls.n	8007dfe <_malloc_r+0x322>
 8007ebc:	f10b 0108 	add.w	r1, fp, #8
 8007ec0:	4648      	mov	r0, r9
 8007ec2:	f000 f915 	bl	80080f0 <_free_r>
 8007ec6:	e79a      	b.n	8007dfe <_malloc_r+0x322>
 8007ec8:	68ae      	ldr	r6, [r5, #8]
 8007eca:	f044 0201 	orr.w	r2, r4, #1
 8007ece:	4434      	add	r4, r6
 8007ed0:	f043 0301 	orr.w	r3, r3, #1
 8007ed4:	6072      	str	r2, [r6, #4]
 8007ed6:	60ac      	str	r4, [r5, #8]
 8007ed8:	6063      	str	r3, [r4, #4]
 8007eda:	e631      	b.n	8007b40 <_malloc_r+0x64>
 8007edc:	20004444 	.word	0x20004444
 8007ee0:	2000057c 	.word	0x2000057c
 8007ee4:	00001000 	.word	0x00001000
 8007ee8:	20004414 	.word	0x20004414
 8007eec:	00000fff 	.word	0x00000fff
 8007ef0:	2000443c 	.word	0x2000443c
 8007ef4:	20004440 	.word	0x20004440

08007ef8 <memcpy>:
 8007ef8:	b510      	push	{r4, lr}
 8007efa:	1e43      	subs	r3, r0, #1
 8007efc:	440a      	add	r2, r1
 8007efe:	4291      	cmp	r1, r2
 8007f00:	d100      	bne.n	8007f04 <memcpy+0xc>
 8007f02:	bd10      	pop	{r4, pc}
 8007f04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f0c:	e7f7      	b.n	8007efe <memcpy+0x6>

08007f0e <memset>:
 8007f0e:	4402      	add	r2, r0
 8007f10:	4603      	mov	r3, r0
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d100      	bne.n	8007f18 <memset+0xa>
 8007f16:	4770      	bx	lr
 8007f18:	f803 1b01 	strb.w	r1, [r3], #1
 8007f1c:	e7f9      	b.n	8007f12 <memset+0x4>
	...

08007f20 <__malloc_lock>:
 8007f20:	4801      	ldr	r0, [pc, #4]	; (8007f28 <__malloc_lock+0x8>)
 8007f22:	f000 b9a1 	b.w	8008268 <__retarget_lock_acquire_recursive>
 8007f26:	bf00      	nop
 8007f28:	20006828 	.word	0x20006828

08007f2c <__malloc_unlock>:
 8007f2c:	4801      	ldr	r0, [pc, #4]	; (8007f34 <__malloc_unlock+0x8>)
 8007f2e:	f000 b99d 	b.w	800826c <__retarget_lock_release_recursive>
 8007f32:	bf00      	nop
 8007f34:	20006828 	.word	0x20006828

08007f38 <_sbrk_r>:
 8007f38:	b538      	push	{r3, r4, r5, lr}
 8007f3a:	4c06      	ldr	r4, [pc, #24]	; (8007f54 <_sbrk_r+0x1c>)
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	4605      	mov	r5, r0
 8007f40:	4608      	mov	r0, r1
 8007f42:	6023      	str	r3, [r4, #0]
 8007f44:	f000 f9ee 	bl	8008324 <_sbrk>
 8007f48:	1c43      	adds	r3, r0, #1
 8007f4a:	d102      	bne.n	8007f52 <_sbrk_r+0x1a>
 8007f4c:	6823      	ldr	r3, [r4, #0]
 8007f4e:	b103      	cbz	r3, 8007f52 <_sbrk_r+0x1a>
 8007f50:	602b      	str	r3, [r5, #0]
 8007f52:	bd38      	pop	{r3, r4, r5, pc}
 8007f54:	20006830 	.word	0x20006830

08007f58 <__register_exitproc>:
 8007f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f5c:	4d35      	ldr	r5, [pc, #212]	; (8008034 <__register_exitproc+0xdc>)
 8007f5e:	4680      	mov	r8, r0
 8007f60:	6828      	ldr	r0, [r5, #0]
 8007f62:	4699      	mov	r9, r3
 8007f64:	460f      	mov	r7, r1
 8007f66:	4692      	mov	sl, r2
 8007f68:	f000 f97e 	bl	8008268 <__retarget_lock_acquire_recursive>
 8007f6c:	4b32      	ldr	r3, [pc, #200]	; (8008038 <__register_exitproc+0xe0>)
 8007f6e:	681e      	ldr	r6, [r3, #0]
 8007f70:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8007f72:	b93c      	cbnz	r4, 8007f84 <__register_exitproc+0x2c>
 8007f74:	4b31      	ldr	r3, [pc, #196]	; (800803c <__register_exitproc+0xe4>)
 8007f76:	f106 044c 	add.w	r4, r6, #76	; 0x4c
 8007f7a:	64b4      	str	r4, [r6, #72]	; 0x48
 8007f7c:	b113      	cbz	r3, 8007f84 <__register_exitproc+0x2c>
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f8c6 30d4 	str.w	r3, [r6, #212]	; 0xd4
 8007f84:	6863      	ldr	r3, [r4, #4]
 8007f86:	2b1f      	cmp	r3, #31
 8007f88:	dd46      	ble.n	8008018 <__register_exitproc+0xc0>
 8007f8a:	4b2d      	ldr	r3, [pc, #180]	; (8008040 <__register_exitproc+0xe8>)
 8007f8c:	b933      	cbnz	r3, 8007f9c <__register_exitproc+0x44>
 8007f8e:	6828      	ldr	r0, [r5, #0]
 8007f90:	f000 f96c 	bl	800826c <__retarget_lock_release_recursive>
 8007f94:	f04f 30ff 	mov.w	r0, #4294967295
 8007f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f9c:	208c      	movs	r0, #140	; 0x8c
 8007f9e:	f7ff fd8d 	bl	8007abc <malloc>
 8007fa2:	4604      	mov	r4, r0
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	d0f2      	beq.n	8007f8e <__register_exitproc+0x36>
 8007fa8:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8007faa:	6003      	str	r3, [r0, #0]
 8007fac:	2200      	movs	r2, #0
 8007fae:	6042      	str	r2, [r0, #4]
 8007fb0:	64b0      	str	r0, [r6, #72]	; 0x48
 8007fb2:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 8007fb6:	f1b8 0f00 	cmp.w	r8, #0
 8007fba:	d021      	beq.n	8008000 <__register_exitproc+0xa8>
 8007fbc:	f44f 7084 	mov.w	r0, #264	; 0x108
 8007fc0:	f7ff fd7c 	bl	8007abc <malloc>
 8007fc4:	b390      	cbz	r0, 800802c <__register_exitproc+0xd4>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8007fcc:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8007fd0:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8007fd4:	6862      	ldr	r2, [r4, #4]
 8007fd6:	f840 a022 	str.w	sl, [r0, r2, lsl #2]
 8007fda:	2301      	movs	r3, #1
 8007fdc:	4093      	lsls	r3, r2
 8007fde:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8007fe2:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 8007fe6:	431a      	orrs	r2, r3
 8007fe8:	f1b8 0f02 	cmp.w	r8, #2
 8007fec:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 8007ff0:	f8c1 9080 	str.w	r9, [r1, #128]	; 0x80
 8007ff4:	bf02      	ittt	eq
 8007ff6:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 8007ffa:	4313      	orreq	r3, r2
 8007ffc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8008000:	6863      	ldr	r3, [r4, #4]
 8008002:	6828      	ldr	r0, [r5, #0]
 8008004:	1c5a      	adds	r2, r3, #1
 8008006:	3302      	adds	r3, #2
 8008008:	6062      	str	r2, [r4, #4]
 800800a:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
 800800e:	f000 f92d 	bl	800826c <__retarget_lock_release_recursive>
 8008012:	2000      	movs	r0, #0
 8008014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008018:	f1b8 0f00 	cmp.w	r8, #0
 800801c:	d0f0      	beq.n	8008000 <__register_exitproc+0xa8>
 800801e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8008022:	2800      	cmp	r0, #0
 8008024:	d1d6      	bne.n	8007fd4 <__register_exitproc+0x7c>
 8008026:	4b06      	ldr	r3, [pc, #24]	; (8008040 <__register_exitproc+0xe8>)
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1c7      	bne.n	8007fbc <__register_exitproc+0x64>
 800802c:	6828      	ldr	r0, [r5, #0]
 800802e:	f000 f91c 	bl	800826a <__retarget_lock_release>
 8008032:	e7af      	b.n	8007f94 <__register_exitproc+0x3c>
 8008034:	20000584 	.word	0x20000584
 8008038:	08008540 	.word	0x08008540
 800803c:	0800853c 	.word	0x0800853c
 8008040:	08007abd 	.word	0x08007abd

08008044 <_malloc_trim_r>:
 8008044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008048:	4f25      	ldr	r7, [pc, #148]	; (80080e0 <_malloc_trim_r+0x9c>)
 800804a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80080ec <_malloc_trim_r+0xa8>
 800804e:	4689      	mov	r9, r1
 8008050:	4606      	mov	r6, r0
 8008052:	f7ff ff65 	bl	8007f20 <__malloc_lock>
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	685d      	ldr	r5, [r3, #4]
 800805a:	f1a8 0411 	sub.w	r4, r8, #17
 800805e:	f025 0503 	bic.w	r5, r5, #3
 8008062:	eba4 0409 	sub.w	r4, r4, r9
 8008066:	442c      	add	r4, r5
 8008068:	fbb4 f4f8 	udiv	r4, r4, r8
 800806c:	3c01      	subs	r4, #1
 800806e:	fb08 f404 	mul.w	r4, r8, r4
 8008072:	4544      	cmp	r4, r8
 8008074:	da05      	bge.n	8008082 <_malloc_trim_r+0x3e>
 8008076:	4630      	mov	r0, r6
 8008078:	f7ff ff58 	bl	8007f2c <__malloc_unlock>
 800807c:	2000      	movs	r0, #0
 800807e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008082:	2100      	movs	r1, #0
 8008084:	4630      	mov	r0, r6
 8008086:	f7ff ff57 	bl	8007f38 <_sbrk_r>
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	442b      	add	r3, r5
 800808e:	4298      	cmp	r0, r3
 8008090:	d1f1      	bne.n	8008076 <_malloc_trim_r+0x32>
 8008092:	4261      	negs	r1, r4
 8008094:	4630      	mov	r0, r6
 8008096:	f7ff ff4f 	bl	8007f38 <_sbrk_r>
 800809a:	3001      	adds	r0, #1
 800809c:	d110      	bne.n	80080c0 <_malloc_trim_r+0x7c>
 800809e:	2100      	movs	r1, #0
 80080a0:	4630      	mov	r0, r6
 80080a2:	f7ff ff49 	bl	8007f38 <_sbrk_r>
 80080a6:	68ba      	ldr	r2, [r7, #8]
 80080a8:	1a83      	subs	r3, r0, r2
 80080aa:	2b0f      	cmp	r3, #15
 80080ac:	dde3      	ble.n	8008076 <_malloc_trim_r+0x32>
 80080ae:	490d      	ldr	r1, [pc, #52]	; (80080e4 <_malloc_trim_r+0xa0>)
 80080b0:	6809      	ldr	r1, [r1, #0]
 80080b2:	1a40      	subs	r0, r0, r1
 80080b4:	490c      	ldr	r1, [pc, #48]	; (80080e8 <_malloc_trim_r+0xa4>)
 80080b6:	f043 0301 	orr.w	r3, r3, #1
 80080ba:	6008      	str	r0, [r1, #0]
 80080bc:	6053      	str	r3, [r2, #4]
 80080be:	e7da      	b.n	8008076 <_malloc_trim_r+0x32>
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	4a09      	ldr	r2, [pc, #36]	; (80080e8 <_malloc_trim_r+0xa4>)
 80080c4:	1b2d      	subs	r5, r5, r4
 80080c6:	f045 0501 	orr.w	r5, r5, #1
 80080ca:	605d      	str	r5, [r3, #4]
 80080cc:	6813      	ldr	r3, [r2, #0]
 80080ce:	4630      	mov	r0, r6
 80080d0:	1b1c      	subs	r4, r3, r4
 80080d2:	6014      	str	r4, [r2, #0]
 80080d4:	f7ff ff2a 	bl	8007f2c <__malloc_unlock>
 80080d8:	2001      	movs	r0, #1
 80080da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080de:	bf00      	nop
 80080e0:	20000174 	.word	0x20000174
 80080e4:	2000057c 	.word	0x2000057c
 80080e8:	20004414 	.word	0x20004414
 80080ec:	00001000 	.word	0x00001000

080080f0 <_free_r>:
 80080f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080f4:	4604      	mov	r4, r0
 80080f6:	4688      	mov	r8, r1
 80080f8:	2900      	cmp	r1, #0
 80080fa:	f000 80ab 	beq.w	8008254 <_free_r+0x164>
 80080fe:	f7ff ff0f 	bl	8007f20 <__malloc_lock>
 8008102:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8008106:	4d54      	ldr	r5, [pc, #336]	; (8008258 <_free_r+0x168>)
 8008108:	f022 0001 	bic.w	r0, r2, #1
 800810c:	f1a8 0308 	sub.w	r3, r8, #8
 8008110:	181f      	adds	r7, r3, r0
 8008112:	68a9      	ldr	r1, [r5, #8]
 8008114:	687e      	ldr	r6, [r7, #4]
 8008116:	428f      	cmp	r7, r1
 8008118:	f026 0603 	bic.w	r6, r6, #3
 800811c:	f002 0201 	and.w	r2, r2, #1
 8008120:	d11b      	bne.n	800815a <_free_r+0x6a>
 8008122:	4430      	add	r0, r6
 8008124:	b93a      	cbnz	r2, 8008136 <_free_r+0x46>
 8008126:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800812a:	1a9b      	subs	r3, r3, r2
 800812c:	4410      	add	r0, r2
 800812e:	6899      	ldr	r1, [r3, #8]
 8008130:	68da      	ldr	r2, [r3, #12]
 8008132:	60ca      	str	r2, [r1, #12]
 8008134:	6091      	str	r1, [r2, #8]
 8008136:	f040 0201 	orr.w	r2, r0, #1
 800813a:	605a      	str	r2, [r3, #4]
 800813c:	60ab      	str	r3, [r5, #8]
 800813e:	4b47      	ldr	r3, [pc, #284]	; (800825c <_free_r+0x16c>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4298      	cmp	r0, r3
 8008144:	d304      	bcc.n	8008150 <_free_r+0x60>
 8008146:	4b46      	ldr	r3, [pc, #280]	; (8008260 <_free_r+0x170>)
 8008148:	4620      	mov	r0, r4
 800814a:	6819      	ldr	r1, [r3, #0]
 800814c:	f7ff ff7a 	bl	8008044 <_malloc_trim_r>
 8008150:	4620      	mov	r0, r4
 8008152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008156:	f7ff bee9 	b.w	8007f2c <__malloc_unlock>
 800815a:	607e      	str	r6, [r7, #4]
 800815c:	2a00      	cmp	r2, #0
 800815e:	d139      	bne.n	80081d4 <_free_r+0xe4>
 8008160:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8008164:	1a5b      	subs	r3, r3, r1
 8008166:	4408      	add	r0, r1
 8008168:	6899      	ldr	r1, [r3, #8]
 800816a:	f105 0e08 	add.w	lr, r5, #8
 800816e:	4571      	cmp	r1, lr
 8008170:	d032      	beq.n	80081d8 <_free_r+0xe8>
 8008172:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8008176:	f8c1 e00c 	str.w	lr, [r1, #12]
 800817a:	f8ce 1008 	str.w	r1, [lr, #8]
 800817e:	19b9      	adds	r1, r7, r6
 8008180:	6849      	ldr	r1, [r1, #4]
 8008182:	07c9      	lsls	r1, r1, #31
 8008184:	d40a      	bmi.n	800819c <_free_r+0xac>
 8008186:	4430      	add	r0, r6
 8008188:	68b9      	ldr	r1, [r7, #8]
 800818a:	bb3a      	cbnz	r2, 80081dc <_free_r+0xec>
 800818c:	4e35      	ldr	r6, [pc, #212]	; (8008264 <_free_r+0x174>)
 800818e:	42b1      	cmp	r1, r6
 8008190:	d124      	bne.n	80081dc <_free_r+0xec>
 8008192:	616b      	str	r3, [r5, #20]
 8008194:	612b      	str	r3, [r5, #16]
 8008196:	2201      	movs	r2, #1
 8008198:	60d9      	str	r1, [r3, #12]
 800819a:	6099      	str	r1, [r3, #8]
 800819c:	f040 0101 	orr.w	r1, r0, #1
 80081a0:	6059      	str	r1, [r3, #4]
 80081a2:	5018      	str	r0, [r3, r0]
 80081a4:	2a00      	cmp	r2, #0
 80081a6:	d1d3      	bne.n	8008150 <_free_r+0x60>
 80081a8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80081ac:	d21a      	bcs.n	80081e4 <_free_r+0xf4>
 80081ae:	08c0      	lsrs	r0, r0, #3
 80081b0:	1081      	asrs	r1, r0, #2
 80081b2:	2201      	movs	r2, #1
 80081b4:	408a      	lsls	r2, r1
 80081b6:	6869      	ldr	r1, [r5, #4]
 80081b8:	3001      	adds	r0, #1
 80081ba:	430a      	orrs	r2, r1
 80081bc:	606a      	str	r2, [r5, #4]
 80081be:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80081c2:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 80081c6:	6099      	str	r1, [r3, #8]
 80081c8:	3a08      	subs	r2, #8
 80081ca:	60da      	str	r2, [r3, #12]
 80081cc:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 80081d0:	60cb      	str	r3, [r1, #12]
 80081d2:	e7bd      	b.n	8008150 <_free_r+0x60>
 80081d4:	2200      	movs	r2, #0
 80081d6:	e7d2      	b.n	800817e <_free_r+0x8e>
 80081d8:	2201      	movs	r2, #1
 80081da:	e7d0      	b.n	800817e <_free_r+0x8e>
 80081dc:	68fe      	ldr	r6, [r7, #12]
 80081de:	60ce      	str	r6, [r1, #12]
 80081e0:	60b1      	str	r1, [r6, #8]
 80081e2:	e7db      	b.n	800819c <_free_r+0xac>
 80081e4:	0a42      	lsrs	r2, r0, #9
 80081e6:	2a04      	cmp	r2, #4
 80081e8:	d813      	bhi.n	8008212 <_free_r+0x122>
 80081ea:	0982      	lsrs	r2, r0, #6
 80081ec:	3238      	adds	r2, #56	; 0x38
 80081ee:	1c51      	adds	r1, r2, #1
 80081f0:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80081f4:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80081f8:	428e      	cmp	r6, r1
 80081fa:	d124      	bne.n	8008246 <_free_r+0x156>
 80081fc:	2001      	movs	r0, #1
 80081fe:	1092      	asrs	r2, r2, #2
 8008200:	fa00 f202 	lsl.w	r2, r0, r2
 8008204:	6868      	ldr	r0, [r5, #4]
 8008206:	4302      	orrs	r2, r0
 8008208:	606a      	str	r2, [r5, #4]
 800820a:	60de      	str	r6, [r3, #12]
 800820c:	6099      	str	r1, [r3, #8]
 800820e:	60b3      	str	r3, [r6, #8]
 8008210:	e7de      	b.n	80081d0 <_free_r+0xe0>
 8008212:	2a14      	cmp	r2, #20
 8008214:	d801      	bhi.n	800821a <_free_r+0x12a>
 8008216:	325b      	adds	r2, #91	; 0x5b
 8008218:	e7e9      	b.n	80081ee <_free_r+0xfe>
 800821a:	2a54      	cmp	r2, #84	; 0x54
 800821c:	d802      	bhi.n	8008224 <_free_r+0x134>
 800821e:	0b02      	lsrs	r2, r0, #12
 8008220:	326e      	adds	r2, #110	; 0x6e
 8008222:	e7e4      	b.n	80081ee <_free_r+0xfe>
 8008224:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008228:	d802      	bhi.n	8008230 <_free_r+0x140>
 800822a:	0bc2      	lsrs	r2, r0, #15
 800822c:	3277      	adds	r2, #119	; 0x77
 800822e:	e7de      	b.n	80081ee <_free_r+0xfe>
 8008230:	f240 5154 	movw	r1, #1364	; 0x554
 8008234:	428a      	cmp	r2, r1
 8008236:	bf9a      	itte	ls
 8008238:	0c82      	lsrls	r2, r0, #18
 800823a:	327c      	addls	r2, #124	; 0x7c
 800823c:	227e      	movhi	r2, #126	; 0x7e
 800823e:	e7d6      	b.n	80081ee <_free_r+0xfe>
 8008240:	6889      	ldr	r1, [r1, #8]
 8008242:	428e      	cmp	r6, r1
 8008244:	d004      	beq.n	8008250 <_free_r+0x160>
 8008246:	684a      	ldr	r2, [r1, #4]
 8008248:	f022 0203 	bic.w	r2, r2, #3
 800824c:	4290      	cmp	r0, r2
 800824e:	d3f7      	bcc.n	8008240 <_free_r+0x150>
 8008250:	68ce      	ldr	r6, [r1, #12]
 8008252:	e7da      	b.n	800820a <_free_r+0x11a>
 8008254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008258:	20000174 	.word	0x20000174
 800825c:	20000580 	.word	0x20000580
 8008260:	20004444 	.word	0x20004444
 8008264:	2000017c 	.word	0x2000017c

08008268 <__retarget_lock_acquire_recursive>:
 8008268:	4770      	bx	lr

0800826a <__retarget_lock_release>:
 800826a:	4770      	bx	lr

0800826c <__retarget_lock_release_recursive>:
 800826c:	4770      	bx	lr

0800826e <abort>:
 800826e:	b508      	push	{r3, lr}
 8008270:	2006      	movs	r0, #6
 8008272:	f000 f82b 	bl	80082cc <raise>
 8008276:	2001      	movs	r0, #1
 8008278:	f000 f862 	bl	8008340 <_exit>

0800827c <_raise_r>:
 800827c:	291f      	cmp	r1, #31
 800827e:	b538      	push	{r3, r4, r5, lr}
 8008280:	4604      	mov	r4, r0
 8008282:	460d      	mov	r5, r1
 8008284:	d904      	bls.n	8008290 <_raise_r+0x14>
 8008286:	2316      	movs	r3, #22
 8008288:	6003      	str	r3, [r0, #0]
 800828a:	f04f 30ff 	mov.w	r0, #4294967295
 800828e:	bd38      	pop	{r3, r4, r5, pc}
 8008290:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008292:	b112      	cbz	r2, 800829a <_raise_r+0x1e>
 8008294:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008298:	b94b      	cbnz	r3, 80082ae <_raise_r+0x32>
 800829a:	4620      	mov	r0, r4
 800829c:	f000 f830 	bl	8008300 <_getpid_r>
 80082a0:	462a      	mov	r2, r5
 80082a2:	4601      	mov	r1, r0
 80082a4:	4620      	mov	r0, r4
 80082a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082aa:	f000 b817 	b.w	80082dc <_kill_r>
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d00a      	beq.n	80082c8 <_raise_r+0x4c>
 80082b2:	1c59      	adds	r1, r3, #1
 80082b4:	d103      	bne.n	80082be <_raise_r+0x42>
 80082b6:	2316      	movs	r3, #22
 80082b8:	6003      	str	r3, [r0, #0]
 80082ba:	2001      	movs	r0, #1
 80082bc:	bd38      	pop	{r3, r4, r5, pc}
 80082be:	2400      	movs	r4, #0
 80082c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80082c4:	4628      	mov	r0, r5
 80082c6:	4798      	blx	r3
 80082c8:	2000      	movs	r0, #0
 80082ca:	bd38      	pop	{r3, r4, r5, pc}

080082cc <raise>:
 80082cc:	4b02      	ldr	r3, [pc, #8]	; (80082d8 <raise+0xc>)
 80082ce:	4601      	mov	r1, r0
 80082d0:	6818      	ldr	r0, [r3, #0]
 80082d2:	f7ff bfd3 	b.w	800827c <_raise_r>
 80082d6:	bf00      	nop
 80082d8:	20000588 	.word	0x20000588

080082dc <_kill_r>:
 80082dc:	b538      	push	{r3, r4, r5, lr}
 80082de:	4c07      	ldr	r4, [pc, #28]	; (80082fc <_kill_r+0x20>)
 80082e0:	2300      	movs	r3, #0
 80082e2:	4605      	mov	r5, r0
 80082e4:	4608      	mov	r0, r1
 80082e6:	4611      	mov	r1, r2
 80082e8:	6023      	str	r3, [r4, #0]
 80082ea:	f000 f813 	bl	8008314 <_kill>
 80082ee:	1c43      	adds	r3, r0, #1
 80082f0:	d102      	bne.n	80082f8 <_kill_r+0x1c>
 80082f2:	6823      	ldr	r3, [r4, #0]
 80082f4:	b103      	cbz	r3, 80082f8 <_kill_r+0x1c>
 80082f6:	602b      	str	r3, [r5, #0]
 80082f8:	bd38      	pop	{r3, r4, r5, pc}
 80082fa:	bf00      	nop
 80082fc:	20006830 	.word	0x20006830

08008300 <_getpid_r>:
 8008300:	f000 b800 	b.w	8008304 <_getpid>

08008304 <_getpid>:
 8008304:	4b02      	ldr	r3, [pc, #8]	; (8008310 <_getpid+0xc>)
 8008306:	2258      	movs	r2, #88	; 0x58
 8008308:	601a      	str	r2, [r3, #0]
 800830a:	f04f 30ff 	mov.w	r0, #4294967295
 800830e:	4770      	bx	lr
 8008310:	20006830 	.word	0x20006830

08008314 <_kill>:
 8008314:	4b02      	ldr	r3, [pc, #8]	; (8008320 <_kill+0xc>)
 8008316:	2258      	movs	r2, #88	; 0x58
 8008318:	601a      	str	r2, [r3, #0]
 800831a:	f04f 30ff 	mov.w	r0, #4294967295
 800831e:	4770      	bx	lr
 8008320:	20006830 	.word	0x20006830

08008324 <_sbrk>:
 8008324:	4b04      	ldr	r3, [pc, #16]	; (8008338 <_sbrk+0x14>)
 8008326:	6819      	ldr	r1, [r3, #0]
 8008328:	4602      	mov	r2, r0
 800832a:	b909      	cbnz	r1, 8008330 <_sbrk+0xc>
 800832c:	4903      	ldr	r1, [pc, #12]	; (800833c <_sbrk+0x18>)
 800832e:	6019      	str	r1, [r3, #0]
 8008330:	6818      	ldr	r0, [r3, #0]
 8008332:	4402      	add	r2, r0
 8008334:	601a      	str	r2, [r3, #0]
 8008336:	4770      	bx	lr
 8008338:	20004550 	.word	0x20004550
 800833c:	20006834 	.word	0x20006834

08008340 <_exit>:
 8008340:	e7fe      	b.n	8008340 <_exit>
	...

08008344 <_init>:
 8008344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008346:	bf00      	nop
 8008348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800834a:	bc08      	pop	{r3}
 800834c:	469e      	mov	lr, r3
 800834e:	4770      	bx	lr

08008350 <_fini>:
 8008350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008352:	bf00      	nop
 8008354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008356:	bc08      	pop	{r3}
 8008358:	469e      	mov	lr, r3
 800835a:	4770      	bx	lr
